using MailKit.Net.Smtp;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using MimeKit;
using MongoDB.Bson;
using MongoDB.Driver;
using MyyPub.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using PdfSharp.Drawing;
using PdfSharp.Drawing.Layout;
using PdfSharp.Pdf;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml.Linq;
using TimeZoneConverter;

namespace MyyPub.VedicHorro
{
	[Route("api")]
	[ApiController]
	[EnableCors("CorsPolicy")]
	//[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
	public class VedicHorooController : ControllerBase
	{
		private IWebHostEnvironment _env;
		private readonly ILogger<VedicHorooController> _logger;
		private readonly IConfiguration _config;
		private readonly ITokenService _tokenService;
		static Random random = new Random();
		private const double EARTH_RADIUS_NM = 3437.670013352;
		//private const string connectionString = "mongodb://vhoroo:wsolist@3.0.230.17/myypub";
		private const string connectionString = "mongodb://vhoroo:wsolist@52.86.111.123/myypub";
		MongoClient client = new MongoClient(connectionString); // connect to localhost
		public static string GetRandomHexNumber(int digits)
		{
			byte[] buffer = new byte[digits / 2];
			random.NextBytes(buffer);
			string result = String.Concat(buffer.Select(x => x.ToString("X2")).ToArray());
			if (digits % 2 == 0)
				return result;
			return result + random.Next(16).ToString("X");
		}
		double REV(double x)
		{
			return ((x) - Math.Floor((x) / 360.0) * 360.0);
		}
		public VedicHorooController(IWebHostEnvironment env, ILogger<VedicHorooController> logger, IConfiguration config, ITokenService tokenService)
		{
			_logger = logger;
			_env = env;
			_config = config;
			_tokenService = tokenService;
		}
		[HttpPost("Login")]
		public async Task<Profile> Login([FromBody] LoginParams loginParams)
		{
			try
			{
				Profile prf = await GetProfile(loginParams.password);
				if (prf.status != "E" && prf.status != "X")
				{
					Token tok = _tokenService.BuildToken(_config["Jwt:Key"].ToString(), _config["Jwt:Issuer"].ToString(), prf.dob.Split('#')[1].Split('&')[0], loginParams.name);
					prf.token = tok.token;
					prf.expires = tok.expires.ToString("s", CultureInfo.CreateSpecificCulture("en-US"));
				}
				return prf;
			}
			catch (Exception eX)
			{
				var ast = new Profile
				{
					dob = eX.Message,
					status = "E"
				};
				return ast;
			}
		}
		[HttpGet("CalcVimEx")]
		public async Task<IActionResult> CalcVimEx(string dob, string latlng, string timezone, string lord, int ayanid, string lang)
		{
			_logger.LogInformation("CalcVimEx");
			Dictionary<string, int> dashas = new Dictionary<string, int>();
			Dictionary<string, Dasha> dctVim = new Dictionary<string, Dasha>();
			const int d_yr = 360;
			const double m_dy = 29.5;
			try
			{
				dashas.Add("Su", 6);
				dashas.Add("Mo", 10);
				dashas.Add("Ma", 7);
				dashas.Add("Ra", 18);
				dashas.Add("Ju", 16);
				dashas.Add("Sa", 19);
				dashas.Add("Me", 17);
				dashas.Add("Ke", 7);
				dashas.Add("Ve", 20);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty, adct = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						break;
				}
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
				}
				Dictionary<string, string> dctAst = null;
				try
				{
					dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				}
				catch
				{
				}
				//string dmsp = dms(mpos);
				//double dps = Convert.ToDouble(string.Format("{0}.{1}", dmsp.Split('.')[0], dmsp.Split('.')[1]));
				//var ras_num = msi;
				//var mon_crs = (ras_num - 1) * 30;
				//var lb = mpos + mon_crs;
				//var ras_num2 = nsi;
				//var mon_crs2 = (ras_num2 - 1) * 30;
				//var sp = nsp + mon_crs2;
				//var b = (lb - sp) / dmsToDec(13, 20, 0);
				//Console.WriteLine(string.Format("bal in degrees: {0}", b));
				//var bal_das = b * dashas[lord.Substring(0, 2).ToLower()];
				//Console.WriteLine(string.Format("bal_das: {0}", bal_das));
				//var adp = bal_das;
				//string adp_s = adp.ToString();
				//int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
				//double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
				//string adm_s = adm.ToString();
				//int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
				//double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * 30 : 0;
				//string adys_s = adys.ToString();
				//adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
				//double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
				//string adhs_s = adhs.ToString();
				//adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
				//double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
				//string adhms_s = adhms.ToString();
				//adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
				//var elp_dys = ady * d_yr + adm1 * m_dy + adys;
				//var rem_days = dashas[lord.Substring(0, 2).ToLower()] * d_yr - elp_dys;

				int year = Convert.ToInt32(dob.Split('T')[0].Split('-')[0]);
				int mon = Convert.ToInt32(dob.Split('T')[0].Split('-')[1]);
				int day = Convert.ToInt32(dob.Split('T')[0].Split('-')[2]);
				int hour = Convert.ToInt32(dob.Split('T')[1].Split(':')[0]);
				int min = Convert.ToInt32(dob.Split('T')[1].Split(':')[1]);
				//int sec = Convert.ToInt32(dob.Split('T')[1].Split(':')[2]);
				var odob = new DateTime(year, mon, day, hour, min, 0);
				var dob_p = new DateTime(year, mon, day, hour, min, 0);
				var dob_c = new DateTime(year, mon, day, hour, min, 0);
				StarConst str = await CalForTime(day, mon, year, hour, min, latlng, timezone, ayanid);
				string cstr = str.star;
				while (str.star == cstr)
				{
					dob_c = dob_c.AddHours(1);
					str = await CalForTime(dob_c.Day, dob_c.Month, dob_c.Year, dob_c.Hour, dob_c.Minute, latlng, timezone, ayanid);
				}
				str.star = cstr;
				while (str.star == cstr)
				{
					dob_p = dob_p.AddHours(-1);
					str = await CalForTime(dob_p.Day, dob_p.Month, dob_p.Year, dob_p.Hour, dob_p.Minute, latlng, timezone, ayanid);
				}
				dob_p.AddHours(1);
				TimeSpan ts1 = odob.Subtract(dob_p);
				TimeSpan ts2 = dob_c.Subtract(dob_p);
				double b = (ts1.TotalMinutes / (double)ts2.TotalMinutes);
				var adp = b;
				var elp_time = b * dashas[lord.Substring(0, 2).ToLower()];//ady * d_yr + adm1 * m_dy + adys;
				var rem_time = dashas[lord.Substring(0, 2).ToLower()] - elp_time;
				string adp_s = rem_time.ToString();
				int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
				double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
				string adm_s = adm.ToString();
				int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
				double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * 30 : 0;
				string adys_s = adys.ToString();
				adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
				double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
				string adhs_s = adhs.ToString();
				adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
				double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
				string adhms_s = adhms.ToString();
				adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
				var rem_days = ady * d_yr + adm1 * m_dy + adys;
				dob_c = dob_c.AddDays(rem_days);
				string pbeg = string.Format("{0}/{1}/{2}", year, mon, day);
				string pend = string.Format("{0}/{1}/{2}", dob_c.Day, dob_c.Month, dob_c.Year);
				var sty = "mdas";
				var cur_date = DateTime.Now;
				if (cur_date >= odob && cur_date <= dob_c) sty = "mdasc";
				var dsa = new Dasha
				{
					lord = dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(lord.ToLower())],
					per = string.Format("{0} To {1}", pbeg, pend),
					type = "MDAS",
					style = sty,
					subs = true,
					show = true,
					icon = "add"
				};
				dctVim.Add(lord, dsa);
				Dictionary<string, Dasha> d1 = await buildAntarDasha(lord, new DateTime(year, mon, day, hour, min, 0), rem_days, dashas, dctAst);
				d1.ToList().ForEach(x => dctVim.Add(x.Key, x.Value));
				string[] arr = { "sun", "moon", "mars", "rahu", "jupiter", "saturn", "mercury", "ketu", "venus" };
				var v_start = 0;
				var v_iter = 0;
				for (var vi = 0; vi < 9; vi++)
				{
					if (v_start > 0)
					{
						v_iter++;
						var startdt = new DateTime(dob_c.Year, dob_c.Month, dob_c.Day, dob_c.Hour, dob_c.Month, dob_c.Second);
						var m = (dob_c.Month).ToString();
						var dd = dob_c.Day.ToString();
						var y = dob_c.Year.ToString();
						dob_c = dob_c.AddYears(Convert.ToInt32(dashas[arr[vi].Substring(0, 2)]));
						pbeg = string.Format("{0}/{1}/{2}", startdt.Day.ToString(), (startdt.Month).ToString(), startdt.Year.ToString());
						pend = string.Format("{0}/{1}/{2}", dob_c.Day.ToString(), (dob_c.Month).ToString(), dob_c.Year.ToString());
						sty = "mdas";
						if (cur_date >= startdt && cur_date <= dob_c) sty = "mdasc";
						var dsa2 = new Dasha
						{
							lord = dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(arr[vi].ToLower())],
							per = string.Format("{0} To {1}", pbeg, pend),
							type = "MDAS",
							style = sty,
							subs = true,
							show = true,
							icon = "add"
						};
						dctVim.Add(arr[vi], dsa2);
						Dictionary<string, Dasha> d2 = await buildAntarDasha(arr[vi], startdt, 0, dashas, dctAst);
						d2.ToList().ForEach(x => dctVim.Add(x.Key, x.Value));
					}
					if (arr[vi] == lord.ToLower())
					{
						v_start = 1;
					}
					if (vi == 8) vi = -1;
					if (v_iter == 8) break;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);
				var dsa2 = new Dasha
				{
					lord = string.Format("ERROR: {0} LINE {1}", eX.Message, line),
					per = "",
					type = "MDAS",
					style = "",
					subs = true,
					show = true,
					icon = ""
				};

				dctVim.Add("eX.Message", dsa2);
			}

			return new JsonResult(dctVim);
		}

		[HttpGet("CalcVim")]
		public async Task<IActionResult> CalcVim(string dob, string lord, double mpos, double nsp, int msi, int nsi, string lang)
		{
			_logger.LogInformation("CalcVim");
			lord = string.Format("{0}{1}", Char.ToUpper(lord[0]), lord.Substring(1, lord.Length - 1));
			Dictionary<string, int> dashas = new Dictionary<string, int>();
			Dictionary<string, Dasha> dctVim = new Dictionary<string, Dasha>();
			const int d_yr = 360;
			const double m_dy = 29.5;// 29.530588;
			try
			{
				dashas.Add("Su", 6);
				dashas.Add("Mo", 10);
				dashas.Add("Ma", 7);
				dashas.Add("Ra", 18);
				dashas.Add("Ju", 16);
				dashas.Add("Sa", 19);
				dashas.Add("Me", 17);
				dashas.Add("Ke", 7);
				dashas.Add("Ve", 20);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty, adct = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						break;
				}
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
				}
				Dictionary<string, string> dctAst = null;
				try
				{
					dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				}
				catch
				{
				}
				string dmsp = dms(mpos);
				double dps = Convert.ToDouble(string.Format("{0}.{1}", dmsp.Split('.')[0], dmsp.Split('.')[1]));
				var ras_num = msi;
				var mon_crs = (ras_num - 1) * 30;
				//var lb = mpos + mon_crs;
				var lb = dps + mon_crs;
				var ras_num2 = nsi;
				var mon_crs2 = (ras_num2 - 1) * 30;
				var sp = nsp + mon_crs2;
				//var b = (lb - sp) / dmsToDec( 13, 20, 0);
				var b = (lb - sp) / 13.20;
				Console.WriteLine(string.Format("bal in degrees: {0}", b));
				var bal_das = b * dashas[string.Format("{0}{1}", Char.ToUpper(lord[0]), lord[1])];
				Console.WriteLine(string.Format("bal_das: {0}", bal_das));
				var adp = bal_das;
				string adp_s = adp.ToString();
				int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
				double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
				string adm_s = adm.ToString();
				int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
				double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * 30 : 0;
				string adys_s = adys.ToString();
				adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
				double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
				string adhs_s = adhs.ToString();
				adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
				double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
				string adhms_s = adhms.ToString();
				adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
				var elp_dys = ady * d_yr + adm1 * m_dy + adys;
				var rem_days = dashas[lord.Substring(0, 2)] * d_yr - elp_dys;

				int year = Convert.ToInt32(dob.Split('T')[0].Split('-')[0]);
				int mon = Convert.ToInt32(dob.Split('T')[0].Split('-')[1]);
				int day = Convert.ToInt32(dob.Split('T')[0].Split('-')[2]);
				int hour = Convert.ToInt32(dob.Split('T')[1].Split(':')[0]);
				int min = Convert.ToInt32(dob.Split('T')[1].Split(':')[1]);
				//int sec = Convert.ToInt32(dob.Split('T')[1].Split('-')[2]);
				var odob = new DateTime(year, mon, day, hour, min, 0);
				var dob_c = new DateTime(year, mon, day, hour, min, 0);
				dob_c = dob_c.AddDays(rem_days);
				string pbeg = string.Format("{0}/{1}/{2}", year, mon, day);
				string pend = string.Format("{0}/{1}/{2}", dob_c.Day, dob_c.Month, dob_c.Year);
				var sty = "mdas";
				var cur_date = DateTime.Now;
				if (cur_date >= odob && cur_date <= dob_c) sty = "mdasc";
				var dsa = new Dasha
				{
					lord = dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(lord.ToLower())],
					per = string.Format("{0} To {1}", pbeg, pend),
					type = "MDAS",
					style = sty,
					subs = true,
					show = true,
					icon = "add"
				};
				dctVim.Add(lord, dsa);
				Dictionary<string, Dasha> d1 = await buildAntarDasha(lord, new DateTime(year, mon, day, hour, min, 0), rem_days, dashas, dctAst);
				d1.ToList().ForEach(x => dctVim.Add(x.Key, x.Value));
				string[] arr = { "Sun", "Moon", "Mars", "Rahu", "Jupiter", "Saturn", "Mercury", "Ketu", "Venus" };
				var v_start = 0;
				var v_iter = 0;
				for (var vi = 0; vi < 9; vi++)
				{
					if (v_start > 0)
					{
						v_iter++;
						var startdt = new DateTime(dob_c.Year, dob_c.Month, dob_c.Day, dob_c.Hour, dob_c.Month, dob_c.Second);
						var m = (dob_c.Month).ToString();
						var dd = dob_c.Day.ToString();
						var y = dob_c.Year.ToString();
						dob_c = dob_c.AddYears(Convert.ToInt32(dashas[arr[vi].Substring(0, 2)]));
						pbeg = string.Format("{0}/{1}/{2}", startdt.Day.ToString(), (startdt.Month).ToString(), startdt.Year.ToString());
						pend = string.Format("{0}/{1}/{2}", dob_c.Day.ToString(), (dob_c.Month).ToString(), dob_c.Year.ToString());
						sty = "mdas";
						if (cur_date >= startdt && cur_date <= dob_c) sty = "mdasc";
						var dsa2 = new Dasha
						{
							lord = dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(arr[vi].ToLower())],
							per = string.Format("{0} To {1}", pbeg, pend),
							type = "MDAS",
							style = sty,
							subs = true,
							show = true,
							icon = "add"
						};
						dctVim.Add(arr[vi], dsa2);
						Dictionary<string, Dasha> d2 = await buildAntarDasha(arr[vi], startdt, 0, dashas, dctAst);
						d2.ToList().ForEach(x => dctVim.Add(x.Key, x.Value));
					}
					if (arr[vi].ToLower() == lord.ToLower())
					{
						v_start = 1;
					}
					if (vi == 8) vi = -1;
					if (v_iter == 8) break;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);
				var dsa2 = new Dasha
				{
					lord = string.Format("ERROR: {0} LINE {1}", eX.Message, line),
					per = "",
					type = "MDAS",
					style = "",
					subs = true,
					show = true,
					icon = ""
				};

				dctVim.Add("eX.Message", dsa2);
			}

			return new JsonResult(dctVim);
		}

		private async Task<Dictionary<string, Dasha>> buildAntarDasha(string lord, DateTime startdt, double remdays, Dictionary<string, int> dashas, Dictionary<string, string> dctAst)
		{

			Dictionary<string, Dasha> dctVim = new Dictionary<string, Dasha>();
			//string akys = "";
			double m_dy = 29.5;// 29.530588;//this.days_in_month(startdt.getMonth()+1, startdt.getFullYear());//30.436875;//29.59421013;//29.530588;//30.436875;//29.530588;
			int d_yr = 360;////this.days_of_a_year(startdt.getFullYear());//365.2425;//366;//354.367056;//;////354.367056;//365.2425;
			double e_dys = 0.0;
			var a_per = 0;
			var cur_date = DateTime.Now;
			Dictionary<string, string> curdas = new Dictionary<string, string>();
			string dasp = string.Empty;
			string astClient = Path.Combine(_env.ContentRootPath, @"Content/astroclient");
			using (StreamReader rdr = new StreamReader(string.Format(@"{0}\{1}_das.json", astClient, lord), Encoding.UTF8))
			{
				dasp = rdr.ReadToEnd();
			}
			try
			{
				curdas = JsonConvert.DeserializeObject<Dictionary<string, string>>(dasp);
			}
			catch
			{
			}

			if (remdays > 0)
			{
				Dictionary<string, string> balDas = new Dictionary<string, string>();
				var s_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
				var rem_d = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
				rem_d = rem_d.AddDays(remdays);
				var tot_dys = Convert.ToInt32(dashas[lord.Substring(0, 2)]) * d_yr;
				e_dys = tot_dys - remdays;
				var ffd = 0.0;
				//var r_dys = 0.0;
				foreach (var das in curdas.Reverse())
				{
					balDas[das.Key] = das.Value;
					var ads = das.Value;
					double adp = (Convert.ToDouble(dashas[lord.Substring(0, 2)]) / 120) * dashas[das.Key];
					string adp_s = adp.ToString();
					int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
					double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
					string adm_s = adm.ToString();
					int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
					double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * 30 : 0;
					string adys_s = adys.ToString();
					adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
					double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
					string adhs_s = adhs.ToString();
					adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
					double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
					string adhms_s = adhms.ToString();
					adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
					var a_dys = Convert.ToInt32(ads.Split('|')[0]) * d_yr + Convert.ToInt32(ads.Split('|')[1]) * m_dy + Convert.ToInt32(ads.Split('|')[2]);
					ffd += a_dys;

					if (ffd >= remdays)
					{
						break;

					}
				}
				Dictionary<string, Dasha> prtDas = new Dictionary<string, Dasha>();
				foreach (var das in balDas)
				{
					a_per++;
					var start_das = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
					var m = (s_dt.Month).ToString();
					var dd = s_dt.Day.ToString();
					var y = s_dt.Year.ToString();
					double adp = (Convert.ToDouble(dashas[lord.Substring(0, 2)]) / 120) * dashas[das.Key];
					string adp_s = adp.ToString();
					int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
					double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
					string adm_s = adm.ToString();
					int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
					double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * 30 : 0;
					string adys_s = adys.ToString();
					adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
					double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
					string adhs_s = adhs.ToString();
					adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
					double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
					string adhms_s = adhms.ToString();
					adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
					//var tot = ady*d_yr + adm*m_dy + adys;
					s_dt = s_dt.AddYears(ady);
					s_dt = s_dt.AddMonths(adm1);
					s_dt = s_dt.AddDays(adys);
					s_dt = s_dt.AddHours(adhs);
					s_dt = s_dt.AddMinutes(adhms);
					string sty = "adas";
					if (cur_date >= start_das && cur_date <= s_dt)
					{
						sty = "adasc";
					}
					string pbeg = string.Format("{0}/{1}/{2}", dd, m, y);
					string pend = string.Format("{0}/{1}/{2}", s_dt.Day.ToString(), (s_dt.Month).ToString(), s_dt.Year.ToString());
					var adas = new Dasha
					{
						lord = string.Format("{0}-{1}", dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(lord.ToLower())], dctAst[das.Key]),
						per = string.Format("{0} To {1}", pbeg, pend),
						type = "ADAS",
						style = sty,
						subs = true,
						show = false,
						icon = "add"
					};
					prtDas.Add(string.Format("{0}-{1}", lord, das.Key), adas);
					bool brem = true;
					//Dictionary<string, Dasha> d2 = buildPratytarDasha(lord, das.Key, new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second), rem_d, remdays, dashas, dctAst, ref brem);
					Dictionary<string, Dasha> d2 = buildPratytarDasha(lord, das.Key, start_das, rem_d, remdays, dashas, dctAst, ref brem);
					d2.ToList().ForEach(x => prtDas.Add(x.Key, x.Value));
					if (!brem) break;
					//if (vdays >= remdays) break;
				}
				prtDas.ToList().ForEach(x => dctVim.Add(x.Key, x.Value));

			}
			else
			{
				var s_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
				foreach (var das in curdas)
				{
					a_per++;
					var start_das = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
					var m = (s_dt.Month).ToString();
					var dd = s_dt.Day.ToString();
					var y = s_dt.Year.ToString();
					double adp = (Convert.ToDouble(dashas[lord.Substring(0, 2)]) / 120) * dashas[das.Key];
					string adp_s = adp.ToString();
					int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
					double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
					string adm_s = adm.ToString();
					int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
					double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * 30 : 0;
					string adys_s = adys.ToString();
					adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
					double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
					string adhs_s = adhs.ToString();
					adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
					double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
					string adhms_s = adhms.ToString();
					adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
					//var tot = ady*d_yr + adm*m_dy + adys;
					s_dt = s_dt.AddYears(ady);
					s_dt = s_dt.AddMonths(adm1);
					s_dt = s_dt.AddDays(adys);
					s_dt = s_dt.AddHours(adhs);
					s_dt = s_dt.AddMinutes(adhms);
					string sty = "adas";
					if (cur_date >= start_das && cur_date <= s_dt)
					{
						sty = "adasc";
					}
					string pbeg = string.Format("{0}/{1}/{2}", dd, m, y);
					string pend = string.Format("{0}/{1}/{2}", s_dt.Day.ToString(), (s_dt.Month).ToString(), s_dt.Year.ToString());
					var adas = new Dasha
					{
						lord = string.Format("{0}-{1}", dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(lord.ToLower())], dctAst[das.Key]),
						per = string.Format("{0} To {1}", pbeg, pend),
						type = "ADAS",
						style = sty,
						subs = true,
						show = false,
						icon = "add"
					};
					dctVim.Add(string.Format("{0}-{1}", lord, das.Key), adas);
					Dictionary<string, Dasha> d2 = await buildPratDas(lord, das.Key, new DateTime(start_das.Year, start_das.Month, start_das.Day, start_das.Hour, start_das.Minute, start_das.Second), s_dt, dashas, dctAst);
					d2.ToList().ForEach(x => dctVim.Add(x.Key, x.Value));
				}
			}
			return dctVim;
		}
		private async Task<Dictionary<string, Dasha>> buildPratDas(string mainlord, string sublord, DateTime startdt, DateTime enddt, Dictionary<string, int> dashas, Dictionary<string, string> dctAst)
		{
			double m_dy = 30;
			Dictionary<string, Dasha> dctVim = await Task.Run(() =>
			{
				Dictionary<string, Dasha> dctVim = new Dictionary<string, Dasha>();
				string[] arr = { "Su", "Mo", "Ma", "Ra", "Ju", "Sa", "Me", "Ke", "Ve" };
				var v_start = 0;
				var v_iter = 0;
				//var a_per = 0;
				var s_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
				var cur_date = DateTime.Now;
				for (var vi = 0; vi < 9; vi++)
				{
					if (arr[vi] == sublord || v_start == 1)
					{
						v_iter++;
						var b_dt = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
						//d_yr = this.days_of_a_year(b_dt.getFullYear());
						var m = (s_dt.Month).ToString();
						var dd = s_dt.Day.ToString();
						var y = s_dt.Year.ToString();
						if (v_iter == 9) s_dt = enddt;
						else
						{
							double adp = (Convert.ToInt32(dashas[mainlord.Substring(0, 2)]) * Convert.ToInt32(dashas[sublord]) * Convert.ToInt32(dashas[arr[vi]])) / (double)(120 * 120);
							string adp_s = adp.ToString();
							int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
							double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
							string adm_s = adm.ToString();
							int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
							double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * m_dy : 0;
							string adys_s = adys.ToString();
							//console.log('adys_s=',adys_s);
							adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
							double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
							string adhs_s = adhs.ToString();
							adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
							double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
							string adhms_s = adhms.ToString();
							adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
							s_dt = s_dt.AddYears(ady);
							s_dt = s_dt.AddMonths(adm1);
							s_dt = s_dt.AddDays(adys);
							s_dt = s_dt.AddHours(adhs);
							s_dt = s_dt.AddMinutes(adhms);
						}
						string pbeg = string.Format("{0}/{1}/{2}", dd, m, y);
						string pend = string.Format("{0}/{1}/{2}", s_dt.Day.ToString(), (s_dt.Month).ToString(), s_dt.Year.ToString());
						var sty = "pdas";
						if (cur_date >= b_dt && cur_date <= s_dt) sty = "pdasc";
						var pdas = new Dasha
						{
							lord = string.Format("{0}-{1}-{2}", dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(mainlord.ToLower())], sublord, arr[vi]),
							per = string.Format("{0} To {1}", pbeg, pend),
							type = "PDAS",
							style = sty,
							subs = false,
							show = false,
							icon = ""
						};
						dctVim.Add(string.Format("{0}-{1}-{2}", mainlord, sublord, arr[vi]), pdas);
						if (s_dt >= enddt) break;
						v_start = 1;
					}
					if (vi == 8) vi = -1;
					if (v_iter == 9) break;
				}
				return dctVim;
			});
			return dctVim;
		}
		//double vdays = buildPratyantarDasha(lord, das.Key, new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second), rem_d, ffd - a_dys, e_dys, dashas, dctAst, ref dctVim);
		private double buildPratyantarDasha(string mainlord, string sublord, DateTime startdt, DateTime enddt, double ofset, double e_dys, Dictionary<string, int> dashas, Dictionary<string, string> dctAst, ref Dictionary<string, Dasha> dctVim)
		{
			double m_dy = 30;
			string[] arr = { "Su", "Mo", "Ma", "Ra", "Ju", "Sa", "Me", "Ke", "Ve" };
			var v_start = 0;
			var v_iter = 0;
			//var a_per = 0;
			double vdays = 0.0;
			double pdays = 0.0;
			var s_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
			var p_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
			var e_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
			var cur_date = DateTime.Now;
			// var oned = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
			double diffdys = ofset;
			for (var vi = 0; vi < 9; vi++)
			{
				if (arr[vi] == sublord || v_start == 1)
				{
					var b_dt = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
					double adp = Convert.ToInt32(dashas[mainlord.Substring(0, 2)]) * Convert.ToInt32(dashas[sublord]) * Convert.ToInt32(dashas[arr[vi]]) / (double)(120 * 120);
					string adp_s = adp.ToString();
					int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
					double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
					string adm_s = adm.ToString();
					int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
					double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * m_dy : 0;
					string adys_s = adys.ToString();
					//console.log('adys_s=',adys_s);
					adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
					double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
					string adhs_s = adhs.ToString();
					adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
					double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
					string adhms_s = adhms.ToString();
					adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
					s_dt = s_dt.AddYears(ady);
					s_dt = s_dt.AddMonths(adm1);
					s_dt = s_dt.AddDays(adys);
					s_dt = s_dt.AddHours(adhs);
					s_dt = s_dt.AddMinutes(adhms);
					//var b_dt = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
					pdays = (s_dt - p_dt).TotalDays;
					diffdys += (s_dt - p_dt).TotalDays;
					p_dt = p_dt.AddYears(ady);
					p_dt = p_dt.AddMonths(adm1);
					p_dt = p_dt.AddDays(adys);
					p_dt = p_dt.AddHours(adhs);
					p_dt = p_dt.AddMinutes(adhms);
					v_iter++;
					if (diffdys >= e_dys)
					{
						var m = e_dt.Month.ToString();
						var dd = e_dt.Day.ToString();
						var y = e_dt.Year.ToString();
						e_dt = e_dt.AddYears(ady);
						e_dt = e_dt.AddMonths(adm1);
						e_dt = e_dt.AddDays(adys);
						e_dt = e_dt.AddHours(adhs);
						e_dt = e_dt.AddMinutes(adhms);
						string pbeg = string.Format("{0}/{1}/{2}", dd, m, y);
						string pend = "";
						if (e_dt <= enddt)
							pend = string.Format("{0}/{1}/{2}", e_dt.Day.ToString(), (e_dt.Month).ToString(), e_dt.Year.ToString());
						else
							pend = string.Format("{0}/{1}/{2}", enddt.Day.ToString(), (enddt.Month).ToString(), enddt.Year.ToString());
						var sty = "pdas";
						if (cur_date >= b_dt && cur_date <= s_dt) sty = "pdasc";
						var pdas = new Dasha
						{
							lord = string.Format("{0}-{1}-{2}", dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(mainlord.ToLower())], sublord, arr[vi]),
							per = string.Format("{0} To {1}", pbeg, pend),
							type = "PDAS",
							style = sty,
							subs = false,
							show = false,
							icon = ""
						};
						dctVim.Add(string.Format("{0}-{1}-{2}", mainlord, sublord, arr[vi]), pdas);
						vdays += pdays;
					}
					v_start = 1;
					if (e_dt >= enddt) break;
				}
				if (vi == 8) vi = -1;
				if (v_iter == 9) break;
			}
			return vdays;
		}
		private Dictionary<string, Dasha> buildPratytarDasha(string mainlord, string sublord, DateTime startdt, DateTime enddt, double remdays, Dictionary<string, int> dashas, Dictionary<string, string> dctAst, ref bool brem)
		{
			double m_dy = 30;
			Dictionary<string, Dasha> dctPrt = new Dictionary<string, Dasha>();
			string[] arr = { "Su", "Mo", "Ma", "Ra", "Ju", "Sa", "Me", "Ke", "Ve" };
			var v_start = 0;
			var v_iter = 0;
			var vo = -1;
			//var a_per = 0;
			double vdays = 0.0;
			double pdays = 0.0;
			var s_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
			var p_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
			var e_dt = new DateTime(startdt.Year, startdt.Month, startdt.Day, startdt.Hour, startdt.Minute, startdt.Second);
			var cur_date = DateTime.Now;
			// var oned = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
			double diffdys = 0F;
			for (var vi = 0; vi < 9; vi++)
			{
				if (arr[vi] == sublord || v_start == 1)
				{
					var b_dt = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
					double adp = Convert.ToInt32(dashas[mainlord.Substring(0, 2)]) * Convert.ToInt32(dashas[sublord]) * Convert.ToInt32(dashas[arr[vi]]) / (double)(120 * 120);
					string adp_s = adp.ToString();
					int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
					double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
					string adm_s = adm.ToString();
					int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
					double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * m_dy : 0;
					string adys_s = adys.ToString();
					//console.log('adys_s=',adys_s);
					adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
					double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
					string adhs_s = adhs.ToString();
					adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
					double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
					string adhms_s = adhms.ToString();
					adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
					s_dt = s_dt.AddYears(ady);
					s_dt = s_dt.AddMonths(adm1);
					s_dt = s_dt.AddDays(adys);
					s_dt = s_dt.AddHours(adhs);
					s_dt = s_dt.AddMinutes(adhms);
					//var b_dt = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
					pdays = (s_dt - p_dt).TotalDays;
					diffdys += (s_dt - p_dt).TotalDays;
					p_dt = p_dt.AddYears(ady);
					p_dt = p_dt.AddMonths(adm1);
					p_dt = p_dt.AddDays(adys);
					p_dt = p_dt.AddHours(adhs);
					p_dt = p_dt.AddMinutes(adhms);
					v_iter++;
					if (diffdys <= remdays)
					{
						var m = e_dt.Month.ToString();
						var dd = e_dt.Day.ToString();
						var y = e_dt.Year.ToString();
						e_dt = e_dt.AddYears(ady);
						e_dt = e_dt.AddMonths(adm1);
						e_dt = e_dt.AddDays(adys);
						e_dt = e_dt.AddHours(adhs);
						e_dt = e_dt.AddMinutes(adhms);
						string pbeg = string.Format("{0}/{1}/{2}", dd, m, y);
						string pend = "";
						if (e_dt <= enddt)
							pend = string.Format("{0}/{1}/{2}", e_dt.Day.ToString(), (e_dt.Month).ToString(), e_dt.Year.ToString());
						else
							pend = string.Format("{0}/{1}/{2}", enddt.Day.ToString(), (enddt.Month).ToString(), enddt.Year.ToString());
						var sty = "pdas";
						if (cur_date >= b_dt && cur_date <= s_dt) sty = "pdasc";
						var pdas = new Dasha
						{
							lord = string.Format("{0}-{1}-{2}", dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(mainlord.ToLower())], sublord, arr[vi]),
							per = string.Format("{0} To {1}", pbeg, pend),
							type = "PDAS",
							style = sty,
							subs = false,
							show = false,
							icon = ""
						};
						//dctVim.Add(string.Format("{0}-{1}-{2}", mainlord, sublord, arr[vi]), pdas);
						dctPrt.Add(string.Format("{0}-{1}-{2}", mainlord, sublord, arr[vi]), pdas);
						vdays += pdays;
					}
					else
					{
						vo = vi;
						brem = false;
						break;
					}
					v_start = 1;
					if (e_dt >= enddt) break;
				}
				if (vi == 8) vi = -1;
				if (v_iter == 9)
				{
					break;
				}
			}
			if (vo != -1)
			{
				dctPrt.Clear();
				for (var vi = vo; vi < 9; vi++)
				{
					var b_dt = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
					double adp = Convert.ToInt32(dashas[mainlord.Substring(0, 2)]) * Convert.ToInt32(dashas[sublord]) * Convert.ToInt32(dashas[arr[vi]]) / (double)(120 * 120);
					string adp_s = adp.ToString();
					int ady = Convert.ToInt32(adp_s.IndexOf('.') > -1 ? adp_s.Split('.')[0] : adp_s);
					double adm = adp_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adp_s.Split('.')[1]) * 12 : 0;
					string adm_s = adm.ToString();
					int adm1 = Convert.ToInt32(adm_s.IndexOf('.') > -1 ? adm_s.Split('.')[0] : adm_s);
					double adys = adm_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adm_s.Split('.')[1]) * m_dy : 0;
					string adys_s = adys.ToString();
					//console.log('adys_s=',adys_s);
					adys = Convert.ToDouble(adys_s.IndexOf('.') > -1 ? adys_s.Split('.')[0] : adys_s);
					double adhs = adys_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adys_s.Split('.')[1]) * 24 : 0;
					string adhs_s = adhs.ToString();
					adhs = Convert.ToDouble(adhs_s.IndexOf('.') > -1 ? adhs_s.Split('.')[0] : adhs_s);
					double adhms = adhs_s.IndexOf('.') > -1 ? Convert.ToDouble("0." + adhs_s.Split('.')[1]) * 60 : 0;
					string adhms_s = adhms.ToString();
					adhms = Convert.ToDouble(adhms_s.IndexOf('.') > -1 ? adhms_s.Split('.')[0] : adhms_s);
					s_dt = s_dt.AddYears(ady);
					s_dt = s_dt.AddMonths(adm1);
					s_dt = s_dt.AddDays(adys);
					s_dt = s_dt.AddHours(adhs);
					s_dt = s_dt.AddMinutes(adhms);
					//var b_dt = new DateTime(s_dt.Year, s_dt.Month, s_dt.Day, s_dt.Hour, s_dt.Minute, s_dt.Second);
					pdays = (s_dt - p_dt).TotalDays;
					diffdys += (s_dt - p_dt).TotalDays;
					p_dt = p_dt.AddYears(ady);
					p_dt = p_dt.AddMonths(adm1);
					p_dt = p_dt.AddDays(adys);
					p_dt = p_dt.AddHours(adhs);
					p_dt = p_dt.AddMinutes(adhms);
					var m = e_dt.Month.ToString();
					var dd = e_dt.Day.ToString();
					var y = e_dt.Year.ToString();
					e_dt = e_dt.AddYears(ady);
					e_dt = e_dt.AddMonths(adm1);
					e_dt = e_dt.AddDays(adys);
					e_dt = e_dt.AddHours(adhs);
					e_dt = e_dt.AddMinutes(adhms);
					string pbeg = string.Format("{0}/{1}/{2}", dd, m, y);
					string pend = "";
					if (e_dt <= enddt)
						pend = string.Format("{0}/{1}/{2}", e_dt.Day.ToString(), (e_dt.Month).ToString(), e_dt.Year.ToString());
					else
						pend = string.Format("{0}/{1}/{2}", enddt.Day.ToString(), (enddt.Month).ToString(), enddt.Year.ToString());
					var sty = "pdas";
					if (cur_date >= b_dt && cur_date <= s_dt) sty = "pdasc";
					var pdas = new Dasha
					{
						lord = string.Format("{0}-{1}-{2}", dctAst[System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(mainlord.ToLower())], sublord, arr[vi]),
						per = string.Format("{0} To {1}", pbeg, pend),
						type = "PDAS",
						style = sty,
						subs = false,
						show = false,
						icon = ""
					};
					//dctVim.Add(string.Format("{0}-{1}-{2}", mainlord, sublord, arr[vi]), pdas);
					dctPrt.Add(string.Format("{0}-{1}-{2}", mainlord, sublord, arr[vi]), pdas);
				}
			}
			return dctPrt;
		}
		[HttpGet("GetDoshas")]
		public async Task<IActionResult> GetDoshas(string dob, string tob, string latlng, string timezone, int dstofset, int ayanid, string lang)
		{
			_logger.LogInformation("GetDoshas");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
				}
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty, dshf = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
				}
				string adct = string.Empty, ydct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
				}
				using (StreamReader rdra = new StreamReader(dshf, Encoding.UTF8))
				{
					ydct = rdra.ReadToEnd();
				}
				Dictionary<string, string> dctAst;
				Dictionary<string, string> dctDshs;
				try
				{
					dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
					dctDshs = JsonConvert.DeserializeObject<Dictionary<string, string>>(ydct);
				}
				catch (JsonException eX)
				{
					var st = new StackTrace(eX, true);
					var frame = st.GetFrame(st.FrameCount - 1);
					var line = frame.GetFileLineNumber();
					dctYogs.Add("eX.Message", string.Format("{0} {1}", eX.Message, line.ToString()));
					return new JsonResult(dctYogs);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, false);
				Dictionary<string, string> plpos = mHoro.planetsPos;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				Dictionary<int, string> dctHou = new Dictionary<int, string>();
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r2 > 0) dctHou[r2] = ras[r1];
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plpos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plpos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								if (pl.Split(' ')[1] != "MEAN_NODE")
								{
									PlanetHouse pHou = new PlanetHouse
									{
										code = pl.Split(' ')[1],
										name = dctPlNames[pl.Split(' ')[1]],
										hno = Convert.ToInt32(ra.Split('|')[3]),
										mhno = -1,
										shno = -1,
										pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
										sign = ra.Split('|')[0],
										signtype = ra.Split('|')[1],
										lordship = lordship,
										houselord = ra.Split('|')[2]
									};
									dctPlHou[pl.Split(' ')[1]] = pHou;
								}
								else
								{
									int rpos = calcHno("ar", ra.Split('|')[0]);
									int kpos = rpos + 6;
									if (kpos > 12) kpos -= 12;
									int rh = Convert.ToInt32(ra.Split('|')[3]);
									int kh = rh + 6;
									if (kh > 12) kh -= 12;
									//int kpos = calcHno(ra.Split('|')[0], ras[kh - 1].Split('|')[0]);
									PlanetHouse pRHou = new PlanetHouse
									{
										code = "Ra",
										name = "Rahu",
										hno = Convert.ToInt32(ra.Split('|')[3]),
										mhno = -1,
										shno = -1,
										pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
										sign = ra.Split('|')[0],
										signtype = ra.Split('|')[1],
										lordship = lordship,
										houselord = ra.Split('|')[2]
									};
									dctPlHou["Ra"] = pRHou;
									PlanetHouse pKHou = new PlanetHouse
									{
										code = "Ke",
										name = "Ketu",
										hno = kh,
										mhno = -1,
										shno = -1,
										pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
										sign = ras[kpos - 1].Split('|')[0],
										signtype = ras[kpos - 1].Split('|')[1],
										lordship = lordship,
										houselord = ras[kpos - 1].Split('|')[2]
									};
									dctPlHou["Ke"] = pKHou;
								}
							}
						}
					}
				}

				Dictionary<string, string> t1 = await calcDosh(mHoro, "KSD", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t2 = await calcDosh(mHoro, "PTD", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t3 = await calcDosh(mHoro, "GRD", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t4 = await calcDosh(mHoro, "BND", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t5 = await calcDosh(mHoro, "PKD", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t6 = await calcDosh(mHoro, "GCD", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t7 = await calcDosh(mHoro, "AND", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t8 = await calcDosh(mHoro, "GND", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t9 = await calcDosh(mHoro, "SND", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t10 = await calcDosh(mHoro, "SPD", dctHou, dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t11 = await calcDosh(mHoro, "KMD", dctHou, dctPlHou, dctDshs, dctAst);
				t1.ToList().ForEach(x => dctYogs.Add(x.Key, x.Value));
				t2.ToList().ForEach(x => dctYogs.Add(x.Key, x.Value));
				t3.ToList().ForEach(x => dctYogs.Add(x.Key, x.Value));
				t4.ToList().ForEach(x => dctYogs.Add(x.Key, x.Value));
				t5.ToList().ForEach(x => dctYogs.Add(x.Key, x.Value));
				t6.ToList().ForEach(x => dctYogs.Add(x.Key, x.Value));
				t7.ToList().ForEach(x => dctYogs.Add(x.Key, x.Value));

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1} Params {2}", eX.Message, line, string.Format("{0},{1},{2},{3}", dob, tob, latlng, timezone));
				dctYogs.Add(line.ToString(), err);
			}
			return new JsonResult(dctYogs);
		}
		public async Task<Dictionary<string, Dosha>> GetDoshasEx(PlParams dParms)
		{
			_logger.LogInformation("GetDoshasEx");
			Dictionary<string, Dosha> dctYogs = new Dictionary<string, Dosha>();
			try
			{
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty, dshf = string.Empty;
				switch (dParms.lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						dshf = string.Format(@"{0}\en-dshs.json", astClient);
						break;
				}
				string adct = string.Empty, ydct = string.Empty, zdct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
				}
				using (StreamReader rdra = new StreamReader(dshf, Encoding.UTF8))
				{
					ydct = rdra.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctDshs = JsonConvert.DeserializeObject<Dictionary<string, string>>(ydct);

				Dictionary<string, string> t1 = await calcDosh(dParms.mHoro, "KSD", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t2 = await calcDosh(dParms.mHoro, "PTD", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t3 = await calcDosh(dParms.mHoro, "GRD", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t4 = await calcDosh(dParms.mHoro, "BND", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t5 = await calcDosh(dParms.mHoro, "PKD", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t6 = await calcDosh(dParms.mHoro, "GCD", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t7 = await calcDosh(dParms.mHoro, "AND", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t8 = await calcDosh(dParms.mHoro, "GND", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t9 = await calcDosh(dParms.mHoro, "SND", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t10 = await calcDosh(dParms.mHoro, "SPD", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				Dictionary<string, string> t11 = await calcDosh(dParms.mHoro, "KMD", dParms.dctHou, dParms.dctPlHou, dctDshs, dctAst);
				if (t1.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\KSD.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t1.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t2.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\PTD.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t2.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t3.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\GRD.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t3.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t4.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\BND.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t4.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t5.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\PKD.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t5.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t6.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\GCD.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t6.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t7.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\AND.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t7.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t8.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\GND.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t8.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t9.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\SND.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t9.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t10.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\SPD.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t10.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}
				if (t11.Count() > 0)
				{
					using (StreamReader rdra = new StreamReader(string.Format(@"{0}\KMD.json", astClient), Encoding.UTF8))
					{
						zdct = rdra.ReadToEnd();
					}
					Dosha dhs = JsonConvert.DeserializeObject<Dosha>(zdct);
					t11.ToList().ForEach(x => {
						Dosha d = new Dosha();
						d.name = dhs.name;
						d.desc = dhs.desc;
						d.horodesc = x.Value;
						d.remedies = dhs.remedies;
						dctYogs.Add(x.Key, d);
					}
					);
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				Dosha dh = new Dosha();
				dh.name = "ERROR";
				dh.desc = err;
				dctYogs.Add("ERROR", dh);
			}
			return dctYogs;
		}
		private async Task<Dictionary<string, string>> calcDosh(Horoscope mHoro, string code, Dictionary<int, string> dctHou, Dictionary<string, PlanetHouse> dctPlHou, Dictionary<string, string> dctDshs, Dictionary<string, string> dctAst)
		{
			try
			{
				return await Task.Run(() =>
				{
					Dictionary<string, string> dctYogs = new Dictionary<string, string>();
					if (code == "KSD")
					{
						int rh = calcHno(dctHou[1].Split('|')[0], dctPlHou["Ra"].sign);
						int kh = calcHno(dctHou[1].Split('|')[0], dctPlHou["Ke"].sign);
						List<int> ksps = new List<int>();
						for (int i = rh; i != kh; i--)
						{
							if (i < 1) i = 12 - i;
							ksps.Add(i);
							if (i == kh) break;
						}
						ksps.Add(kh);
						int nf = 0;
						foreach (var ph in dctPlHou)
						{
							int h = calcHno(dctHou[1].Split('|')[0], ph.Key);
							if (ksps.IndexOf(h) > -1)
							{
								nf++;
							}
						}
						if (nf == 5)
						{
							dctYogs[code] = dctDshs[string.Format("{0}-{1}-{2}", code, rh, kh)];
						}
					}
					else if (code == "PTD")
					{
						//5th lord position
						if (dctPlHou[dctHou[5].Split('|')[2]].hno == 6 || dctPlHou[dctHou[5].Split('|')[2]].hno == 8 || dctPlHou[dctHou[5].Split('|')[2]].hno == 12)
						{
							//5th lord in dustana
							dctYogs[code] = dctDshs[string.Format("{0}-5LD", code)];
						}
						foreach (var pl in dctPlHou)
						{
							if (pl.Key == "Sa" || pl.Key == "Ma" || pl.Key == "Ra" || pl.Key == "Ke")
							{
								if (pl.Value.hno == 5)
								{
									//5th house is occupied by malefics
									dctYogs[code] = dctDshs[string.Format("{0}-5HM", code)];
								}
							}
						}
						if (dctPlHou[dctHou[5].Split('|')[2]].houselord == "Sa" || dctPlHou[dctHou[5].Split('|')[2]].houselord == "Ma")
						{
							//5th lord is in house of malefics
							dctYogs[code] = dctDshs[string.Format("{0}-5LM", code)].Replace("[0]", dctAst[dctHou[5].Split('|')[2]]).Replace("[1]", dctAst[dctPlHou[dctHou[5].Split('|')[2]].sign]).Replace("[2]", dctAst[dctPlHou[dctHou[5].Split('|')[2]].houselord]);
						}
					}
					else if (code == "GRD")
					{
						if (dctPlHou["Su"].hno == dctPlHou["Ra"].hno)
						{
							//purna surya grahan dosh
							dctYogs[code] = dctDshs[string.Format("{0}-PNS", code)];
						}
						else if (dctPlHou["Su"].hno == dctPlHou["Ke"].hno)
						{
							//partial surya grahan dosh
							dctYogs[code] = dctDshs[string.Format("{0}-PRS", code)];
						}
						if (dctPlHou["Mo"].hno == dctPlHou["Ra"].hno)
						{
							//purna chandra grahan dosh
							dctYogs[code] = dctDshs[string.Format("{0}-PNC", code)];
						}
						else if (dctPlHou["Mo"].hno == dctPlHou["Ke"].hno)
						{
							//purna chandra grahan dosh
							dctYogs[code] = dctDshs[string.Format("{0}-PRC", code)];
						}
					}
					else if (code == "BND")
					{
						if (Math.Abs(dctPlHou["Sa"].hno - dctPlHou["Ma"].hno) == 7)
						{
							//saturn & mars aspect each other
							dctYogs[code] = dctDshs[string.Format("{0}-SMA", code)];
						}
						bool m2 = false, m5 = false, m9 = false, m12 = false;
						int p2 = 0, p3 = 0, p4 = 0, p12 = 0, p5 = 0, p9 = 0, p10 = 0, p6 = 0, p11 = 0;
						string mfcs = string.Empty;
						foreach (var pl in dctPlHou)
						{
							if (pl.Key == "Sa" || pl.Key == "Ma" || pl.Key == "Ra" || pl.Key == "Ke")
							{
								if (pl.Value.hno == 2)
								{
									m2 = true;
									mfcs += pl.Key + ",";
								}
								else if (pl.Value.hno == 12)
								{
									m12 = true;
									mfcs += pl.Key + ",";
								}
								else if (pl.Value.hno == 5)
								{
									m5 = true;
									mfcs += pl.Key + ",";
								}
								else if (pl.Value.hno == 9)
								{
									m9 = true;
									mfcs += pl.Key + ",";
								}
							}
							switch (pl.Value.hno)
							{
								case 2:
									p2++;
									break;
								case 3:
									p3++;
									break;
								case 4:
									p4++;
									break;
								case 5:
									p5++;
									break;
								case 6:
									p6++;
									break;
								case 9:
									p9++;
									break;
								case 10:
									p10++;
									break;
								case 11:
									p11++;
									break;
								case 12:
									p12++;
									break;
								default:
									break;
							}
						}
						if (m2 && m5 && m9 && m12)
						{
							//malefics placed in 2nd, 5th, 9th & 12th house
							dctYogs[code] = dctDshs[string.Format("{0}-M25912", code)].Replace("[0]", mfcs);
						}
						else if (m2 && m12)
						{
							//malefics placed in 2nd and 12th house
							dctYogs[code] = dctDshs[string.Format("{0}-M212", code)].Replace("[0]", mfcs);
						}
						if (dctPlHou["Sa"].hno == 2 && dctPlHou[dctHou[1].Split('|')[2]].hno == 1)
						{
							foreach (var pl in dctPlHou)
							{
								if (pl.Key != "Sa" || pl.Key != dctHou[1].Split('|')[2])
								{
									if (pl.Value.hno == 12)
									{
										//a planet in 12, saturn in 2, lagna lord in 1
										dctYogs[code] = dctDshs[string.Format("{0}-SAL", code)].Replace("[0]", dctPlHou[pl.Key].name);
									}
								}
							}
						}
						if (dctPlHou["Sa"].hno == 1 && dctPlHou["Mo"].hno == 10)
						{
							if (Math.Abs(dctPlHou["Mo"].hno - dctPlHou["Ve"].hno) == 7)
							{
								//Sa in 1, Mo in 10 aspected by Ve 
								dctYogs[code] = dctDshs[string.Format("{0}-SMV", code)];
							}
						}
						if (p2 != 0 && (p2 == p12))
						{
							dctYogs[code] = dctDshs[string.Format("{0}-EQ", code)].Replace("[0]", "2").Replace("[1]", "12");
						}
						if (p5 != 0 && (p5 == p9))
						{
							dctYogs[code] = dctDshs[string.Format("{0}-EQ", code)].Replace("[0]", "5").Replace("[1]", "9");
						}
						if (p6 != 0 && (p6 == p12))
						{
							dctYogs[code] = dctDshs[string.Format("{0}-EQ", code)].Replace("[0]", "6").Replace("[1]", "12");
						}
						if (p3 != 0 && (p3 == p11))
						{
							dctYogs[code] = dctDshs[string.Format("{0}-EQ", code)].Replace("[0]", "3").Replace("[1]", "11");
						}
						if (p4 != 0 && (p4 == p10))
						{
							dctYogs[code] = dctDshs[string.Format("{0}-EQ", code)].Replace("[0]", "4").Replace("[1]", "10");
						}
					}
					else if (code == "PKD")
					{
						string shm = string.Empty;
						if (Math.Abs(dctPlHou["Sa"].hno - dctPlHou["Ma"].hno) == 2)
						{
							shm = GetHemd(mHoro, dctPlHou["Sa"].hno, dctPlHou["Ma"].hno, "Sa", "Ma", dctPlHou, dctHou, dctDshs, dctAst);
						}
						if (Math.Abs(dctPlHou["Sa"].hno - dctPlHou["Ra"].hno) == 2)
						{
							shm += GetHemd(mHoro, dctPlHou["Sa"].hno, dctPlHou["Ra"].hno, "Sa", "Ra", dctPlHou, dctHou, dctDshs, dctAst);
						}
						if (Math.Abs(dctPlHou["Sa"].hno - dctPlHou["Ke"].hno) == 2)
						{
							shm += GetHemd(mHoro, dctPlHou["Sa"].hno, dctPlHou["Ke"].hno, "Sa", "Ke", dctPlHou, dctHou, dctDshs, dctAst);
						}
						if (Math.Abs(dctPlHou["Ma"].hno - dctPlHou["Ra"].hno) == 2)
						{
							shm += GetHemd(mHoro, dctPlHou["Ma"].hno, dctPlHou["Ra"].hno, "Ma", "Ra", dctPlHou, dctHou, dctDshs, dctAst);
						}
						if (Math.Abs(dctPlHou["Ma"].hno - dctPlHou["Ke"].hno) == 2)
						{
							shm += GetHemd(mHoro, dctPlHou["Ma"].hno, dctPlHou["Ke"].hno, "Ma", "Ke", dctPlHou, dctHou, dctDshs, dctAst);
						}
						if (shm != string.Empty)
							dctYogs[code] = shm;
					}
					else if (code == "GCD")
					{
						if (dctPlHou["Ju"].hno == dctPlHou["Ra"].hno)
						{
							//guru chandal dosh ju & ra in same house
							dctYogs[code] = dctDshs["GCD"].Replace("[0]", dctAst["Ra"]);
						}
						if (dctPlHou["Ju"].hno == dctPlHou["Ke"].hno)
						{
							if (dctPlHou["Ju"].hno != 1 && dctPlHou["Ju"].hno != 4 && dctPlHou["Ju"].hno != 5 && dctPlHou["Ju"].hno != 7 && dctPlHou["Ju"].hno != 9 && dctPlHou["Ju"].hno != 10)
								//guru chandal dosh ju & ke in same house
								dctYogs[code] = dctDshs["GCD"].Replace("[0]", dctAst["Ke"]);
						}
					}
					else if (code == "AND")
					{
						if (dctPlHou["Ma"].hno == dctPlHou["Ra"].hno)
						{
							//Ma, Ra in same house causes angarak dosh
							dctYogs[code] = dctDshs["AND"];
						}
					}
					else if (code == "GMD")
					{
						BirthStar bS = calcBirthStar(dctPlHou["Mo"].pos, dctPlHou["Mo"].sign);
						if (bS.birthStar == "ashwini" || bS.birthStar == "ashlesha" || bS.birthStar == "magha" || bS.birthStar == "jyeshtha" || bS.birthStar == "moola" || bS.birthStar == "revati")
						{
							//gandmool dosh
							dctYogs[code] = dctDshs["GMD"].Replace("[0]", bS.birthStar);
						}
					}
					else if (code == "SND")
					{
						PlanetStrength pS = checkStrength(dctPlHou["Sa"]);
						if (pS == PlanetStrength.DEBILIATED)
						{
							//saturn is debilitated causes shani dosh
							dctYogs[code] = dctDshs[code];
						}
						if (dctPlHou["Sa"].hno == dctPlHou["Ma"].hno)
						{
							//saturn conjunct with mars causes shani dosh
							dctYogs[code] = dctDshs[code + "-CMA"].Replace("[0]", dctAst["Ma"]);
						}
						if (dctPlHou["Sa"].hno == dctPlHou["Ra"].hno)
						{
							//saturn conjunct with rahu causes shani dosh
							dctYogs[code] = dctDshs[code + "-CRA"].Replace("[0]", dctAst["Ra"]);
						}
						if (dctPlHou["Sa"].hno == dctPlHou["Mo"].hno)
						{
							//saturn conjunct with moon causes shani dosh
							dctYogs[code] = dctDshs[code + "-CMO"].Replace("[0]", dctAst["Mo"]);
						}
					}
					else if (code == "SPD")
					{
						if (dctPlHou["Sa"].hno == dctPlHou["Ra"].hno)
						{
							//saturn conjunct with rahu causes shani dosh
							dctYogs[code] = dctDshs[code];
						}
					}
					else if (code == "KMD")
					{
						bool can = false;
						PlanetStrength pS = checkStrength(dctPlHou["Mo"]);
						if (dctPlHou["Mo"].hno == 1 || dctPlHou["Mo"].hno == 4 || dctPlHou["Mo"].hno == 5 || dctPlHou["Mo"].hno == 9 || dctPlHou["Mo"].hno == 10) can = true;
						if (pS == PlanetStrength.EXALTED && dctPlHou["Mo"].hno == 10) can = true;
						if (dctPlHou["Mo"].houselord == "Ju" || dctPlHou["Mo"].houselord == "Me" || dctPlHou["Mo"].houselord == "Ve") can = true;
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN)
						{
							can = true;
							//cancelled ?
						}
						if (!can)
						{
							int h1 = dctPlHou["Mo"].hno - 1;
							if (h1 < 1) h1 = 12 - h1;
							int h2 = dctPlHou["Mo"].hno + 1;
							if (h2 > 12) h2 = h2 - 12;
							int k = 0;
							foreach (var pl in dctPlHou)
							{
								if (pl.Value.sign == dctHou[h1].Split('|')[0])
								{
									if (pl.Key != "Ra" && pl.Key != "Ke")
									{
										k++;
									}
								}
								else if (pl.Value.sign == dctHou[h2].Split('|')[0])
								{
									if (pl.Key != "Ra" && pl.Key != "Ke")
									{
										k++;
									}
								}
							}
							if (k == 0)
							{
								dctYogs[code] = dctDshs[code];
							}
						}
					}
					return dctYogs;
				});
			}
			catch (Exception eX)
			{
				Dictionary<string, string> dctYogs = new Dictionary<string, string>();
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				dctYogs.Add(line.ToString(), err);
				return dctYogs;
			}
		}
		string GetHemd(Horoscope mHoro, int h1, int h2, string l1, string l2, Dictionary<string, PlanetHouse> dctPlHou, Dictionary<int, string> dctHou, Dictionary<string, string> dctDshs, Dictionary<string, string> dctAst)
		{
			string shm = string.Empty;
			int hm = (h1 + 1) > 12 ? (h1 + 1) - 12 : h1 + 1;
			if (hm + 1 != h2)
			{
				hm = (h1 - 1) < 1 ? 12 + (h1 - 1) : h1 - 1;
			}
			shm = dctDshs[string.Format("PKD-HMH")].Replace("[0]", hm.ToString()).Replace("[1]", dctAst[l1]).Replace("[2]", dctAst[l2]);
			string shp = string.Empty;
			foreach (var pl in dctPlHou)
			{
				if (pl.Value.hno == hm)
				{
					shp += pl.Key + ",";
					//hemmed planet
					shm += dctDshs[string.Format("PKD-HMP")].Replace("[0]", dctAst[pl.Key]).Replace("[1]", dctAst[l1]).Replace("[2]", dctAst[l2]); ;
				}
			}
			Horo horo = new Horo();
			horo.planetPos = mHoro.planetsPos;
			JsonResult jO = (JsonResult)GetAspects(horo, dctHou[hm].Split('|')[0]);
			Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
			string ben = string.Empty;
			foreach (var asp in dctAsp)
			{
				foreach (var lrd in asp.Value.Split('|'))
				{
					if (lrd == "Ju" || lrd == "Me" || lrd == "Ve" || lrd == "Mo")
					{
						if (!shp.Contains(lrd))
							ben += dctAst[lrd] + ",";
					}
				}
			}
			if (ben != string.Empty)
			{
				shm += dctDshs["PKD-BEN"].Replace("[0]", ben);
			}
			return shm;
		}
		[HttpGet("DailyHoros")]
		public async Task<List<Prediction>> DailyHoros()
		{
			_logger.LogInformation("DailyHoros");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Prediction>("Prediction"); });
				return await dbPlan.Find(_ => true).ToListAsync();
			}
			catch (Exception eX)
			{
				var plan = new Prediction
				{
					zod = "",
					desc = eX.Message
				};
				List<Prediction> lst = new List<Prediction>();
				lst.Add(plan);
				return lst;
			}
		}
		[HttpGet("DailyHoroscope")]
		public async Task<IActionResult> DailyHoroscope(string sign)
		{
			_logger.LogInformation(string.Format("DailyHoroscope({0})", sign));
			string res = await ReadDH(sign);
			return new JsonResult(res);
		}
		private async Task<string> ReadDH(string sign)
		{
			//string liStr = string.Empty;
			//var posts = Enumerable.Empty<Post>();
			//posts = new RSSFeedReader().ReadFeed(@"http://feeds.feedburner.com/dayhoroscope?format=xml");
			//string result = "Daily Predictions";
			if (sign.ToLower() == "saggitarius") sign = "Sagittarius";
			Console.WriteLine("Getting DB...");
			var db = client.GetDatabase("myypub");
			var dho = db.GetCollection<Prediction>("Prediction");
			var filter = Builders<Prediction>.Filter.Eq("zod", sign);
			var drec = dho.FindAsync(filter);
			Prediction pred = drec.Result.FirstOrDefault();
			if (pred != null)
				return pred.desc;
			return string.Empty;

			//foreach (var post in posts.ToList())
			//{
			//	if (post.Title.Split(' ')[0].ToLower() == sign.ToLower())
			//	{
			//		result = post.Description.Replace("AstroSage.com,", "").Split('\n')[1];
			//		break;
			//	}
			//}
			//return result;
		}
		[HttpGet("SubscribeAstroUser")]
		public IActionResult SubscribeAstroUser(string token, string sign, string deg)
		{
			try
			{
				_logger.LogInformation("SubscribeAstroUser");
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var astUsers = db.GetCollection<AstroUser>("AstroUser");
				var filter = Builders<AstroUser>.Filter.Eq("devicetoken", token);
				var update = Builders<AstroUser>.Update.Set("moonsign", sign);
				update = update.Set("moondeg", deg);
				try
				{
					long cnt = astUsers.CountDocuments(filter);
					if (cnt > 0L)
					{
						astUsers.FindOneAndUpdate(filter, update);
					}
					else
					{
						var astUser = new AstroUser
						{
							devicetoken = token,
							moonsign = sign,
							moondeg = float.Parse(deg)
						};
						astUsers.InsertOneAsync(astUser);
					}
				}
				catch
				{
					var astUser = new AstroUser
					{
						devicetoken = token,
						moonsign = sign,
						moondeg = float.Parse(deg)
					};
					astUsers.InsertOneAsync(astUser);
				}
				return new JsonResult("success");
			}
			catch (Exception eX)
			{
				return new JsonResult(eX.Message);
			}
		}
		[HttpPost("LogCall")]
		public async Task<CallInfo> LogCall([FromBody] CallInfo cinf)
		{
			try
			{
				_logger.LogInformation("TalkToAstro");
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var infc = db.GetCollection<CallInfo>("CallInfo");
				Guid guid = Guid.NewGuid();
				cinf.cid = guid.ToString();
				await infc.InsertOneAsync(cinf);
				return cinf;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				cinf.name = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				return cinf;
			}
		}
		[HttpGet("GetCallInfo")]
		public async Task<List<CallInfo>> GetCallInfo(string uid)
		{
			_logger.LogInformation("GetCallInfo");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<CallInfo>("CallInfo"); });
					var filter = Builders<CallInfo>.Filter.Eq("uid", uid);
					try
					{
						long cnt = dbAst.CountDocuments(filter);
						if (cnt > 0L)
						{
							var qAstUser =
									(from e in dbAst.AsQueryable<CallInfo>()
									 where e.uid == uid
									 select e).ToList();
							return qAstUser;
						}
						else
						{
							List<CallInfo> lst = new List<CallInfo>();
							var ast = new CallInfo
							{
								name = "X"
							};
							lst.Add(ast);
							return lst;
						}
					}
					catch (Exception eX)
					{
						List<CallInfo> lst = new List<CallInfo>();
						var ast = new CallInfo
						{
							name = eX.Message
						};
						lst.Add(ast);
						return lst;
					}
				}
				catch (Exception eX)
				{
					List<CallInfo> lst = new List<CallInfo>();
					var ast = new CallInfo
					{
						name = eX.Message
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new CallInfo
				{
					name = eX.Message
				};
				List<CallInfo> lst = new List<CallInfo>();
				lst.Add(ast);
				return lst;
			}
		}
		[HttpGet("TalkToAstro")]
		public async Task<ActionResult> TalkToAstro(string uid, string uuid, string aid)
		{
			try
			{
				_logger.LogInformation("TalkToAstro");
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var infc = db.GetCollection<AstroTalk>("AstroTalk");
				var inf = new AstroTalk
				{
					uuid = uuid,
					uid = uid,
					aid = aid,
					date = DateTime.Now.ToShortDateString()
				};
				await infc.InsertOneAsync(inf);
				return new JsonResult("success");
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}

		[HttpGet("BirthchartPro")]
		public async Task<IActionResult> BirthchartPro(string dob, string tob, string latlng, string timezone, double tzofset, string name, string eml, int ayanid)
		{
			try
			{
				_logger.LogInformation("BirthchartPro");
				string plst = string.Empty;
				string tz = TZConvert.IanaToWindows(timezone);
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return mHoro;
				});
				// checkYogs(mHoro);
				//return PartialView("Birthchart", mHoro);
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				Horo horo = new Horo();
				for (int i = 0; i < zod_nam.Count(); i++)
				{
					if (mHoro.planetsPos.ContainsKey(zod_nam[i]))
					{
						var ppos = mHoro.planetsPos[zod_nam[i]];
						foreach (var pl in ppos.Split('|'))
						{
							string[] pld = pl.Split(' ')[0].Split('.');
							if (dctPls.ContainsKey(zod_nam[i]))
							{
								dctPls[zod_nam[i]] = string.Format("{0}|{1}.{2} {3}", dctPls[zod_nam[i]], pld[0], pld[1], pl.Split(' ')[1]);
							}
							else
							{
								dctPls[zod_nam[i]] = string.Format("{0}.{1} {2}", pld[0], pld[1], pl.Split(' ')[1]);
							}
							string code = pl.Split(' ')[1];
							if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "AC" && code != "TRUE_NODE")
							{  //consider only true planets
								PlanetHouse pHou = new PlanetHouse
								{
									code = code,
									name = "",
									hno = 0,
									mhno = 0,
									shno = 0,
									pos = 0,
									sign = zod_nam[i],
									signtype = "",
									lordship = "",
									houselord = ""
								};
								string desc = descStrength(pHou);
								if (desc.Trim() != string.Empty)
									horo.plStren += string.Format("{0},", desc);
							}

						}
					}
				}
				horo.planetPos = dctPls;
				horo.retroPls = mHoro.retroPls;
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1} Params {2}", eX.Message, line, string.Format("{0},{1},{2},{3},{4},{5}", dob, tob, latlng, timezone, name, eml)));
			}
		}
		[HttpGet("BirthchartEx3")]
		public async Task<IActionResult> BirthchartEx3(string dob, string tob, string latlng, string timezone, int dstofset, string name, string eml, int ayanid)
		{
			try
			{
				_logger.LogInformation("BirthchartEx3");
				string plst = string.Empty;
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, false);
				Horo horo = await getVHoro(mHoro, false);
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1} Params {2}", eX.Message, line, string.Format("{0},{1},{2},{3},{4},{5}", dob, tob, latlng, timezone, name, eml)));
			}
		}
		[HttpGet("BirthchartEx4")]
		public async Task<IActionResult> BirthchartEx4([FromBody] ChartSettings chartSettings)
		{
			try
			{
				_logger.LogInformation("BirthchartEx4");
				string plst = string.Empty;
				string tz = TZConvert.IanaToWindows(chartSettings.timezone);
				int d = Convert.ToInt32(chartSettings.dob.Split('T')[0].Split('-')[2]);
				int m = Convert.ToInt32(chartSettings.dob.Split('T')[0].Split('-')[1]);
				int y = Convert.ToInt32(chartSettings.dob.Split('T')[0].Split('|')[0]);
				int hou = Convert.ToInt32(chartSettings.dob.Split('T')[1].Split(':')[0]);
				int min = Convert.ToInt32(chartSettings.dob.Split('T')[1].Split(':')[1]);
				int sec = Convert.ToInt32(chartSettings.dob.Split('T')[1].Split(':')[2]);
				string ayan = string.Empty;
				if (((AYANMSAS)chartSettings.ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)chartSettings.ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)chartSettings.ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, chartSettings.lat, chartSettings.lng, tz, chartSettings.dstofset, ayan, chartSettings.ayanid, false);
				Horo horo = await getVHoro(mHoro, chartSettings.use_truenode);
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("BirthchartEx2")]
		public async Task<IActionResult> BirthchartEx2(string dob, string tob, string latlng, string timezone, double tzofset, string name, string eml, int ayanid)
		{
			try
			{
				_logger.LogInformation("BirthchartEx2");
				string plst = string.Empty;
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, 0, ayan, ayanid, false);
				Horo horo = await getVHoro(mHoro, false);
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1} Params {2}", eX.Message, line, string.Format("{0},{1},{2},{3},{4},{5}", dob, tob, latlng, timezone, name, eml)));
			}
		}
		[HttpGet("Birthchart")]
		public ActionResult Birthchart(string dob, string tob, string latlng, string timezone, string name, string eml)
		{
			try
			{
				_logger.LogInformation("Birthchart");
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, tz, false, string.Empty);
				mHoro.calc_planets_pos(false, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
				// checkYogs(mHoro);
				//return PartialView("Birthchart", mHoro);
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				for (int i = 0; i < zod_nam.Count(); i++)
				{
					if (mHoro.planetsPos.ContainsKey(zod_nam[i]))
					{
						var ppos = mHoro.planetsPos[zod_nam[i]];
						foreach (var pl in ppos.Split('|'))
						{
							string[] pld = pl.Split(' ')[0].Split('.');
							if (dctPls.ContainsKey(zod_nam[i]))
							{
								dctPls[zod_nam[i]] = string.Format("{0}|{1}.{2} {3}", dctPls[zod_nam[i]], pld[0], pld[1], pl.Split(' ')[1]);
							}
							else
							{
								dctPls[zod_nam[i]] = string.Format("{0}.{1} {2}", pld[0], pld[1], pl.Split(' ')[1]);
							}

						}
					}
				}
				mHoro.planetsPos = dctPls;
				return new JsonResult(mHoro.planetsPos);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1} Params {2}", eX.Message, line, string.Format("{0},{1},{2},{3},{4},{5}", dob, tob, latlng, timezone, name, eml)));
			}
		}

		[HttpGet("Birthstars")]
		public ActionResult Birthstars(string dob, string tob)
		{
			try
			{
				_logger.LogInformation(string.Format("Birthstars-{0}", dob));
				string bsn = string.Empty;
				string pbsn = string.Empty;
				string latlng = "17.23|78.29";
				string timezone = "India Standard Time";
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('-')[0].Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('-')[0].Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('-')[0].Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('-')[0].Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('-')[0].Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('-')[0].Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, timezone, false, string.Empty);
				mHoro.calc_planets_pos(false, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
				Horoscope wHoro = new Horoscope();
				uint w1 = Convert.ToUInt32(dob.Split('-')[1].Split('|')[0]);
				uint w2 = Convert.ToUInt32(dob.Split('-')[1].Split('|')[1]);
				int w3 = Convert.ToInt32(dob.Split('-')[1].Split('|')[2]);
				uint w4 = Convert.ToUInt32(tob.Split('-')[1].Split('|')[0]);
				uint w5 = Convert.ToUInt32(tob.Split('-')[1].Split('|')[1]);
				uint w6 = Convert.ToUInt32(tob.Split('-')[1].Split('|')[2]);
				double w7 = Convert.ToDouble(latlng.Split('|')[0]);
				double w8 = Convert.ToDouble(latlng.Split('|')[1]);
				wHoro.init_data(w1, w2, w3, w4, w5, w6, w7, w8, timezone, false, string.Empty);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				wHoro.calc_planets_pos(false, astClient);
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				BirthStar bStar = new BirthStar();
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					bool bmon = false;
					bool bwmon = false;
					foreach (var sign in signs)
					{
						if (!bmon && mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							float moonDeg = 0;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bStar.birthSignDeg = string.Format("{0}.{1}", pl.Split(' ')[0].Split('.')[0], pl.Split(' ')[0].Split('.')[1]);
										bmon = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bStar.birthSignDeg = string.Format("{0}.{1}", pls.Split(' ')[0].Split('.')[0], pls.Split(' ')[0].Split('.')[1]);
								bmon = true;
							}
							if (bmon)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								string nO = string.Format(@"{0}\nakshatra_o.json", astClient);
								using (StreamReader r5 = new StreamReader(nO))
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json5 = r5.ReadToEnd();
									string json4 = r4.ReadToEnd();
									dynamic nak_o = JsonConvert.DeserializeObject(json5);
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
									string nJ = string.Format(@"{0}\nakshatras.json", astClient);
									using (StreamReader r2 = new StreamReader(nJ))
									{
										string json2 = r2.ReadToEnd();
										List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
										foreach (var nak in nakshatras)
										{
											string[] snak = nak.location.start.Split(',')[0].Split('.');
											double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
											string[] enak = nak.location.end.Split(',')[0].Split('.');
											double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
											if (nak.location.start.Split(',')[1] == sign.ToString() && nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1 && moonDeg <= nakd2)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													bsn = sign.ToString();
													break;
												}
											}
											else if (nak.location.start.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													bsn = sign.ToString();
													break;
												}
											}
											else if (nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg <= nakd2)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													bsn = sign.ToString();
													break;
												}
											}
										}
									}
								}
							}
						}
						if (!bwmon && wHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							float moonDeg = 0;
							string pls = wHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bStar.partnerBirthSignDeg = string.Format("{0}.{1}", pl.Split(' ')[0].Split('.')[0], pl.Split(' ')[0].Split('.')[1]);
										bwmon = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bStar.partnerBirthSignDeg = string.Format("{0}.{1}", pls.Split(' ')[0].Split('.')[0], pls.Split(' ')[0].Split('.')[1]);
								bwmon = true;
							}
							if (bwmon)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								string nO = string.Format(@"{0}\nakshatra_o.json", astClient);
								using (StreamReader r5 = new StreamReader(nO))
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json5 = r5.ReadToEnd();
									string json4 = r4.ReadToEnd();
									dynamic nak_o = JsonConvert.DeserializeObject(json5);
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
									string nJ = string.Format(@"{0}\nakshatras.json", astClient);
									using (StreamReader r2 = new StreamReader(nJ))
									{
										string json2 = r2.ReadToEnd();
										List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
										foreach (var nak in nakshatras)
										{
											string[] snak = nak.location.start.Split(',')[0].Split('.');
											double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
											string[] enak = nak.location.end.Split(',')[0].Split('.');
											double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
											if (nak.location.start.Split(',')[1] == sign.ToString() && nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1 && moonDeg <= nakd2)
												{
													bStar.partnerBirthStar = nak.name;
													bStar.partnerBirthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													pbsn = sign.ToString();
													break;
												}
											}
											else if (nak.location.start.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1)
												{
													bStar.partnerBirthStar = nak.name;
													bStar.partnerBirthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													pbsn = sign.ToString();
													break;
												}
											}
											else if (nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg <= nakd2)
												{
													bStar.partnerBirthStar = nak.name;
													bStar.partnerBirthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													pbsn = sign.ToString();
													break;
												}
											}

										}
									}
								}
							}
						}
						if (bmon && bwmon) break;
					}
				}
				bStar.manglik = "0";
				foreach (var pl in mHoro.planetsPos)
				{
					if (pl.Value.Contains("Ma"))
					{
						int hno = calcHno(bsn, pl.Key);
						if (hno == 1 || hno == 2 || hno == 4 || hno == 7 || hno == 12)
						{
							bStar.manglik = string.Format("1|{0}", hno);
						}
					}
				}
				bStar.partnerManglik = "0";
				foreach (var pl in wHoro.planetsPos)
				{
					if (pl.Value.Contains("Ma"))
					{
						int hno = calcHno(pbsn, pl.Key);
						if (hno == 1 || hno == 2 || hno == 4 || hno == 7 || hno == 12)
						{
							bStar.partnerManglik = string.Format("1|{0}", hno);
						}
					}
				}
				return new JsonResult(bStar);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("BirthstarsEx")]
		public async Task<ActionResult> BirthstarsEx(string dob, string tob, string latlng, string timezone, int ayanid)
		{
			try
			{
				_logger.LogInformation(string.Format("BirthstarsEx-{0}", dob));
				string tz1 = TZConvert.IanaToWindows(timezone.Split('|')[0]);
				string tz2 = TZConvert.IanaToWindows(timezone.Split('|')[1]);
				string bsn = string.Empty;
				string pbsn = string.Empty;
				uint u1 = Convert.ToUInt32(dob.Split('-')[0].Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('-')[0].Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('-')[0].Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('-')[0].Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('-')[0].Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('-')[0].Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('L')[0].Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('L')[0].Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz1);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz1, ayan, (uint)ayanid);
					mHoro.calc_planets_pos(false, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return mHoro;
				});
				//mHoro.(u1, u2, i3, u4, u5, u6, u7, u8, timezone.Split('|')[0], false, string.Empty);
				//mHoro.calc_planets_pos(false, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
				uint w1 = Convert.ToUInt32(dob.Split('-')[1].Split('|')[0]);
				uint w2 = Convert.ToUInt32(dob.Split('-')[1].Split('|')[1]);
				int w3 = Convert.ToInt32(dob.Split('-')[1].Split('|')[2]);
				uint w4 = Convert.ToUInt32(tob.Split('-')[1].Split('|')[0]);
				uint w5 = Convert.ToUInt32(tob.Split('-')[1].Split('|')[1]);
				uint w6 = Convert.ToUInt32(tob.Split('-')[1].Split('|')[2]);
				double w7 = Convert.ToDouble(latlng.Split('L')[1].Split('|')[0]);
				double w8 = Convert.ToDouble(latlng.Split('L')[1].Split('|')[1]);
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz2);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)w1, (int)w2, w3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope wHoro = await Task.Run(() =>
				{
					Horoscope wHoro = new Horoscope();
					wHoro.init_data_ex2(w1, w2, w3, w4, w5, w6, w7, w8, tz2, ayan, (uint)ayanid);
					wHoro.calc_planets_pos(false, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return wHoro;
				});
				//wHoro.init_data(w1, w2, w3, w4, w5, w6, w7, w8, timezone.Split('|')[1], false, string.Empty);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				//wHoro.calc_planets_pos(false, astClient);
				//string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				BirthStar bStar = new BirthStar();
				string rJ = string.Format(@"{0}\o_rashis.json", astClient);
				//using (StreamReader r = new StreamReader(sF))
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
					//string json = r.ReadToEnd();
					//dynamic signs = JsonConvert.DeserializeObject(json);
					string json4 = r4.ReadToEnd();
					dynamic rashis = JsonConvert.DeserializeObject(json4);
					bool bmon = false;
					bool bwmon = false;
					int rpos = 0;
					int wrpos = 0;
					bool brah = false;
					bool bwrah = false;
					foreach (var sign in signs)
					{
						rpos++;
						wrpos++;
						if (mHoro.planetsPos.ContainsKey(sign))
						{
							float moonDeg = 0;
							string pls = mHoro.planetsPos[sign].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo" && !bmon)
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.birthSignDeg = string.Format("{0}.{1}", pl.Split(' ')[0].Split('.')[0], pl.Split(' ')[0].Split('.')[1]);
										bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
										bsn = sign.ToString();
										string s = calcStar(moonDeg, bsn);
										bStar.birthStar = s.Split('|')[0];
										bStar.pada = Convert.ToInt32(s.Split('|')[1]);
										bmon = true;
										break;
									}
									else if (pl.Split(' ')[1] == "MEAN_NODE" && !brah)
									{
										var kpos = rpos + 6;
										if (kpos > 12) kpos = (kpos - 12);
										//var mn = i + 11;
										//if (mn > 15) mn -= 15;
										if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
										{
											var eP = mHoro.planetsPos[signs[kpos - 1]];
											mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pl.Split(' ')[0] + ' ' + "Ke";
										}
										else
										{
											mHoro.planetsPos[signs[kpos - 1]] = pl.Split(' ')[0] + ' ' + "Ke";
										}
										// plPos[sign] = ePls;
										mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
										brah = true;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo" && !bmon)
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.birthSignDeg = string.Format("{0}.{1}", pls.Split(' ')[0].Split('.')[0], pls.Split(' ')[0].Split('.')[1]);
								bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								bsn = sign;
								string s = calcStar(moonDeg, bsn);
								bStar.birthStar = s.Split('|')[0];
								bStar.pada = Convert.ToInt32(s.Split('|')[1]);
								bmon = true;
							}
							else if (pls.Split(' ')[1] == "MEAN_NODE" && !brah)
							{
								var kpos = rpos + 6;
								if (kpos > 12) kpos = (kpos - 12);
								//var mn = i + 11;
								//if (mn > 15) mn -= 15;
								if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
								{
									var eP = mHoro.planetsPos[signs[kpos - 1]];
									mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls.Split(' ')[0] + ' ' + "Ke";
								}
								else
								{
									mHoro.planetsPos[signs[kpos - 1]] = pls.Split(' ')[0] + ' ' + "Ke";
								}
								// plPos[sign] = ePls;
								mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								brah = true;
							}
						}
						if (wHoro.planetsPos.ContainsKey(sign))
						{
							float moonDeg = 0;
							string pls = wHoro.planetsPos[sign];
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo" && !bwmon)
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.partnerBirthSignDeg = string.Format("{0}.{1}", pl.Split(' ')[0].Split('.')[0], pl.Split(' ')[0].Split('.')[1]);
										bStar.partnerBirthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
										pbsn = sign.ToString();
										string s = calcStar(moonDeg, pbsn);
										bStar.partnerBirthStar = s.Split('|')[0];
										bStar.partnerPada = Convert.ToInt32(s.Split('|')[1]);
										bwmon = true;
										break;
									}
									else if (pl.Split(' ')[1] == "MEAN_NODE" && !bwrah)
									{
										var kpos = wrpos + 6;
										if (kpos > 12) kpos = (kpos - 12);
										//var mn = i + 11;
										//if (mn > 15) mn -= 15;
										if (wHoro.planetsPos.ContainsKey(signs[kpos - 1]))
										{
											var eP = mHoro.planetsPos[signs[kpos - 1]];
											wHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pl.Split(' ')[0] + ' ' + "Ke";
										}
										else
										{
											wHoro.planetsPos[signs[kpos - 1]] = pl.Split(' ')[0] + ' ' + "Ke";
										}
										// plPos[sign] = ePls;
										wHoro.planetsPos[sign] = wHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
										bwrah = true;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo" && !bwmon)
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.partnerBirthSignDeg = string.Format("{0}.{1}", pls.Split(' ')[0].Split('.')[0], pls.Split(' ')[0].Split('.')[1]);
								bStar.partnerBirthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								pbsn = sign.ToString();
								string s = calcStar(moonDeg, pbsn);
								bStar.partnerBirthStar = s.Split('|')[0];
								bStar.partnerPada = Convert.ToInt32(s.Split('|')[1]);
								bwmon = true;
							}
							else if (pls.Split(' ')[1] == "MEAN_NODE" && !bwrah)
							{
								var kpos = wrpos + 6;
								if (kpos > 12) kpos = (kpos - 12);
								//var mn = i + 11;
								//if (mn > 15) mn -= 15;
								if (wHoro.planetsPos.ContainsKey(signs[kpos - 1]))
								{
									var eP = mHoro.planetsPos[signs[kpos - 1]];
									wHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls.Split(' ')[0] + ' ' + "Ke";
								}
								else
								{
									wHoro.planetsPos[signs[kpos - 1]] = pls.Split(' ')[0] + ' ' + "Ke";
								}
								// plPos[sign] = ePls;
								wHoro.planetsPos[sign] = wHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								bwrah = true;
							}
						}
						if (bmon && bwmon) break;
					}
				}
				bStar.manglik = "0";
				foreach (var pl in mHoro.planetsPos)
				{
					if (pl.Value.Contains("Ma"))
					{
						int hno = calcHno(bsn, pl.Key);
						if (hno == 1 || hno == 2 || hno == 4 || hno == 7 || hno == 12)
						{
							bStar.manglik = string.Format("1|{0}", hno);
						}
					}
				}
				bStar.partnerManglik = "0";
				foreach (var pl in wHoro.planetsPos)
				{
					if (pl.Value.Contains("Ma"))
					{
						int hno = calcHno(pbsn, pl.Key);
						if (hno == 1 || hno == 2 || hno == 4 || hno == 7 || hno == 12)
						{
							bStar.partnerManglik = string.Format("1|{0}", hno);
						}
					}
				}
				try
				{
					string s1 = calcDosha(mHoro);
					string s2 = calcDosha(wHoro);
					double d1 = Convert.ToDouble(s1.Split('|')[0]);
					double d2 = Convert.ToDouble(s2.Split('|')[0]);
					if (d1 > d2)
					{
						bStar.papaSamyam = string.Format("Matching: Papasamyam is more in Boys chart({0} units) than in Girls chart({1} units), which is good", d1, d2);
					}
					else
					{
						bStar.papaSamyam = string.Format("Not Matching: Papasamyam is less in Boys chart({0} units) than in Girls chart({1} units), which is not good", d1, d2);
					}
					bStar.kalatraDosh = string.Format("Kalatra Dosha {0} in his chart, {1} in her chart", s1.Split('|')[1], s2.Split('|')[1]);
				}
				catch
				{

				}

				return new JsonResult(bStar);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpPost("CompatibilityReport")]
		[ResponseCache(NoStore = true, Duration = 0)]
		public async Task<ActionResult> CompatibilityReport([FromBody] CompatibilityParams cParams)
		{
			try
			{
				_logger.LogInformation(string.Format("CompatibilityReport-{0}", cParams.dob));
				string tz1 = TZConvert.IanaToWindows(cParams.tz);
				string tz2 = TZConvert.IanaToWindows(cParams.partner_tz);
				string bsn = string.Empty;
				string pbsn = string.Empty;
				int y = Convert.ToInt32(cParams.dob.Split('T')[0].Split('-')[0]);
				int m = Convert.ToInt32(cParams.dob.Split('T')[0].Split('-')[1]);
				int d = Convert.ToInt32(cParams.dob.Split('T')[0].Split('-')[2]);
				int hou = Convert.ToInt32(cParams.dob.Split('T')[1].Split(':')[0]);
				int min = Convert.ToInt32(cParams.dob.Split('T')[1].Split(':')[1]);
				int sec = Convert.ToInt32(cParams.dob.Split('T')[1].Split(':')[2]);
				double lat = cParams.lat;
				double lng = cParams.lng;
				string ayan = string.Empty;
				if (((AYANMSAS)cParams.ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)cParams.ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz1);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)cParams.ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz1, cParams.dst, ayan, cParams.ayanid, false);
				y = Convert.ToInt32(cParams.partner_dob.Split('T')[0].Split('-')[0]);
				m = Convert.ToInt32(cParams.partner_dob.Split('T')[0].Split('-')[1]);
				d = Convert.ToInt32(cParams.partner_dob.Split('T')[0].Split('-')[2]);
				hou = Convert.ToInt32(cParams.partner_dob.Split('T')[1].Split(':')[0]);
				min = Convert.ToInt32(cParams.partner_dob.Split('T')[1].Split(':')[1]);
				sec = Convert.ToInt32(cParams.partner_dob.Split('T')[1].Split(':')[2]);
				lat = cParams.partner_lat;
				lng = cParams.partner_lng;
				ayan = string.Empty;
				if (((AYANMSAS)cParams.ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)cParams.ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz2);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)cParams.ayanid);
				}
				Horoscope wHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz1, cParams.dst, ayan, cParams.ayanid, false);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				BirthStar bStar = new BirthStar();
				string rJ = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
					string json4 = r4.ReadToEnd();
					dynamic rashis = JsonConvert.DeserializeObject(json4);
					bool bmon = false;
					bool bwmon = false;
					int rpos = 0;
					int wrpos = 0;
					bool brah = false;
					bool bwrah = false;
					foreach (var sign in signs)
					{
						rpos++;
						wrpos++;
						if (mHoro.planetsPos.ContainsKey(sign))
						{
							float moonDeg = 0;
							string pls = mHoro.planetsPos[sign].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo" && !bmon)
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.birthSignDeg = string.Format("{0}.{1}", pl.Split(' ')[0].Split('.')[0], pl.Split(' ')[0].Split('.')[1]);
										bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
										bsn = sign.ToString();
										string s = calcStar(moonDeg, bsn);
										bStar.birthStar = s.Split('|')[0];
										bStar.pada = Convert.ToInt32(s.Split('|')[1]);
										bmon = true;
										break;
									}
									else if (pl.Split(' ')[1] == "MEAN_NODE" && !brah)
									{
										var kpos = rpos + 6;
										if (kpos > 12) kpos = (kpos - 12);
										if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
										{
											var eP = mHoro.planetsPos[signs[kpos - 1]];
											mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pl.Split(' ')[0] + ' ' + "Ke";
										}
										else
										{
											mHoro.planetsPos[signs[kpos - 1]] = pl.Split(' ')[0] + ' ' + "Ke";
										}
										mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
										brah = true;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo" && !bmon)
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.birthSignDeg = string.Format("{0}.{1}", pls.Split(' ')[0].Split('.')[0], pls.Split(' ')[0].Split('.')[1]);
								bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								bsn = sign;
								string s = calcStar(moonDeg, bsn);
								bStar.birthStar = s.Split('|')[0];
								bStar.pada = Convert.ToInt32(s.Split('|')[1]);
								bmon = true;
							}
							else if (pls.Split(' ')[1] == "MEAN_NODE" && !brah)
							{
								var kpos = rpos + 6;
								if (kpos > 12) kpos = (kpos - 12);
								if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
								{
									var eP = mHoro.planetsPos[signs[kpos - 1]];
									mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls.Split(' ')[0] + ' ' + "Ke";
								}
								else
								{
									mHoro.planetsPos[signs[kpos - 1]] = pls.Split(' ')[0] + ' ' + "Ke";
								}
								mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								brah = true;
							}
						}
						if (wHoro.planetsPos.ContainsKey(sign))
						{
							float moonDeg = 0;
							string pls = wHoro.planetsPos[sign];
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo" && !bwmon)
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.partnerBirthSignDeg = string.Format("{0}.{1}", pl.Split(' ')[0].Split('.')[0], pl.Split(' ')[0].Split('.')[1]);
										bStar.partnerBirthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
										pbsn = sign.ToString();
										string s = calcStar(moonDeg, pbsn);
										bStar.partnerBirthStar = s.Split('|')[0];
										bStar.partnerPada = Convert.ToInt32(s.Split('|')[1]);
										bwmon = true;
										break;
									}
									else if (pl.Split(' ')[1] == "MEAN_NODE" && !bwrah)
									{
										var kpos = wrpos + 6;
										if (kpos > 12) kpos = (kpos - 12);
										if (wHoro.planetsPos.ContainsKey(signs[kpos - 1]))
										{
											var eP = wHoro.planetsPos[signs[kpos - 1]];
											wHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pl.Split(' ')[0] + ' ' + "Ke";
										}
										else
										{
											wHoro.planetsPos[signs[kpos - 1]] = pl.Split(' ')[0] + ' ' + "Ke";
										}
										wHoro.planetsPos[sign] = wHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
										bwrah = true;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo" && !bwmon)
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.partnerBirthSignDeg = string.Format("{0}.{1}", pls.Split(' ')[0].Split('.')[0], pls.Split(' ')[0].Split('.')[1]);
								bStar.partnerBirthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								pbsn = sign.ToString();
								string s = calcStar(moonDeg, pbsn);
								bStar.partnerBirthStar = s.Split('|')[0];
								bStar.partnerPada = Convert.ToInt32(s.Split('|')[1]);
								bwmon = true;
							}
							else if (pls.Split(' ')[1] == "MEAN_NODE" && !bwrah)
							{
								var kpos = wrpos + 6;
								if (kpos > 12) kpos = (kpos - 12);
								if (wHoro.planetsPos.ContainsKey(signs[kpos - 1]))
								{
									var eP = mHoro.planetsPos[signs[kpos - 1]];
									wHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls.Split(' ')[0] + ' ' + "Ke";
								}
								else
								{
									wHoro.planetsPos[signs[kpos - 1]] = pls.Split(' ')[0] + ' ' + "Ke";
								}
								wHoro.planetsPos[sign] = wHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								bwrah = true;
							}
						}
						if (bmon && bwmon) break;
					}
				}
				bStar.manglik = "0";
				foreach (var pl in mHoro.planetsPos)
				{
					if (pl.Value.Contains("Ma"))
					{
						int hno = calcHno(bsn, pl.Key);
						if (hno == 1 || hno == 2 || hno == 4 || hno == 7 || hno == 12)
						{
							bStar.manglik = string.Format("1|{0}", hno);
						}
					}
				}
				bStar.partnerManglik = "0";
				foreach (var pl in wHoro.planetsPos)
				{
					if (pl.Value.Contains("Ma"))
					{
						int hno = calcHno(pbsn, pl.Key);
						if (hno == 1 || hno == 2 || hno == 4 || hno == 7 || hno == 12)
						{
							bStar.partnerManglik = string.Format("1|{0}", hno);
						}
					}
				}
				try
				{
					string s1 = calcDosha(mHoro);
					string s2 = calcDosha(wHoro);
					double d1 = Convert.ToDouble(s1.Split('|')[0]);
					double d2 = Convert.ToDouble(s2.Split('|')[0]);
					if (d1 > d2)
					{
						bStar.papaSamyam = string.Format("Matching: Papasamyam is more in Boys chart({0} units) than in Girls chart({1} units), which is good", d1, d2);
					}
					else
					{
						bStar.papaSamyam = string.Format("Not Matching: Papasamyam is less in Boys chart({0} units) than in Girls chart({1} units), which is not good", d1, d2);
					}
					bStar.kalatraDosh = string.Format("Kalatra Dosha {0} in his chart, {1} in her chart", s1.Split('|')[1], s2.Split('|')[1]);
				}
				catch
				{

				}

				return new JsonResult(bStar);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		//public bool checkConn(PlanetHouse p1, PlanetHouse p2)
		//{
		//	bool con = false;
		//	//check if any or either is lord of other house
		//	if(p1.houselord == p2.code || p2.houselord == p1.code)
		//	{
		//		//yes
		//		con = true;
		//	}
		//	//check if any or either aspecting each other
		//	bool asp7 = false, asp5 = false, asp9 = false, asp3 = false, asp10 = false, asp4 = false;
		//	switch (p1.code)
		//	{
		//		case "Su":
		//		case "Mo":
		//			asp7 = checkAspect(p1.hno, p2.hno, 7);
		//			break;
		//		case "Ju":
		//			asp7 = checkAspect(p1.hno, p2.hno, 7);
		//			asp5 = checkAspect(p1.hno, p2.hno, 5);
		//			asp9 = checkAspect(p1.hno, p2.hno, 9);
		//			break;
		//		case "Me":
		//			asp7 = checkAspect(p1.hno, p2.hno, 7);
		//			break;
		//		case "Ma":
		//			asp7 = checkAspect(p1.hno, p2.hno, 7);
		//			asp4 = checkAspect(p1.hno, p2.hno, 4);
		//			break;
		//		case "Ve":
		//			asp7 = checkAspect(p1.hno, p2.hno, 7);
		//			break;
		//		case "Sa":
		//			asp7 = checkAspect(p1.hno, p2.hno, 7);
		//			asp3 = checkAspect(p1.hno, p2.hno, 3);
		//			asp10 = checkAspect(p1.hno, p2.hno, 10);
		//			break;
		//		default:
		//			break;
		//	}
		//	if(asp7 || asp9 || asp5 || asp10 || asp3 || asp4)
		//	{
		//		con = true;
		//	}
		//	asp7 = false;
		//	asp5 = false;
		//	asp10 = false;
		//	asp10 = false;
		//	asp3 = false;
		//	asp4 = false;
		//	switch (p2.code)
		//	{
		//		case "Su":
		//		case "Mo":
		//			asp7 = checkAspect(p2.hno, p1.hno, 7);
		//			break;
		//		case "Ju":
		//			asp7 = checkAspect(p2.hno, p1.hno, 7);
		//			asp5 = checkAspect(p2.hno, p1.hno, 5);
		//			asp9 = checkAspect(p2.hno, p1.hno, 9);
		//			break;
		//		case "Me":
		//			asp7 = checkAspect(p2.hno, p1.hno, 7);
		//			break;
		//		case "Ma":
		//			asp7 = checkAspect(p2.hno, p1.hno, 7);
		//			asp4 = checkAspect(p2.hno, p1.hno, 4);
		//			break;
		//		case "Ve":
		//			asp7 = checkAspect(p2.hno, p1.hno, 7);
		//			break;
		//		case "Sa":
		//			asp7 = checkAspect(p2.hno, p1.hno, 7);
		//			asp3 = checkAspect(p2.hno, p1.hno, 3);
		//			asp10 = checkAspect(p2.hno, p1.hno, 10);
		//			break;
		//		default:
		//			break;
		//	}
		//	if (asp7 || asp9 || asp5 || asp10 || asp3 || asp4)
		//	{
		//		con = true;
		//	}
		//	return con;
		//}
		public string calcDosha(Horoscope h1)
		{
			double dosh = 0.0;
			Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
			try
			{
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				Dictionary<string, string> plpos = h1.planetsPos;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string ah7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7)
					{
						hou7 = ras[r1];
						ah7 = ras[r1];
					}
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool ven = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (ven)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Ve")
							{
								ven = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plpos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plpos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				bool kal = false;
				//malefics in h1 on 1,2,4.7,8,12
				double dA = 0.0, dM = 0.0, dV = 0.0;
				foreach (var k in dctPlHou.Keys)
				{
					if (dctPlHou[k].code == "Sa" || dctPlHou[k].code == "Ma" || dctPlHou[k].code == "Ra" || dctPlHou[k].code == "Su")
					{
						double dSu = 0.0, dRa = 0.0, dSa = 0.0, dMa = 0.0;
						switch (dctPlHou[k].hno)
						{
							case 1:
							case 2:
							case 4:
								if (dctPlHou[k].code == "Sa") dSa += 3.0;
								else if (dctPlHou[k].code == "Su") dSu += 3.0;
								else if (dctPlHou[k].code == "Ra") dRa += 3.0;
								else if (dctPlHou[k].code == "Ma") dMa += 3.0;
								break;
							case 7:
								if (dctPlHou[k].code == "Sa") dSa += 7.0;
								else if (dctPlHou[k].code == "Su") dSu += 7.0;
								else if (dctPlHou[k].code == "Ra") dRa += 7.0;
								else if (dctPlHou[k].code == "Ma") dMa += 7.0;
								//kaltra dosh
								kal = true;
								break;
							case 8:
								if (dctPlHou[k].code == "Sa") dSa += 6.0;
								else if (dctPlHou[k].code == "Su") dSu += 6.0;
								else if (dctPlHou[k].code == "Ra") dRa += 6.0;
								else if (dctPlHou[k].code == "Ma") dMa += 6.0;
								break;
							case 12:
								if (dctPlHou[k].code == "Sa") dSa += 1.0;
								else if (dctPlHou[k].code == "Su") dSu += 1.0;
								else if (dctPlHou[k].code == "Ra") dRa += 1.0;
								else if (dctPlHou[k].code == "Ma") dMa += 1.0;
								break;
							default:
								break;
						}
						PlanetStrength ps = checkStrength(dctPlHou[k]);
						switch (dctPlHou[k].code)
						{
							case "Ra":
								if (ps == PlanetStrength.EXALTED) dRa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dRa /= (double)4;
								if (ps == PlanetStrength.OWN) dRa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dRa = (dRa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dRa = dRa + (dRa / (double)4);
								break;
							case "Su":
								if (ps == PlanetStrength.EXALTED) dSu = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dSu /= (double)4;
								if (ps == PlanetStrength.OWN) dSu /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dSu = (dSu * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dSu = dSu + (dSu / (double)4);
								break;
							case "Sa":
								if (ps == PlanetStrength.EXALTED) dSa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dSa /= (double)4;
								if (ps == PlanetStrength.OWN) dSa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dSa = (dSa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dSa = dSa + (dSa / (double)4);
								break;
							case "Ma":
								if (ps == PlanetStrength.EXALTED) dMa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dMa /= (double)4;
								if (ps == PlanetStrength.OWN) dMa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dMa = (dMa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dMa = dMa + (dMa / (double)4);
								break;
							default:
								break;
						}
						dA += dSa;
						dA += dRa;
						dA += dSu;
						dA += dMa;
						dSu = 0.0;
						dRa = 0.0;
						dSa = 0.0;
						dMa = 0.0;
						switch (dctPlHou[k].mhno)
						{
							case 1:
							case 2:
							case 4:
								if (dctPlHou[k].code == "Sa") dSa += 3.0;
								else if (dctPlHou[k].code == "Su") dSu += 3.0;
								else if (dctPlHou[k].code == "Ra") dRa += 3.0;
								else if (dctPlHou[k].code == "Ma") dMa += 3.0;
								break;
							case 7:
								if (dctPlHou[k].code == "Sa") dSa += 7.0;
								else if (dctPlHou[k].code == "Su") dSu += 7.0;
								else if (dctPlHou[k].code == "Ra") dRa += 7.0;
								else if (dctPlHou[k].code == "Ma") dMa += 7.0;
								break;
							case 8:
								if (dctPlHou[k].code == "Sa") dSa += 6.0;
								else if (dctPlHou[k].code == "Su") dSu += 6.0;
								else if (dctPlHou[k].code == "Ra") dRa += 6.0;
								else if (dctPlHou[k].code == "Ma") dMa += 6.0;
								break;
							case 12:
								if (dctPlHou[k].code == "Sa") dSa += 1.0;
								else if (dctPlHou[k].code == "Su") dSu += 1.0;
								else if (dctPlHou[k].code == "Ra") dRa += 1.0;
								else if (dctPlHou[k].code == "Ma") dMa += 1.0;
								break;
							default:
								break;
						}
						ps = checkStrength(dctPlHou[k]);
						switch (dctPlHou[k].code)
						{
							case "Ra":
								if (ps == PlanetStrength.EXALTED) dRa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dRa /= (double)4;
								if (ps == PlanetStrength.OWN) dRa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dRa = (dRa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dRa = dRa + (dRa / (double)4);
								break;
							case "Su":
								if (ps == PlanetStrength.EXALTED) dSu = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dSu /= (double)4;
								if (ps == PlanetStrength.OWN) dSu /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dSu = (dSu * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dSu = dSu + (dSu / (double)4);
								break;
							case "Sa":
								if (ps == PlanetStrength.EXALTED) dSa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dSa /= (double)4;
								if (ps == PlanetStrength.OWN) dSa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dSa = (dSa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dSa = dSa + (dSa / (double)4);
								break;
							case "Ma":
								if (ps == PlanetStrength.EXALTED) dMa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dMa /= (double)4;
								if (ps == PlanetStrength.OWN) dMa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dMa = (dMa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dMa = dMa + (dMa / (double)4);
								break;
							default:
								break;
						}
						dM += dSa;
						dM += dRa;
						dM += dSu;
						dM += dMa;
						dSu = 0.0;
						dRa = 0.0;
						dSa = 0.0;
						dMa = 0.0;
						switch (dctPlHou[k].shno)
						{
							case 1:
							case 2:
							case 4:
								if (dctPlHou[k].code == "Sa") dSa += 3.0;
								else if (dctPlHou[k].code == "Su") dSu += 3.0;
								else if (dctPlHou[k].code == "Ra") dRa += 3.0;
								else if (dctPlHou[k].code == "Ma") dMa += 3.0;
								break;
							case 7:
								if (dctPlHou[k].code == "Sa") dSa += 7.0;
								else if (dctPlHou[k].code == "Su") dSu += 7.0;
								else if (dctPlHou[k].code == "Ra") dRa += 7.0;
								else if (dctPlHou[k].code == "Ma") dMa += 7.0;
								break;
							case 8:
								if (dctPlHou[k].code == "Sa") dSa += 6.0;
								else if (dctPlHou[k].code == "Su") dSu += 6.0;
								else if (dctPlHou[k].code == "Ra") dRa += 6.0;
								else if (dctPlHou[k].code == "Ma") dMa += 6.0;
								break;
							case 12:
								if (dctPlHou[k].code == "Sa") dSa += 1.0;
								else if (dctPlHou[k].code == "Su") dSu += 1.0;
								else if (dctPlHou[k].code == "Ra") dRa += 1.0;
								else if (dctPlHou[k].code == "Ma") dMa += 1.0;
								break;
							default:
								break;
						}
						ps = checkStrength(dctPlHou[k]);
						switch (dctPlHou[k].code)
						{
							case "Ra":
								if (ps == PlanetStrength.EXALTED) dRa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dRa /= (double)4;
								if (ps == PlanetStrength.OWN) dRa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dRa = (dRa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dRa = dRa + (dRa / (double)4);
								break;
							case "Su":
								if (ps == PlanetStrength.EXALTED) dSu = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dSu /= (double)4;
								if (ps == PlanetStrength.OWN) dSu /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dSu = (dSu * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dSu = dSu + (dSu / (double)4);
								break;
							case "Sa":
								if (ps == PlanetStrength.EXALTED) dSa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dSa /= (double)4;
								if (ps == PlanetStrength.OWN) dSa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dSa = (dSa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dSa = dSa + (dSa / (double)4);
								break;
							case "Ma":
								if (ps == PlanetStrength.EXALTED) dMa = 0.0;
								if (ps == PlanetStrength.MOOLTRIKONA) dMa /= (double)4;
								if (ps == PlanetStrength.OWN) dMa /= (double)2; ;
								if (ps == PlanetStrength.FRIEND) dMa = (dMa * 3) / (double)4;
								if (ps == PlanetStrength.DEBILIATED) dMa = dMa + (dMa / (double)4);
								break;
							default:
								break;
						}
						dV += dSa;
						dV += dRa;
						dV += dSu;
						dV += dMa;
					}
					if (dctPlHou[k].hno == 7)
					{
						Horo h = new Horo();
						h.planetPos = h1.planetsPos;
						JsonResult jO = (JsonResult)GetAspects(h, ah7.Split('|')[0]);
						Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
						foreach (var asp in dctAsp)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (lrd == "Sa" || lrd == "Ma" || lrd == "Ra" || lrd == "Ke" || lrd == "Su")
								{
									kal = true;
								}

							}
						}
					}
				}
				dosh = dA + (dM / (double)2) + (dV / (double)4);
				return string.Format("{0}|{1}", dosh, (kal == true) ? "Exists" : "Not Exists");
			}
			catch (Exception eX)
			{
				return string.Format("{0}|{1}", -1.0, eX.Message);
			}
		}
		public double dmsToDec(int d, int m, int s)
		{
			double v = d + (m / (double)60) + (s / (double)3600);
			return Math.Round(v, 2);
		}
		public int calcHno(string ss, string ds)
		{
			if (ss == ds) return 1;
			string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
			int r1 = 0, r2 = 0;
			bool asc = false;
			for (r1 = 0; r1 < 12; r1++)
			{
				if (asc) r2++;
				if (ras[r1] == ss)
				{
					asc = true;
					r2++;
				}
				if (asc && ras[r1] == ds) return r2;
				if (r2 == 12) break;
				if (r1 == 11) r1 = -1;
			}
			return -1;
		}
		public string calcSHno(string ss, int hp)
		{
			string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
			int r1 = 0, r2 = 0;
			bool asc = false;
			for (r1 = 0; r1 < 12; r1++)
			{
				if (asc) r2++;
				if (ras[r1] == ss)
				{
					asc = true;
					r2++;
				}
				if (asc && r2 == hp) return string.Format("{0}|{1}", ras[r1], r2.ToString());
				if (r2 == 12) break;
				if (r1 == 11) r1 = -1;
			}
			return "-1";
		}
		[HttpGet("StarsForMonth")]
		public ActionResult StarsForMonth(string star, string sign, string moondeg)
		{
			try
			{
				_logger.LogInformation(string.Format("StarsForMonth-{0}", star));
				Moon moon = new Moon();
				moon.moonSign = sign;
				moon.birthStar = star.Split(' ')[0];
				string[] mds = moondeg.Split('.');
				moon.moonDeg = Convert.ToInt32(mds[0]) + Convert.ToInt32(mds[1]) / 60 + ((mds.Length > 2) ? Convert.ToInt32(mds[2]) : 0);
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = DateTime.Now;
				int totdys = 0;
				Dictionary<string, StarConst> strConst = new Dictionary<string, StarConst>();
				//int pyr = 0;
				//double ray = 0;
				string ayan = string.Empty;
				while (totdys < 30)
				{
					//string tday = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
					//calcStar(tday);
					//if (pyr != today.Year)
					//{
					//ray = (double)((today.Year - 397) * eqt);
					////tdms = dms(ray);
					////double d = (double)(ray / (double)3600);
					////int m = (int)Math.Floor(ray/3600-d) * 60;
					////int s = (int)Math.Floor(ray - d * 3600 - (m * 60));
					////int sec = (int)Math.Round(d * 3600);
					//int deg = (int)(ray / 3600);
					//int sec = (int)Math.Abs(ray % 3600);
					//int min = sec / 60;
					//sec %= 60;
					//ayan = string.Format("{0}.{1}.{2}", deg, min, sec);
					//}
					//pyr = today.Year;
					BirthStar cStar = GetBStar(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), ayan, (int)AYANMSAS.LAHIRI);
					moon.curSign = cStar.birthSign;
					moon.curStar = cStar.birthStar;
					calcStarStrength(ref moon);
					calcLunarStrengh(ref moon);
					StarConst str = new StarConst();
					str.date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today); //string.Format(@"{0} {1}/{2}/{3}", today.DayOfWeek.ToString( today.Day, today.Month, today.Year);
					str.star = moon.curStar;
					str.starStrength = moon.starStrength;
					str.lunarStrength = moon.moonStrength;
					double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
					double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
					string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
					str.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					str.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : tithi;
					str.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
					str.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
					str.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
					strConst[str.date] = str;
					totdys++;
					today = today.AddDays(1);
				}
				return new JsonResult(strConst);
			}
			catch (Exception eX)
			{
				return new JsonResult(eX.Message);
			}
		}
		[HttpGet("StarsForMonthEx2")]
		[ResponseCache(NoStore = true, Duration = 0)]
		public async Task<ActionResult> StarsForMonthEx2(string star, string sign, string moondeg, string latlng, string timezone, int ayanid)
		{
			try
			{
				_logger.LogInformation(string.Format("StarsForMonthEx2-{0}", star));
				string tz = TZConvert.IanaToWindows(timezone);
				Moon moon = new Moon();
				moon.moonSign = sign;
				moon.birthStar = star.Split(' ')[0];
				//string[] mds = moondeg.Split('.');
				//moon.moonDeg = (float)dmsToDec(Convert.ToInt32(mds[0]), Convert.ToInt32(mds[1]), ((mds.Length > 2) ? Convert.ToInt32(mds[2]) : 0));
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = DateTime.Now;
				TimeSpan ts = new TimeSpan(10, 30, 0);
				today = today.Date + ts;
				Dictionary<string, StarConst> strConst = new Dictionary<string, StarConst>();
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(today.Day, today.Month, today.Year, tzofset, (AYANMSAS)ayanid);
				}

				int totdys = 0;
				await Task.Run(() =>
				{
					while (totdys < 30)
					{
						BirthStar cStar = GetBStarEx(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), latlng, timezone, 0, ayan, ayanid).Result;
						moon.curSign = cStar.birthSign;
						moon.curStar = cStar.birthStar;
						calcStarStrength(ref moon);
						calcLunarStrengh(ref moon);
						StarConst str = new StarConst();
						str.date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today);
						str.star = moon.curStar;
						str.starStrength = moon.starStrength;
						str.lunarStrength = moon.moonStrength;
						double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
						double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
						string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
						str.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : tithi;
						str.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
						strConst[str.date] = str;
						totdys++;
						today = today.AddDays(1);
					}
				});
				return new JsonResult(strConst);
			}
			catch (Exception eX)
			{
				return new JsonResult(eX.Message);
			}
		}
		[HttpPost("StarsForMon")]
		[ResponseCache(NoStore = true, Duration = 0)]
		public async Task<ActionResult> StarsForMon([FromBody] StarParams starParams)
		{
			Dictionary<string, StarConst> strConst = new Dictionary<string, StarConst>();
			try
			{
				Dictionary<string, int> rashis = new Dictionary<string, int>();
				rashis.Add("aries", 1);
				rashis.Add("taurus", 2);
				rashis.Add("gemini", 3);
				rashis.Add("cancer", 4);
				rashis.Add("leo", 5);
				rashis.Add("virgo", 6);
				rashis.Add("libra", 7);
				rashis.Add("scorpio", 8);
				rashis.Add("saggitarius", 9);
				rashis.Add("sagittarius", 9);
				rashis.Add("capricorn", 10);
				rashis.Add("aquarius", 11);
				rashis.Add("pisces", 12);

				_logger.LogInformation(string.Format("StarsForMon-{0}", starParams.star));
				string tz = TZConvert.IanaToWindows(starParams.timezone);
				Moon moon = new Moon();
				moon.moonSign = starParams.sign;
				moon.birthStar = starParams.star.Split(' ')[0];
				//moon.moonDeg = (float)starParams.moondeg;
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = DateTime.Now;
				TimeSpan ts = new TimeSpan(10, 30, 0);
				today = today.Date + ts;
				string ayan = string.Empty;
				if (((AYANMSAS)starParams.ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)starParams.ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(today.Day, today.Month, today.Year, tzofset, (AYANMSAS)starParams.ayanid);
				}

				int totdys = 0;
				await Task.Run(() =>
				{
					while (totdys < 30)
					{
						//BirthStar cStar = GetBStarEx(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), latlng, timezone, 0, ayan, ayanid).Result;
						BirthStar cStar = GetBStarEx2(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), starParams.lat, starParams.lng, starParams.timezone, 0, ayan, starParams.ayanid).Result;
						moon.curSign = cStar.birthSign;
						moon.curStar = cStar.birthStar;
						calcStarStrength(ref moon);
						//calcLunarStrengh(ref moon);
						StarConst str = new StarConst();
						str.date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today);
						str.star = moon.curStar;
						str.starStrength = moon.starStrength;
						int b_num = Convert.ToInt32(rashis[moon.moonSign.ToLower()].ToString());
						//Console.WriteLine(string.Format("The rashi no. of your moon sign is {0}, current sign is {1}", b_num.ToString(), moon.curSign.ToLower()));
						int c_num = Convert.ToInt32(rashis[moon.curSign.ToLower()].ToString());
						//Console.WriteLine("The rashi no. of your current moon sign is " + c_num.ToString());
						int m_num = Math.Abs(b_num - c_num) + 1;
						moon.moonWeight = m_num;
						if (m_num == 6 || m_num == 8 || m_num == 12)
						{
							if (m_num == 8)
								str.lunarStrength = "Chandrastama, Bad";
							else
								str.lunarStrength = "Bad";
						}
						else
						{
							str.lunarStrength = "-";
						}
						double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
						double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
						string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
						str.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : tithi;
						str.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
						strConst[str.date] = str;
						totdys++;
						today = today.AddDays(1);
					}
				});
				return new JsonResult(strConst);
			}
			catch (Exception eX)
			{
				StarConst str = new StarConst();
				str.date = string.Format("ERROR: {0}", eX.Message);
				strConst[str.date] = str;
				return new JsonResult(strConst);
			}
		}
		[HttpGet("StarsForDay")]
		[ResponseCache(NoStore = true, Duration = 0)]
		public async Task<StarConst> StarsForDay(string dob, string tob, string star, string sign, string moondeg, string latlng, string timezone, int dstofset, int ayanid)
		{
			try
			{
				_logger.LogInformation("StarsForDay");
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				DateTime btm = new DateTime(y, m, d, hou, min, 0);
				btm.AddSeconds(dstofset);
				string tz = TZConvert.IanaToWindows(timezone);
				Moon moon = new Moon();
				moon.moonSign = sign;
				moon.birthStar = star;
				string[] mds = moondeg.Split('.');
				moon.moonDeg = (float)dmsToDec(Convert.ToInt32(mds[0]), Convert.ToInt32(mds[1]), ((mds.Length > 2) ? Convert.ToInt32(mds[2]) : 0));
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = new DateTime(y, m, d, hou, min, 0);
				btm.AddSeconds(dstofset);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(today.Day, today.Month, today.Year, tzofset, (AYANMSAS)ayanid);
				}
				BirthStar cStar = await GetBStarEx(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), latlng, timezone, dstofset, ayan, ayanid);
				moon.curSign = cStar.birthSign;
				moon.curStar = cStar.birthStar;
				calcStarStrength(ref moon);
				calcLunarStrengh(ref moon);
				StarConst str = new StarConst();
				str.date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today);
				str.star = moon.curStar;
				str.starStrength = moon.starStrength;
				str.lunarStrength = moon.moonStrength;
				double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
				double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
				string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
				str.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
				str.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : tithi;
				str.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
				str.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
				str.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
				return str;
			}
			catch (Exception eX)
			{
				StarConst str = new StarConst();
				str.date = eX.Message;
				return str;
			}
		}
		[HttpGet("CalForTime")]
		public async Task<StarConst> CalForTime(int day, int mon, int yer, int hour, int min, string latlng, string timezone, int ayanid)
		{
			try
			{
				_logger.LogInformation("CalForTime");
				string tz = TZConvert.IanaToWindows(timezone);
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = new DateTime(yer, mon, day, hour, min, 0);
				//TimeSpan ts = new TimeSpan(10, 30, 0);
				//today = today.Date + ts;
				//List<StarConst> strConst = new List<StarConst>();
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(today.Day, today.Month, today.Year, tzofset, (AYANMSAS)ayanid);
				}

				BirthStar cStar = await GetBStarEx(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), latlng, timezone, 0, ayan, ayanid);
				StarConst str = new StarConst();
				str.date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today); //string.Format(@"{0} {1}/{2}/{3}", today.DayOfWeek.ToString( today.Day, today.Month, today.Year);
				str.star = cStar.birthStar;
				double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
				double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
				string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
				str.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
				str.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : tithi;
				str.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
				str.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
				str.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
				return str;
			}
			catch (Exception eX)
			{
				StarConst str = new StarConst();
				str.star = eX.Message;
				return str;
			}
		}
		[HttpGet("CalForMon")]
		[ResponseCache(NoStore = true, Duration = 0)]

		public async Task<ActionResult> CalForMon(int mon, int yer, string latlng, string timezone, int ayanid)
		{
			try
			{
				_logger.LogInformation("CalForMon");
				string tz = TZConvert.IanaToWindows(timezone);
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = new DateTime(yer, mon, 1);
				TimeSpan ts = new TimeSpan(7, 0, 0);
				today = today.Date + ts;
				Dictionary<string, StarConst> strConst = new Dictionary<string, StarConst>();
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(today.Day, today.Month, today.Year, tzofset, (AYANMSAS)ayanid);
				}

				int totdys = 0;
				await Task.Run(() =>
				{
					while (mon == today.Month)
					{
						BirthStar cStar = GetBStarEx(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), latlng, timezone, 0, ayan, ayanid).Result;
						StarConst str = new StarConst();
						str.date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today); //string.Format(@"{0} {1}/{2}/{3}", today.DayOfWeek.ToString( today.Day, today.Month, today.Year);
						str.star = cStar.birthStar;
						double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
						double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
						string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
						str.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : tithi;
						str.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
						str.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
						strConst[str.date] = str;
						totdys++;
						today = today.AddDays(1);
					}
				});
				return new JsonResult(strConst);
			}
			catch (Exception eX)
			{
				return new JsonResult(eX.Message);
			}
		}
		[HttpGet("StarsForMonthEx")]
		public ActionResult StarsForMonthEx(string star, string sign, string moondeg, string timezone, int ayanid)
		{
			try
			{
				_logger.LogInformation("StarsForMonthEx");
				string tz = TZConvert.IanaToWindows(timezone);
				Moon moon = new Moon();
				moon.moonSign = sign.Split(' ')[0];
				moon.birthStar = star;
				string[] mds = moondeg.Split('.');
				moon.moonDeg = (float)dmsToDec(Convert.ToInt32(mds[0]), Convert.ToInt32(mds[1]), ((mds.Length > 2) ? Convert.ToInt32(mds[2]) : 0));
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = DateTime.Now;
				TimeSpan ts = new TimeSpan(10, 30, 0);
				today = today.Date + ts;
				int totdys = 0;
				Dictionary<string, StarConst> strConst = new Dictionary<string, StarConst>();
				//int pyr = 0;
				//double ray = 0;
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(today.Day, today.Month, today.Year, tzofset, (AYANMSAS)ayanid);
				}
				while (totdys < 30)
				{
					//string tday = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
					//calcStar(tday);
					//if (pyr != today.Year)
					//{
					//ray = (double)((today.Year - 397) * eqt);
					////tdms = dms(ray);
					////double d = (double)(ray / (double)3600);
					////int m = (int)Math.Floor(ray/3600-d) * 60;
					////int s = (int)Math.Floor(ray - d * 3600 - (m * 60));
					////int sec = (int)Math.Round(d * 3600);
					//int deg = (int)(ray / 3600);
					//int sec = (int)Math.Abs(ray % 3600);
					//int min = sec / 60;
					//sec %= 60;
					//ayan = string.Format("{0}.{1}.{2}", deg, min, sec);
					//}
					//pyr = today.Year;
					//string ayan = string.Empty;

					//TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					//TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					//double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					// ayan = Ayanmsa.CalcEx(today.Day, today.Month, today.Year, tzofset, (AYANMSAS)ayanid);
					// ayan = Ayanmsa.Calc(today.Day, today.Month, today.Year, AYANMSAS.BVRAMAN);
					//JsonResult json1 = (JsonResult)BirthstarEx(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), ayan);
					BirthStar cStar = GetBStar(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute), ayan, ayanid);
					moon.curSign = cStar.birthSign;
					moon.curStar = cStar.birthStar;
					calcStarStrength(ref moon);
					calcLunarStrengh(ref moon);
					StarConst str = new StarConst();
					str.date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today); //string.Format(@"{0} {1}/{2}/{3}", today.DayOfWeek.ToString( today.Day, today.Month, today.Year);
					str.star = moon.curStar;
					str.starStrength = moon.starStrength;
					str.lunarStrength = moon.moonStrength;
					double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
					double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
					string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
					str.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					str.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : tithi;
					str.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
					str.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
					strConst[str.date] = str;
					totdys++;
					today = today.AddDays(1);
				}
				return new JsonResult(strConst);
			}
			catch (Exception eX)
			{
				return new JsonResult(eX.Message);
			}
		}
		private BirthStar GetBStar(string dob, string tob, string ayan, int ayanid)
		{
			try
			{
				//string tz = TZConvert.IanaToWindows(timezone);
				//DBLog("BirthstarEx"); 
				string latlng = "17.23|78.29";
				string timezone = "India Standard Time";
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, timezone, ayan, (uint)ayanid);
				mHoro.calc_houses();
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				mHoro.calc_planets_pos(true, astClient);
				//mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, u9, u10, timezone, (ayan == string.Empty) ? false : true, ayan);
				//mHoro.calc_planets_pos(false);
				BirthStar bStar = new BirthStar();
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bmon = false;
							float moonDeg = 0;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bStar.birthSignDeg = pl.Split(' ')[0];
										bmon = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bStar.birthSignDeg = pls.Split(' ')[0];
								bmon = true;
							}
							if (bmon)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
									string nJ = string.Format(@"{0}\nakshatras.json", astClient);
									using (StreamReader r2 = new StreamReader(nJ))
									{
										string json2 = r2.ReadToEnd();
										List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
										foreach (var nak in nakshatras)
										{
											string[] snak = nak.location.start.Split(',')[0].Split('.');
											double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
											string[] enak = nak.location.end.Split(',')[0].Split('.');
											double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
											if (nak.location.start.Split(',')[1] == sign.ToString() && nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1 && moonDeg < nakd2)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.start.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg >= nakd1)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.end.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg < nakd2)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
										}
									}
								}
								break;
							}
						}
					}
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bsun = false;
							float sunDeg = 0;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bStar.sunDeg = pl.Split(' ')[0];
										bsun = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bStar.sunDeg = pls.Split(' ')[0];
								bsun = true;
							}
							if (bsun)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									bStar.sunSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								}
								break;
							}
						}
					}
				}

				return bStar;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return null;
			}
		}
		private async Task<BirthStar> GetBStarEx(string dob, string tob, string latlng, string timezone, int dstofset, string ayan, int ayanid)
		{
			try
			{
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, false);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				BirthStar bStar = new BirthStar();
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				float moonDeg = 0L, sunDeg = 0L;
				string msgn = string.Empty, ssgn = string.Empty, asgn = string.Empty;
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					bool bmon = false, bsun = false, basc = false;
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.birthSignDeg = pl.Split(' ')[0];
										msgn = sign;
										bmon = true;
									}
									else if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.sunDeg = pl.Split(' ')[0];
										ssgn = sign;
										bsun = true;
									}
									else if (pl.Split(' ')[1] == "AC")
									{
										asgn = sign;
										basc = true;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.birthSignDeg = pls.Split(' ')[0];
								msgn = sign;
								bmon = true;
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.sunDeg = pls.Split(' ')[0];
								ssgn = sign;
								bsun = true;
							}
							else if (pls.Split(' ')[1] == "AC")
							{
								asgn = sign;
								basc = true;
							}
						}
						if (bmon && bsun && basc) break;
					}
				}
				bStar.birthStar = calcStar(moonDeg, msgn.ToString()).Split('|')[0];
				string rJ = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json4 = r4.ReadToEnd();
					dynamic rashis = JsonConvert.DeserializeObject(json4);
					bStar.birthSign = rashis[msgn].ToString().Split('|')[1];
					bStar.sunSign = rashis[ssgn].ToString().Split('|')[1];
					bStar.ascSign = rashis[asgn].ToString().Split('|')[1];
				}
				return bStar;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return null;
			}
		}
		private async Task<BirthStar> GetBStarEx3(Horoscope mHoro)
		{
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				BirthStar bStar = new BirthStar();
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				float moonDeg = 0L, sunDeg = 0L;
				string msgn = string.Empty, ssgn = string.Empty, asgn = string.Empty;
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					bool bmon = false, bsun = false, basc = false;
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.birthSignDeg = pl.Split(' ')[0];
										msgn = sign;
										bmon = true;
									}
									else if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.sunDeg = pl.Split(' ')[0];
										ssgn = sign;
										bsun = true;
									}
									else if (pl.Split(' ')[1] == "AC")
									{
										asgn = sign;
										basc = true;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.birthSignDeg = pls.Split(' ')[0];
								msgn = sign;
								bmon = true;
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.sunDeg = pls.Split(' ')[0];
								ssgn = sign;
								bsun = true;
							}
							else if (pls.Split(' ')[1] == "AC")
							{
								asgn = sign;
								basc = true;
							}
						}
						if (bmon && bsun && basc) break;
					}
				}
				bStar.birthStar = calcStar(moonDeg, msgn.ToString()).Split('|')[0];
				string rJ = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json4 = r4.ReadToEnd();
					dynamic rashis = JsonConvert.DeserializeObject(json4);
					bStar.birthSign = rashis[msgn].ToString().Split('|')[1];
					bStar.sunSign = rashis[ssgn].ToString().Split('|')[1];
					bStar.ascSign = rashis[asgn].ToString().Split('|')[1];
				}
				return bStar;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return null;
			}
		}
		private async Task<BirthStar> GetBStarEx2(string dob, string tob, double lat, double lng, string timezone, int dstofset, string ayan, int ayanid)
		{
			try
			{
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				//double lat = Convert.ToDouble(latlng.Split('|')[0]);
				//double lng = Convert.ToDouble(latlng.Split('|')[1]);
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, false);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				BirthStar bStar = new BirthStar();
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				float moonDeg = 0L, sunDeg = 0L;
				string msgn = string.Empty, ssgn = string.Empty, asgn = string.Empty;
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					bool bmon = false, bsun = false, basc = false;
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.birthSignDeg = pl.Split(' ')[0];
										msgn = sign;
										bmon = true;
									}
									else if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.sunDeg = pl.Split(' ')[0];
										ssgn = sign;
										bsun = true;
									}
									else if (pl.Split(' ')[1] == "AC")
									{
										asgn = sign;
										basc = true;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.birthSignDeg = pls.Split(' ')[0];
								msgn = sign;
								bmon = true;
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.sunDeg = pls.Split(' ')[0];
								ssgn = sign;
								bsun = true;
							}
							else if (pls.Split(' ')[1] == "AC")
							{
								asgn = sign;
								basc = true;
							}
						}
						if (bmon && bsun && basc) break;
					}
				}
				bStar.birthStar = calcStar(moonDeg, msgn.ToString()).Split('|')[0];
				string rJ = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json4 = r4.ReadToEnd();
					dynamic rashis = JsonConvert.DeserializeObject(json4);
					bStar.birthSign = rashis[msgn].ToString().Split('|')[1];
					bStar.sunSign = rashis[ssgn].ToString().Split('|')[1];
					bStar.ascSign = rashis[asgn].ToString().Split('|')[1];
				}
				return bStar;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return null;
			}
		}

		string calcTithi(string ms, double md, string ss, double sd)
		{
			int tithi = -1;
			try
			{
				var tDict = new Dictionary<int, string> {
															{ 1, "Prathama" }, { 2, "Dwitiya" }, { 3, "Tritiya" }, { 4, "Chaturthi" }, { 5, "Panchami" }, { 6, "Shashthi" }, { 7, "Sapthami" }, { 8, "Asthami" }, { 9, "Navami" }, { 10, "Dasami" }, { 11, "Ekadashi" }, { 12, "Dwadashi" }, { 13, "Trayodashi" }, { 14, "Chaturdashi" }, { 15, "Purnima" },
															{ 16, "Prathama" }, { 17, "Dwitiya" }, { 18, "Tritiya" }, { 19, "Chaturthi" }, { 20, "Panchami" }, { 21, "Shashthi" }, { 22, "Sapthami" }, { 23, "Asthami" }, { 24, "Navami" }, { 25, "Dasami" }, { 26, "Ekadashi" }, { 27, "Dwadashi" }, { 28, "Trayodashi" }, { 29, "Chaturdashi" }, { 30, "Amavasya" }
														};
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string rJ = string.Format(@"{0}\rashis.json", astClient);
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json4 = r4.ReadToEnd();
					dynamic rashis = JsonConvert.DeserializeObject(json4);
					int rnum = Convert.ToInt32(rashis[ms.ToLower()].ToString());
					int mdeg = (rnum - 1) * 30;
					rnum = Convert.ToInt32(rashis[ss.ToLower()].ToString());
					int sdeg = (rnum - 1) * 30;
					//float mcd = float.Parse(md) + mdeg;
					sd += sdeg;
					md += mdeg;
					double tmlon = md;// md + ((md < sd) ? 360 : 0);
					double tslon = sd;
					double dlon = tmlon - tslon;
					dlon = (dlon < 0) ? dlon + 360 : dlon;
					double dtithi = (dlon / 12);
					dtithi = (dtithi == 0) ? 30 : dtithi;
					double drtithi = Math.Round(dtithi, 0, MidpointRounding.ToPositiveInfinity);
					//float scd = float.Parse(sd) + sdeg;
					//mcd = ConvertDegreeAngleToDouble((mcd.ToString().Contains('.')) ? Convert.ToInt32(mcd.ToString().Split('.')[0]) : Convert.ToInt32(mcd), (mcd.ToString().Contains('.')) ? Convert.ToInt32(mcd.ToString().Split('.')[1]) : 0, 0);
					//scd = ConvertDegreeAngleToDouble((scd.ToString().Contains('.')) ? Convert.ToInt32(scd.ToString().Split('.')[0]) : Convert.ToInt32(scd), (scd.ToString().Contains('.')) ? Convert.ToInt32(scd.ToString().Split('.')[1]) : 0, 0);
					//double diff = md - sd;
					//               if (diff < 0) diff += 360;
					//               tithi = (int)(diff / 12);
					//               //double dth = Math.Round(diff, 0, MidpointRounding.AwayFromZero);
					//					tithi = dtithi;

					bool dh = false;
					if (tithi > 15)
					{
						dh = true;
						//tithi -= 15;
					}
					//tithi = (int)dth;
					//                   if (tithi == 0) tithi++;
					string thi = string.Empty;
					//if (tithi == 0) thi = "Amavasya";
					//else
					//{
					thi = tDict[(int)drtithi];
					//if (thi == "Purnima" && dh == true)
					//   thi = "Amavasya";
					//}
					//double diff = md - sd;
					double dec = dtithi - (int)dtithi;
					double rem = (dec == 0) ? dec : 1 - dec;
					double remp = Math.Ceiling(rem * 100);
					//var regex = new System.Text.RegularExpressions.Regex("(?<=[\\.])[0-9]+");
					//double remp = 0.0;
					//if (regex.IsMatch(diff.ToString()))
					//{
					//string sdec = string.Format("0.{1}", regex.Match(diff.ToString()).Value);
					// double rem = 1 - Convert.ToDouble(sdec);
					//remp = Math.Ceiling(rem * 100);
					//}
					return string.Format("{0}|{1}|{2}", thi, (dh == true) ? "waxing" : "waning", remp);
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return string.Format("ERROR: {0} {1} {2} {3} LINE {4}", eX.Message, tithi, ms, ss, line);
			}
		}
		string calcYog(string ms, double md, string ss, double sd)
		{
			try
			{
				string[] yogs = {"Vishkambha","Prithi","Ayushman","Saubhagya","Shobhana",
										 "Atiganda","Sukarman","Dhrithi","Shoola","Ganda","Vridhi",
										 "Dhruva","Vyaghata","Harshana","Vajra","Siddhi","Vyatipata",
										 "Variyan","Parigha","Shiva","Siddha","Sadhya","Shubha","Shukla",
										 "Bramha","Indra","Vaidhruthi"};
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string rJ = string.Format(@"{0}\rashis.json", astClient);
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json4 = r4.ReadToEnd();
					dynamic rashis = JsonConvert.DeserializeObject(json4);
					int rnum = Convert.ToInt32(rashis[ms.ToLower()].ToString());
					int mdeg = (rnum - 1) * 30;
					rnum = Convert.ToInt32(rashis[ss.ToLower()].ToString());
					int sdeg = (rnum - 1) * 30;
					//float mcd = float.Parse(md) + mdeg;
					sd += sdeg;
					md += mdeg;
					return yogs[(int)(REV(sd + md) * 6 / 80)];
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return string.Format("ERROR: {0} [1} {2} LINE {3}", eX.Message, ms, ss, line);
			}
		}
		string calcKaran(string ms, double md, string ss, double sd)
		{
			try
			{
				string[] karan = {"Bava","Balava","Kaulava","Taitula","Garija","Vanija",
							"Visti","Sakuni","Chatuspada","Naga","Kimstughna"};
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string rJ = string.Format(@"{0}\rashis.json", astClient);
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json4 = r4.ReadToEnd();
					dynamic rashis = JsonConvert.DeserializeObject(json4);
					int rnum = Convert.ToInt32(rashis[ms.ToLower()].ToString());
					int mdeg = (rnum - 1) * 30;
					rnum = Convert.ToInt32(rashis[ss.ToLower()].ToString());
					int sdeg = (rnum - 1) * 30;
					//float mcd = float.Parse(md) + mdeg;
					sd += sdeg;
					md += mdeg;
					md = md + ((md < sd) ? 360 : 0);
					int n = (int)((md - sd) / 6);
					if (n == 0) n = 10;
					if (n >= 57) n -= 50;
					if (n > 0 && n < 57) n = (n - 1) - ((n - 1) / 7 * 7);
					return karan[n];
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return string.Format("ERROR: {0} {1} {2} LINE {3}", eX.Message, ms, ss, line);
			}
		}
		public BirthStar calcBirthStar(double plpos, string sign)
		{
			double pd = 3.3333325;
			BirthStar bStar = new BirthStar();
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string rJ = string.Format(@"{0}\o_rashis.json", astClient);
			using (StreamReader r4 = new StreamReader(rJ))
			{
				string json4 = r4.ReadToEnd();
				dynamic rashis = JsonConvert.DeserializeObject(json4);
				// int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
				string nJ = string.Format(@"{0}\nakshatras.json", astClient);
				using (StreamReader r2 = new StreamReader(nJ))
				{
					string json2 = r2.ReadToEnd();
					List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
					foreach (var nak in nakshatras)
					{
						double ds = dmsToDec(Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[1]), 0);
						double de = dmsToDec(Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[1]), 0);
						if (nak.location.start.Split(',')[1] == sign && nak.location.end.Split(',')[1] == sign)
						{
							if (plpos >= ds && plpos < de)
							{
								int p = 0;
								while (ds <= plpos) { p++; ds += pd; }
								bStar.birthStar = nak.name;
								bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								bStar.startSign = nak.location.start.Split(',')[1];
								bStar.endSign = nak.location.end.Split(',')[1];
								bStar.startDeg = nak.location.start.Split(',')[0];
								bStar.ruler = nak.ruler;
								bStar.pada = p;
								break;
							}
						}
						else if (nak.location.start.Split(',')[1] == sign.ToString())
						{
							double dn = dmsToDec(Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[1]), 0);
							if (plpos >= dn)
							{
								int p = 0;
								while (dn <= plpos) { p++; dn += pd; }
								bStar.birthStar = nak.name;
								bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								bStar.startSign = nak.location.start.Split(',')[1];
								bStar.endSign = nak.location.end.Split(',')[1];
								bStar.startDeg = nak.location.start.Split(',')[0];
								bStar.ruler = nak.ruler;
								bStar.pada = p;
								break;
							}
						}
						else if (nak.location.end.Split(',')[1] == sign.ToString())
						{
							double dne = dmsToDec(Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[1]), 0);
							double dns = dmsToDec(Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[1]), 0);
							int p = 0;
							if (plpos < dne)
							{
								while (dns < 30.0)
								{
									dns += pd;
									p++;
								}
								//p--;
								double sd = 0.0;
								while (sd < plpos) { p++; sd += pd; }
								//if (p > 4) p = 4;
								bStar.birthStar = nak.name;
								bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								bStar.startSign = nak.location.start.Split(',')[1];
								bStar.endSign = nak.location.end.Split(',')[1];
								bStar.startDeg = nak.location.start.Split(',')[0];
								bStar.ruler = nak.ruler;
								bStar.pada = p;
								break;
							}
						}
					}
				}
			}
			return bStar;
		}
		//            foreach (var nak in nakshatras)
		//            {
		//                string[] snak = nak.location.start.Split(',')[0].Split('.');
		//                double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
		//                string[] enak = nak.location.end.Split(',')[0].Split('.');
		//                double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
		//                if (nak.location.start.Split(',')[1] == ps.ToString() && nak.location.end.Split(',')[1] == ps.ToString())
		//                {
		//                    if (pp >= nakd1 && pp <= nakd2)
		//                    {
		//                        bStar.birthStar = nak.name;
		//                        bStar.birthSign = rashis[ps.ToString()].ToString().Split('|')[1].ToString();
		//                        bStar.startSign = nak.location.start.Split(',')[1];
		//                        bStar.endSign = nak.location.end.Split(',')[1];
		//                        bStar.startDeg = nak.location.start.Split(',')[0];
		//                        bStar.ruler = nak.ruler;
		//int p = 0;
		//while (nakd1 <= pp) { p++; nakd1 += pd; }
		//bStar.pada = p;
		//break;
		//                    }
		//                }
		//                else if (nak.location.start.Split(',')[1] == ps.ToLower())
		//                {
		//                    if (pp >= nakd1)
		//                    {
		//                        bStar.birthStar = nak.name;
		//                        bStar.birthSign = rashis[ps.ToString()].ToString().Split('|')[1].ToString();
		//                        bStar.startSign = nak.location.start.Split(',')[1];
		//                        bStar.endSign = nak.location.end.Split(',')[1];
		//                        bStar.startDeg = nak.location.start.Split(',')[0];
		//                        bStar.ruler = nak.ruler;
		//int p = 0;
		//while (nakd1 <= pp) { p++; nakd1 += pd; }
		//bStar.pada = p;
		//break;
		//                    }
		//                }
		//                else if (nak.location.end.Split(',')[1] == ps.ToLower())
		//                {
		//                    if (pp < nakd2)
		//                    {
		//                        bStar.birthStar = nak.name;
		//                        bStar.birthSign = rashis[ps.ToString()].ToString().Split('|')[1].ToString();
		//                        bStar.startSign = nak.location.start.Split(',')[1];
		//                        bStar.endSign = nak.location.end.Split(',')[1];
		//                        bStar.startDeg = nak.location.start.Split(',')[0];
		//                        bStar.ruler = nak.ruler;
		//int p = 0;
		//while (nakd1 < 30.0)
		//{
		//	nakd1 += pd;
		//	p++;
		//}
		//p--;
		//while (nakd2 > pp) { p++; pp += pd; }
		//bStar.pada = p;
		//break;
		//                    }
		//                }
		//            }
		public float ConvertDegreeAngleToDouble(float degrees, float minutes, float seconds)
		{
			//Decimal degrees = 
			//   whole number of degrees, 
			//   plus minutes divided by 60, 
			//   plus seconds divided by 3600

			return degrees + (minutes / 60);// +(seconds / 3600);
		}
		void calcStarStrength(ref Moon moon)
		{
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				using (StreamReader r3 = new StreamReader(string.Format(@"{0}\nakshatras.json", astClient)))
				{
					string json3 = r3.ReadToEnd();
					List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json3);
					int b_num = 0;
					int c_num = 0;

					foreach (Star nak in nakshatras)
					{
						if (b_num == 0 && nak.name == moon.birthStar)
						{
							b_num = nak.order;
						}
						if (c_num == 0 && nak.name == moon.curStar)
						{
							c_num = nak.order;
						}
						if (b_num != 0 && c_num != 0)
							break;
					}
					int m_num = Math.Abs(b_num - c_num) + 1;
					if (m_num <= 9)
						moon.starWeight = m_num;
					else
					{
						int quo = Math.DivRem(m_num, 9, out moon.starWeight);
						//moon.starWeight = m_num % 9;
					}
					switch (moon.starWeight)
					{
						case 1:
							moon.starStrength = "Janma/ danger to body";
							break;
						case 2:
							moon.starStrength = "Sampat/ Wealth and Prosperity";
							break;
						case 3:
							moon.starStrength = "Vipat/ Dangers, Losses, Accidents";
							break;
						case 4:
							moon.starStrength = "Kshema/ Prosperity";
							break;
						case 5:
							moon.starStrength = "Pratyak/ Obstacles";
							break;
						case 6:
							moon.starStrength = "Sadhana/ Realisation and Ambitions";
							break;
						case 7:
							moon.starStrength = "Naidhana/ Dangers";
							break;
						case 8:
							moon.starStrength = "Mitra/ Good";
							break;
						case 9:
						case 0:
							moon.starStrength = "Prama Mitra/ Very Favourable";
							break;
						default:
							break;
					}
				}
			}
			catch
			{
			}
		}
		void calcLunarStrengh(ref Moon moon)
		{
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				using (StreamReader r3 = new StreamReader(string.Format(@"{0}\rashis_f.json", astClient)))
				{
					string json3 = r3.ReadToEnd();
					Console.WriteLine(json3);
					dynamic rashis = JsonConvert.DeserializeObject(json3);
					Console.WriteLine(moon.curStar);
					Console.WriteLine(moon.curSign);
					int b_num = Convert.ToInt32(rashis[moon.moonSign.ToLower()].ToString());
					Console.WriteLine(string.Format("The rashi no. of your moon sign is {0}, current sign is {1}", b_num.ToString(), moon.curSign.ToLower()));
					int c_num = Convert.ToInt32(rashis[moon.curSign.ToLower()].ToString());
					Console.WriteLine("The rashi no. of your current moon sign is " + c_num.ToString());

					int m_num = Math.Abs(b_num - c_num);
					moon.moonWeight = m_num;
					if (m_num == 6 || m_num == 8 || m_num == 12)
					{
						if (m_num == 8)
							moon.moonStrength = "Chandrastama, Bad";
						else
							moon.moonStrength = "Bad";
					}
					else
					{
						moon.moonStrength = "-";
					}
				}
			}
			catch (Exception eX)
			{
				Console.WriteLine(eX.Message);
			}
		}
		[HttpGet("Getcusps")]
		public ActionResult Getcusps(string dob, string tob, string latlng, string timezone)
		{
			try
			{
				_logger.LogInformation("Getcusps");
				// log.Info(string.Format("GETCUSPS-{0},{1},{2},{3}", dob, tob, latlng, timezone));
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string sF = string.Format(@"{0}\ayan-kp.json", astClient);
				string ayan = string.Empty;
				//using (StreamReader r = new StreamReader(sF))
				//{
				//    string jsa = r.ReadToEnd();
				//    dynamic ayans = JsonConvert.DeserializeObject(jsa);
				//    ayan = ayans[i3.ToString()].ToString();
				//}
				ayan = Ayanmsa.Calc((int)u1, (int)u2, i3, AYANMSAS.KPNEW);
				mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, TZConvert.IanaToWindows(timezone), true, ayan);
				mHoro.calc_planets_pos(true, astClient);
				mHoro.calc_houses();
				Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				horo.housePos = mHoro.housePos;
				horo.ascPos = mHoro.ascPos;
				float moonDeg = 0;
				string moonSign = string.Empty;
				float sunDeg = 0;
				string sunSign = string.Empty;
				//string astClient = System.Web.HttpContext.Current.Server.MapPath("~/Content/astroclient");
				sF = string.Format(@"{0}\o_short_signs.json", astClient);
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bmon = false;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bmon = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bmon = true;
							}
							if (bmon)
							{
								moonSign = calcStar(moonDeg, sign.ToString()).Split('|')[0];
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
									string nJ = string.Format(@"{0}\nakshatras.json", astClient);
									using (StreamReader r2 = new StreamReader(nJ))
									{
										string json2 = r2.ReadToEnd();
										List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
										foreach (var nak in nakshatras)
										{
											string[] snak = nak.location.start.Split(',')[0].Split('.');
											double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
											string[] enak = nak.location.end.Split(',')[0].Split('.');
											double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
											if (nak.location.start.Split(',')[1] == sign.ToString() && nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1 && moonDeg <= nakd2)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.start.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg >= nakd1)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.end.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg <= nakd2)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
										}
									}
								}
								break;
							}
						}
					}
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bsun = false;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bsun = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bsun = true;
							}
							if (bsun)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									sunSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								}
								break;
							}
						}
					}
					string tithi = calcTithi(moonSign, moonDeg, sunSign, sunDeg);
					horo.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					horo.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
					horo.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
					horo.yoga = calcYog(moonSign, moonDeg, sunSign, sunDeg);
					horo.karana = calcKaran(moonSign, moonDeg, sunSign, sunDeg);
				}
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				for (int i = 0; i < zod_nam.Count(); i++)
				{
					if (horo.planetPos.ContainsKey(zod_nam[i]))
					{
						var ppos = horo.planetPos[zod_nam[i]];
						foreach (var pl in ppos.Split('|'))
						{
							string[] pld = pl.Split(' ')[0].Split('.');
							if (dctPls.ContainsKey(zod_nam[i]))
							{
								dctPls[zod_nam[i]] = string.Format("{0}|{1}.{2} {3}", dctPls[zod_nam[i]], pld[0], pld[1], pl.Split(' ')[1]);
							}
							else
							{
								dctPls[zod_nam[i]] = string.Format("{0}.{1} {2}", pld[0], pld[1], pl.Split(' ')[1]);
							}
						}
					}
				}
				horo.planetPos = dctPls;
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetcuspsEx")]
		public ActionResult GetcuspsEx(string dob, string tob, string latlng, string timezone, double tzofset, int ayanid)
		{
			try
			{
				_logger.LogInformation("GetcuspsEx");
				//log.Info(string.Format("GETCUSPS-{0},{1},{2},{3}", dob, tob, latlng, timezone));
				Horoscope mHoro = new Horoscope();
				string tz = TZConvert.IanaToWindows(timezone);
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				int u7 = Convert.ToInt32(latlng.Split('|')[0].Split('.')[0]);
				uint u8 = Convert.ToUInt32(latlng.Split('|')[0].Split('.')[1]);
				int u9 = Convert.ToInt32(latlng.Split('|')[1].Split('.')[0]);
				uint u10 = Convert.ToUInt32(latlng.Split('|')[1].Split('.')[1]);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				//string sF = string.Format(@"{0}\ayan-kp.json", astClient);
				//string ayan = string.Empty;
				//using (StreamReader r = new StreamReader(sF))
				//{
				//    string jsa = r.ReadToEnd();
				//    dynamic ayans = JsonConvert.DeserializeObject(jsa);
				//    ayan = ayans[i3.ToString()].ToString();
				//}
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				mHoro.calc_houses();
				mHoro.calc_planets_pos(true, astClient);
				//ayan = Ayanmsa.Calc((int)u1, (int)u2, i3, AYANMSAS.KPNEW);
				//mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, u9, u10, TZConvert.IanaToWindows(timezone), true, ayan);
				//mHoro.calc_planets_pos(true);
				//mHoro.calc_houses();
				Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				horo.housePos = mHoro.housePos;
				horo.ascPos = mHoro.ascPos;
				float moonDeg = 0;
				string moonSign = string.Empty;
				float sunDeg = 0;
				string sunSign = string.Empty;
				//string astClient = System.Web.HttpContext.Current.Server.MapPath("~/Content/astroclient");
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bmon = false;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));//(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bmon = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2])); //(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bmon = true;
							}
							if (bmon)
							{
								moonSign = calcStar(moonDeg, sign.ToString()).Split('|')[0];
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
									string nJ = string.Format(@"{0}\nakshatras.json", astClient);
									using (StreamReader r2 = new StreamReader(nJ))
									{
										string json2 = r2.ReadToEnd();
										List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
										foreach (var nak in nakshatras)
										{
											string[] snak = nak.location.start.Split(',')[0].Split('.');
											double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
											string[] enak = nak.location.end.Split(',')[0].Split('.');
											double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
											if (nak.location.start.Split(',')[1] == sign.ToString() && nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1 && moonDeg <= nakd2)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.start.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg >= nakd1)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.end.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg <= nakd2)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
										}
									}
								}
								break;
							}
						}
					}
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bsun = false;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bsun = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bsun = true;
							}
							if (bsun)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									sunSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								}
								break;
							}
						}
					}
					string tithi = calcTithi(moonSign, moonDeg, sunSign, sunDeg);
					horo.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					horo.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
					horo.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
					horo.yoga = calcYog(moonSign, moonDeg, sunSign, sunDeg);
					horo.karana = calcKaran(moonSign, moonDeg, sunSign, sunDeg);
				}
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				for (int i = 0; i < zod_nam.Count(); i++)
				{
					if (horo.planetPos.ContainsKey(zod_nam[i]))
					{
						var ppos = horo.planetPos[zod_nam[i]];
						foreach (var pl in ppos.Split('|'))
						{
							string[] pld = pl.Split(' ')[0].Split('.');
							if (dctPls.ContainsKey(zod_nam[i]))
							{
								dctPls[zod_nam[i]] = string.Format("{0}|{1}.{2} {3}", dctPls[zod_nam[i]], pld[0], pld[1], pl.Split(' ')[1]);
							}
							else
							{
								dctPls[zod_nam[i]] = string.Format("{0}.{1} {2}", pld[0], pld[1], pl.Split(' ')[1]);
							}
						}
					}
				}
				horo.planetPos = dctPls;
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				//DBLog(string.Format("GetcuspsEx-EXCEPTION"));
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		private async Task<Horoscope> getHoroscope(int y, int m, int d, int hou, int min, int sec, double lat, double lng, string tz, int dstofset, string ayan, int ayanid, bool bhou)
		{
			return await Task.Run(() =>
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				Horoscope mHoro = new Horoscope();
				if (dstofset > 0)
				{
					DateTime btm = new DateTime(y, m, d, hou, min, sec);
					btm.AddSeconds(dstofset);
					mHoro.init_data_ex2((uint)btm.Day, (uint)btm.Month, btm.Year, (uint)btm.Hour, (uint)btm.Minute, (uint)btm.Second, lat, lng, tz, ayan, (uint)ayanid);
				}
				else
				{
					mHoro.init_data_ex2((uint)d, (uint)m, y, (uint)hou, (uint)min, (uint)sec, lat, lng, tz, ayan, (uint)ayanid);
				}
				//mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				if (bhou) mHoro.calc_houses();
				mHoro.calc_planets_pos(true, astClient);
				return mHoro;
			});

		}
		private async Task<Horo> getHoro(Horoscope mHoro)
		{
			return await Task.Run(() =>
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				horo.planetDecl = mHoro.planetsDecl;
				horo.planetSped = mHoro.planetSped;
				horo.housePos = mHoro.housePos;
				horo.ascPos = mHoro.ascPos;
				float moonDeg = 0;
				string moonSign = string.Empty;
				float sunDeg = 0;
				string sunSign = string.Empty;
				//string astClient = System.Web.HttpContext.Current.Server.MapPath("~/Content/astroclient");
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bmon = false;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));//(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bmon = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));//(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bmon = true;
							}
							if (bmon)
							{
								moonSign = calcStar(moonDeg, sign.ToString()).Split('|')[0];
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
									string nJ = string.Format(@"{0}\nakshatras.json", astClient);
									using (StreamReader r2 = new StreamReader(nJ))
									{
										string json2 = r2.ReadToEnd();
										List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
										foreach (var nak in nakshatras)
										{
											string[] snak = nak.location.start.Split(',')[0].Split('.');
											double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
											string[] enak = nak.location.end.Split(',')[0].Split('.');
											double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
											if (nak.location.start.Split(',')[1] == sign.ToString() && nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1 && moonDeg <= nakd2)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.start.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg >= nakd1)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.end.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg <= nakd2)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
										}
									}
								}
								break;
							}
						}
					}
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bsun = false;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bsun = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bsun = true;
							}
							if (bsun)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									sunSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								}
								break;
							}
						}
					}
					string tithi = calcTithi(moonSign, moonDeg, sunSign, sunDeg);
					horo.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					horo.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
					horo.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
					horo.yoga = calcYog(moonSign, moonDeg, sunSign, sunDeg);
					horo.karana = calcKaran(moonSign, moonDeg, sunSign, sunDeg);
				}
				return horo;
			});
		}
		private async Task<Horo> getVHoro(Horoscope mHoro, bool use_tr)
		{
			return await Task.Run(() =>
			{
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				Horo horo = new Horo();
				string mnod = "MEAN_NODE";
				if (use_tr) mnod = "TRUE_NODE";
				for (int i = 0; i < zod_nam.Count(); i++)
				{
					if (mHoro.planetsPos.ContainsKey(zod_nam[i]))
					{
						var ppos = mHoro.planetsPos[zod_nam[i]];
						foreach (var pl in ppos.Split('|'))
						{
							//string[] pld = pl.Split(' ')[0].Split('.');
							//if (dctPls.ContainsKey(zod_nam[i]))
							//{
							//	dctPls[zod_nam[i]] = string.Format("{0}|{1}.{2} {3}", dctPls[zod_nam[i]], pld[0], pld[1], pl.Split(' ')[1]);
							//}
							//else
							//{
							//	dctPls[zod_nam[i]] = string.Format("{0}.{1} {2}", pld[0], pld[1], pl.Split(' ')[1]);
							//}
							string code = pl.Split(' ')[1];
							if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "AC" && code != mnod)
							{  //consider only true planets
								PlanetHouse pHou = new PlanetHouse
								{
									code = code,
									name = "",
									hno = 0,
									mhno = 0,
									shno = 0,
									pos = 0,
									sign = zod_nam[i],
									signtype = "",
									lordship = "",
									houselord = ""
								};
								string desc = descStrength(pHou);
								if (desc.Trim() != string.Empty)
									horo.plStren += string.Format("{0},", desc);
							}

						}
					}
				}
				horo.planetPos = mHoro.planetsPos;
				horo.retroPls = mHoro.retroPls;
				return horo;
			});
		}
		[HttpGet("GetcuspsEx3")]
		public async Task<ActionResult> GetcuspsEx3(string dob, string tob, string latlng, string timezone, int dstofset, int ayanid)
		{
			try
			{
				_logger.LogInformation("GetcuspsEx3");
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				//string sF = string.Format(@"{0}\ayan-kp.json", astClient);
				//string ayan = string.Empty;
				//using (StreamReader r = new StreamReader(sF))
				//{
				//    string jsa = r.ReadToEnd();
				//    dynamic ayans = JsonConvert.DeserializeObject(jsa);
				//    ayan = ayans[i3.ToString()].ToString();
				//}
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
				}

				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, true);
				Horo horo = await getHoro(mHoro);
				//ayan = Ayanmsa.Calc((int)u1, (int)u2, i3, AYANMSAS.KPNEW);
				//mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, u9, u10, TZConvert.IanaToWindows(timezone), true, ayan);
				//mHoro.calc_planets_pos(true);
				//mHoro.calc_houses();
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				//DBLog(string.Format("GetcuspsEx-EXCEPTION"));
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetcuspsEx2")]
		public async Task<ActionResult> GetcuspsEx2(string dob, string tob, string latlng, string timezone, double tzofset, int ayanid)
		{
			try
			{
				_logger.LogInformation("GetcuspsEx2");
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				//string sF = string.Format(@"{0}\ayan-kp.json", astClient);
				//string ayan = string.Empty;
				//using (StreamReader r = new StreamReader(sF))
				//{
				//    string jsa = r.ReadToEnd();
				//    dynamic ayans = JsonConvert.DeserializeObject(jsa);
				//    ayan = ayans[i3.ToString()].ToString();
				//}
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double ofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, ofset, (AYANMSAS)ayanid);
				}

				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, (int)tzofset, ayan, ayanid, true);
				Horo horo = await getHoro(mHoro);
				//ayan = Ayanmsa.Calc((int)u1, (int)u2, i3, AYANMSAS.KPNEW);
				//mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, u9, u10, TZConvert.IanaToWindows(timezone), true, ayan);
				//mHoro.calc_planets_pos(true);
				//mHoro.calc_houses();
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				//DBLog(string.Format("GetcuspsEx-EXCEPTION"));
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		public string calcStar(double plpos, string sign)
		{
			try
			{
				double pd = 3.3333325;
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string nJ = string.Format(@"{0}\nakshatras.json", astClient);
				using (StreamReader r2 = new StreamReader(nJ))
				{
					string json2 = r2.ReadToEnd();
					List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
					foreach (var nak in nakshatras)
					{
						if (nak.location.start.Split(',')[1] == sign && nak.location.end.Split(',')[1] == sign)
						{
							double ds = dmsToDec(Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[1]), 0);
							double de = dmsToDec(Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[1]), 0);
							if (plpos >= ds && plpos < de)
							{
								int p = 0;
								while (ds <= plpos) { p++; ds += pd; }
								return string.Format("{0}|{1}", nak.name, p);
							}
						}
						else if (nak.location.start.Split(',')[1] == sign.ToString())
						{
							double dn = dmsToDec(Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[1]), 0);
							if (plpos >= dn)
							{
								int p = 0;
								while (dn <= plpos) { p++; dn += pd; }
								return string.Format("{0}|{1}", nak.name, p);
							}
						}
						else if (nak.location.end.Split(',')[1] == sign.ToString())
						{
							double dne = dmsToDec(Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[1]), 0);
							double dns = dmsToDec(Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[1]), 0);
							int p = 0;
							if (plpos < dne)
							{
								while (dns < 30.0)
								{
									dns += pd;
									p++;
								}
								p--;
								while (dne > plpos) { p++; plpos += pd; }
								return string.Format("{0}|{1}", nak.name, p);
							}
						}
					}
				}
				return "";
			}
			catch (Exception eX)
			{
				return eX.Message;
			}
		}


		public string calcStarL(double plpos, string sign)
		{
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string nJ = string.Format(@"{0}\nakshatras.json", astClient);
				using (StreamReader r2 = new StreamReader(nJ))
				{
					string json2 = r2.ReadToEnd();
					List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
					foreach (var nak in nakshatras)
					{
						if (nak.location.start.Split(',')[1] == sign && nak.location.end.Split(',')[1] == sign)
						{
							if (plpos >= dmsToDec(Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[1]), 0) && plpos <= dmsToDec(Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[1]), 0))
							{
								return nak.ruler;
							}
						}
						else if (nak.location.start.Split(',')[1] == sign.ToString())
						{
							if (plpos >= dmsToDec(Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.start.Split(',')[0].Split('.')[1]), 0))
							{
								return nak.ruler;
							}
						}
						else if (nak.location.end.Split(',')[1] == sign.ToString())
						{
							if (plpos <= dmsToDec(Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[0]), Convert.ToInt32(nak.location.end.Split(',')[0].Split('.')[1]), 0))
							{
								return nak.ruler;
							}
						}
					}
				}
				return "";
			}
			catch (Exception eX)
			{
				return eX.Message;
			}
		}
		[HttpGet("GetTransits")]
		public ActionResult GetTransits(string mdas, string adas, string pdas, string pend)
		{
			try
			{
				_logger.LogInformation("GetTransits");
				mdas = mdas.ToLower();
				adas = adas.ToLower();
				pdas = pdas.ToLower();
				List<Transit> trans = new List<Transit>();
				DateTime today = DateTime.Now;
				DateTime eday = new DateTime(Convert.ToInt32(pend.Split('-')[2]), Convert.ToInt32(pend.Split('-')[1]), Convert.ToInt32(pend.Split('-')[0]));
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string nJ = string.Format(@"{0}\sublordz.json", astClient);
				string pN = string.Format(@"{0}\planet_stars.json", astClient);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string cnstls = string.Empty;
				string sssl = string.Empty;
				using (StreamReader r3 = new StreamReader(pN))
				{
					string json = r3.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json);
					var exists = data.Property(mdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(adas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(pdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					cnstls = cnstls.Remove(cnstls.Length - 1).Trim();
				}
				using (StreamReader r2 = new StreamReader(nJ))
				{
					string json2 = r2.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json2);
					string sF = string.Format(@"{0}\ayan-kp.json", astClient);
					string ayan = string.Empty;
					using (StreamReader r = new StreamReader(sF))
					{
						string jsa = r.ReadToEnd();
						dynamic ayans = JsonConvert.DeserializeObject(jsa);
						ayan = ayans[today.Year.ToString()].ToString();
					}
					while (today <= eday)
					{
						//string tday = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
						//calcStar(tday);
						//JsonResult json1 = (JsonResult)Birthstar(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute));
						string latlng = "17.23|78.29";
						string timezone = "India Standard Time";
						Horoscope mHoro = new Horoscope();
						uint u1 = Convert.ToUInt32(today.Day);
						uint u2 = Convert.ToUInt32(today.Month);
						int i3 = Convert.ToInt32(today.Year);
						uint u4 = 5;//Convert.ToUInt32(today.Hour);
						uint u5 = 0;//Convert.ToUInt32(today.Minute);
						uint u6 = 0;
						double u7 = Convert.ToDouble(latlng.Split('|')[0]);
						double u8 = Convert.ToDouble(latlng.Split('|')[1]);
						mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, timezone, true, ayan);
						mHoro.calc_planets_pos(true, astClient);
						int rpos = 0;
						foreach (string sign in signs)
						{
							rpos++;
							if (mHoro.planetsPos.ContainsKey(sign))
							{
								var pls = mHoro.planetsPos[sign].Split('|');
								//var ePls = '';
								//var mnode = '';
								for (var k = 0; k < pls.Length; k++)
								{
									if (pls[k].Split(' ')[1] == "MEAN_NODE")
									{
										var kpos = rpos + 6;
										if (kpos > 12) kpos = (kpos - 12);
										//var mn = i + 11;
										//if (mn > 15) mn -= 15;
										if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
										{
											var eP = mHoro.planetsPos[signs[kpos - 1]];
											mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
										}
										else
										{
											mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
										}
										// plPos[sign] = ePls;
										mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
									}
								}
							}
						}
						sssl = getSSSL2(cnstls, mHoro);
						if (sssl != string.Empty)
						{
							//string[] keys = { sssl };
							foreach (string key in sssl.Split(','))
							{
								try
								{
									string lords = key.Split('|')[0];
									Transit transit = new Transit
									{
										date = string.Format("{0}-{1}-{2},{3}", today.Day, today.Month, today.Year, key.Split('|')[1].Split('-')[2]),
										signL = lords.Split('-')[0],
										starL = lords.Split('-')[1],
										subL = lords.Split('-')[2],
										star = key.Split('|')[1].Split('-')[0],
										sign = key.Split('|')[1].Split('-')[1]
									};
									trans.Add(transit);
								}
								catch (Exception eX)
								{
									Console.WriteLine(eX.Message);
								}
							}
						}
						else
						{
							Transit transit = new Transit
							{
								date = string.Format("{0}-{1}-{2}", today.Day, today.Month, today.Year),
								signL = "",
								starL = "",
								subL = "",
								star = "",
								sign = ""
							};
							trans.Add(transit);
						}


						//Dictionary<string, bool> zvisits = new Dictionary<string,bool>();
						//zvisits["ar"] = false;
						//zvisits["ta"] = false;
						//zvisits["ge"] = false;
						//zvisits["cn"] = false;
						//zvisits["le"] = false;
						//zvisits["vi"] = false;
						//zvisits["li"] = false;
						//zvisits["sc"] = false;
						//zvisits["sa"] = false;
						//zvisits["cp"] = false;
						//zvisits["aq"] = false;
						//zvisits["pi"] = false;
						//string[] keys = {mdas + "-" + adas + "-" + pdas, mdas + "-" + pdas + "-" + adas, adas + "-" + mdas + "-" + pdas,adas + "-" + pdas + "-" + mdas,pdas + "-" + mdas + "-" + adas,pdas + "-" + adas + "-" + mdas};
						// bool btran = false;
						//foreach(string key in keys) {
						//    var exists = data.Property(key);
						//    if(exists != null) {
						//        string per = exists.Value.ToString();
						//        string deg = per.Split('|')[0];
						//        //if(mHoro.planetsPos.ContainsKey(per.Split('|')[1]) && zvisits[per.Split('|')[1]] == false) {
						//        if (mHoro.planetsPos.ContainsKey(per.Split('|')[1]))
						//        {
						//            string planetpos = "";
						//            foreach(string plpos in mHoro.planetsPos[per.Split('|')[1]].Split('|')) {
						//                string pl = plpos.Split(' ')[1];
						//                if (pl != "Ur" && pl != "Pl" && pl != "me" && pl != "os" && pl != "Ne" && pl != "AC" && pl != "TRUE_NODE") {  //consider only true planets
						//                    int st_sm = Convert.ToInt32(deg.Split('-')[0].Split('.')[2]);
						//                    int st_em = Convert.ToInt32(deg.Split('-')[1].Split('.')[1]);
						//                    double sl_b = Convert.ToInt32(deg.Split('-')[0].Split('.')[0])*60 + Convert.ToInt32(deg.Split('-')[0].Split('.')[1]) + ((st_sm > 0) ? st_sm/60 : 0);
						//                    double sl_e = Convert.ToInt32(deg.Split('-')[1].Split('.')[0]) * 60 + Convert.ToInt32(deg.Split('-')[1].Split('.')[1]) + ((st_em > 0) ? st_em / 60 : 0);
						//                    double ppos = (zstart[per.Split('|')[1]] + Convert.ToInt32(plpos.Split(' ')[0].Split('.')[0])) * 60 + ((plpos.Split(' ')[0].Split('.').Length > 1) ? ((plpos.Split(' ')[0].Split('.')[1].Trim() != string.Empty) ? Convert.ToInt32(plpos.Split(' ')[0].Split('.')[1]) : 0) : 0);
						//                    if(ppos >= sl_b && ppos <= sl_e) {
						//                        string star = calcStar(float.Parse(plpos.Split(' ')[0]), per.Split('|')[1]);
						//                        planetpos += string.Format("{0}", plpos.Split(' ')[0]);//, star, per.Split('|')[1]);
						//                        Transit transit = new Transit
						//                        {
						//                            date = string.Format("{0}-{1}-{2},{3}", today.Day, today.Month, today.Year, plpos),
						//                            signL = key.Split('-')[0],
						//                            starL = key.Split('-')[1],
						//                            subL = key.Split('-')[2],
						//                            star = star,
						//                            sign = per.Split('|')[1]
						//                        };
						//                        trans.Add(transit);
						//                        btran = true;
						//                    }
						//                }
						//            }

						//            zvisits[per.Split('|')[1]] = true;

						//        }
						//    }
						//}
						//if (!btran)
						//{
						//    Transit transit = new Transit
						//    {
						//        date = string.Format("{0}-{1}-{2}", today.Day, today.Month, today.Year),
						//        signL = "",
						//        starL = "",
						//        subL = "",
						//        star = "",
						//        sign = ""
						//    };
						//    trans.Add(transit);

						//}
						today = today.AddDays(1);
					}
				}
				return new JsonResult(trans.ToList());
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetDashTrans")]
		public ActionResult GetDashTrans(string mdas, string adas, string pdas, string pend)
		{
			try
			{
				_logger.LogInformation("GetDashTrans");
				mdas = mdas.ToLower();
				adas = adas.ToLower();
				pdas = pdas.ToLower();
				List<Transit2> trans = new List<Transit2>();
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = DateTime.Now;
				DateTime eday = new DateTime(Convert.ToInt32(pend.Split('-')[2]), Convert.ToInt32(pend.Split('-')[1]), Convert.ToInt32(pend.Split('-')[0]));
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string nJ = string.Format(@"{0}\sublordz.json", astClient);
				string pN = string.Format(@"{0}\planet_stars.json", astClient);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string cnstls = string.Empty;
				string sssl = string.Empty;
				using (StreamReader r3 = new StreamReader(pN))
				{
					string json = r3.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json);
					var exists = data.Property(mdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(adas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(pdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					cnstls = cnstls.Remove(cnstls.Length - 1).Trim();
				}
				using (StreamReader r2 = new StreamReader(nJ))
				{
					string json2 = r2.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json2);
					string sF = string.Format(@"{0}\ayan-kp.json", astClient);
					string ayan = string.Empty;
					using (StreamReader r = new StreamReader(sF))
					{
						string jsa = r.ReadToEnd();
						dynamic ayans = JsonConvert.DeserializeObject(jsa);
						while (today <= eday)
						{
							ayan = ayans[today.Year.ToString()].ToString();
							//string tday = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
							//calcStar(tday);
							//JsonResult json1 = (JsonResult)Birthstar(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute));
							string latlng = "17.23|78.29";
							string timezone = "India Standard Time";
							Horoscope mHoro = new Horoscope();
							uint u1 = Convert.ToUInt32(today.Day);
							uint u2 = Convert.ToUInt32(today.Month);
							int i3 = Convert.ToInt32(today.Year);
							uint u4 = 5;//Convert.ToUInt32(today.Hour);
							uint u5 = 0;//Convert.ToUInt32(today.Minute);
							uint u6 = 0;
							double u7 = Convert.ToDouble(latlng.Split('|')[0]);
							double u8 = Convert.ToDouble(latlng.Split('|')[1]);
							ayan = Ayanmsa.Calc((int)u1, (int)u2, i3, AYANMSAS.KPNEW);
							mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, timezone, true, ayan);
							mHoro.calc_planets_pos(true, astClient);
							int rpos = 0;
							foreach (string sign in signs)
							{
								rpos++;
								if (mHoro.planetsPos.ContainsKey(sign))
								{
									var pls = mHoro.planetsPos[sign].Split('|');
									//var ePls = '';
									//var mnode = '';
									for (var k = 0; k < pls.Length; k++)
									{
										if (pls[k].Split(' ')[1] == "MEAN_NODE")
										{
											var kpos = rpos + 6;
											if (kpos > 12) kpos = (kpos - 12);
											//var mn = i + 11;
											//if (mn > 15) mn -= 15;
											if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
											{
												var eP = mHoro.planetsPos[signs[kpos - 1]];
												mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
											}
											else
											{
												mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
											}
											// plPos[sign] = ePls;
											mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
										}
									}
								}
							}
							sssl = getSSSL2(cnstls, mHoro);
							if (sssl != string.Empty)
							{
								try
								{
									Transit2 transit = new Transit2
									{
										date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today),//string.Format("{0}-{1}-{2},{3}", today.Day, today.Month, today.Year, key.Split('|')[1].Split('-')[2]),
										sssl = sssl
									};
									trans.Add(transit);
								}
								catch (Exception eX)
								{
									Console.WriteLine(eX.Message);
								}
							}
							else
							{
								Transit2 transit = new Transit2
								{
									date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today),
									sssl = ""
								};
								trans.Add(transit);
							}
							today = today.AddDays(1);
						}
					}
				}
				return new JsonResult(trans.ToList());
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetDashTransEx")]
		public async Task<List<Transit2>> GetDashTransEx(string mdas, string adas, string pdas, string pend, string latlng, string timezone, int ayanid)
		{
			_logger.LogInformation("GetDashTransEx");
			List<Transit2> trans = new List<Transit2>();
			try
			{
				string tz = TZConvert.IanaToWindows(timezone);
				mdas = mdas.ToLower();
				adas = adas.ToLower();
				pdas = pdas.ToLower();
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = DateTime.Now;
				DateTime eday = new DateTime(Convert.ToInt32(pend.Split('-')[2]), Convert.ToInt32(pend.Split('-')[1]), Convert.ToInt32(pend.Split('-')[0]));
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string nJ = string.Format(@"{0}\sublordz.json", astClient);
				string pN = string.Format(@"{0}\planet_stars.json", astClient);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				string[] ras = { "ar|M|Mars", "ta|F|Venus", "ge|D|Mercury", "cn|M|Moon", "le|F|Sun", "vi|D|Mercury", "li|M|Venus", "sc|F|Mars", "sa|D|Jupiter", "cp|M|Saturn", "aq|F|Saturn", "pi|D|Jupiter" };
				Dictionary<string, string> dctRAS = new Dictionary<string, string>();
				dctRAS["ar"] = "Mars";
				dctRAS["ta"] = "Venus";
				dctRAS["ge"] = "Mercury";
				dctRAS["cn"] = "Moon";
				dctRAS["le"] = "Sun";
				dctRAS["vi"] = "Mercury";
				dctRAS["li"] = "Venus";
				dctRAS["sc"] = "Mars";
				dctRAS["sa"] = "Jupiter";
				dctRAS["cp"] = "Saturn";
				dctRAS["aq"] = "Saturn";
				dctRAS["pi"] = "Jupiter";
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				Dictionary<DayOfWeek, string> dctRUP = new Dictionary<DayOfWeek, string>();
				dctRUP[DayOfWeek.Sunday] = "Sun";
				dctRUP[DayOfWeek.Monday] = "Moon";
				dctRUP[DayOfWeek.Tuesday] = "Mars";
				dctRUP[DayOfWeek.Wednesday] = "Mercury";
				dctRUP[DayOfWeek.Thursday] = "Jupiter";
				dctRUP[DayOfWeek.Friday] = "Venus";
				dctRUP[DayOfWeek.Saturday] = "Saturn";
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string cnstls = string.Empty;
				string sssl = string.Empty;
				bool once = true;
				string mdras = string.Empty, mdnak = string.Empty, mdsub = string.Empty;
				string rupll = string.Empty, rupml = string.Empty;
				using (StreamReader r3 = new StreamReader(pN))
				{
					string json = r3.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json);
					var exists = data.Property(mdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(adas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(pdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					cnstls = cnstls.Remove(cnstls.Length - 1).Trim();
				}
				using (StreamReader r2 = new StreamReader(nJ))
				{
					string json2 = r2.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json2);
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					while (today <= eday)
					{
						int d = today.Day;
						int m = today.Month;
						int y = today.Year;
						int hou = 5;//Convert.ToUInt32(today.Hour);
						int min = 0;//Convert.ToUInt32(today.Minute);
						int sec = 0;
						double lat = Convert.ToDouble(latlng.Split('|')[0]);
						double lng = Convert.ToDouble(latlng.Split('|')[1]);
						string ayan = string.Empty;
						if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
						{
							ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
						}
						Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, 0, ayan, ayanid, true);
						int rpos = 0;
						foreach (string sign in signs)
						{
							rpos++;
							if (mHoro.planetsPos.ContainsKey(sign))
							{
								var pls = mHoro.planetsPos[sign].Split('|');
								for (var k = 0; k < pls.Length; k++)
								{
									if (pls[k].Split(' ')[1] == "MEAN_NODE")
									{
										var kpos = rpos + 6;
										if (kpos > 12) kpos = (kpos - 12);
										if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
										{
											var eP = mHoro.planetsPos[signs[kpos - 1]];
											mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
										}
										else
										{
											mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
										}
										mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
										if (mdas.Substring(0, 2).ToLower() == "ra")
										{
											mdras = sign;
											double dval = dmsToDec(Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[2]));
											mdnak = calcStar(dval, mdras).Split('|')[0];
											mdsub = getSUBZ(mdras, zstart[mdras] + dval);
										}
										else if (mdas.Substring(0, 2).ToLower() == "ke")
										{
											mdras = signs[kpos - 1];
											double dval = dmsToDec(Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[2]));
											mdnak = calcStar(dval, mdras).Split('|')[0];
											mdsub = getSUBZ(mdras, zstart[mdras] + dval);
										}
									}
									else if (pls[k].Split(' ')[1].ToLower() == mdas.Substring(0, 2).ToLower())
									{
										mdras = sign;
										double dval = dmsToDec(Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[2]));
										mdnak = calcStar(dval, sign).Split('|')[0];
										mdsub = getSUBZ(sign, zstart[sign] + dval);
									}
									else if (pls[k].Split(' ')[1] == "Mo")
									{
										rupml = dctRAS[sign];
									}
									else if (pls[k].Split(' ')[1] == "AC")
									{
										rupll = dctRAS[sign];
									}
								}
							}
						}
						sssl = getSSSL2(cnstls, mHoro);
						if (sssl != string.Empty)
						{
							try
							{

								//string tdy = String.Format(ci, "{0:ddd MMM dd,yyyy}", today);
								Transit2 transit = new Transit2
								{
									date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today),//string.Format("{0}-{1}-{2},{3}", today.Day, today.Month, today.Year, key.Split('|')[1].Split('-')[2]),
									sssl = sssl,
									mdras = mdras,
									mdnak = mdnak,
									mdsub = mdsub,
									rupdl = dctRUP[today.DayOfWeek],
									rupll = rupll,
									rupml = rupml
								};
								trans.Add(transit);
							}
							catch (Exception eX)
							{
								Console.WriteLine(eX.Message);
							}
						}
						else
						{
							Transit2 transit = new Transit2
							{
								date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today),
								sssl = "",
								mdras = mdras,
								mdnak = mdnak,
								mdsub = mdsub,
								rupdl = dctRUP[today.DayOfWeek],
								rupll = rupll,
								rupml = rupml
							};
							trans.Add(transit);
						}
						today = today.AddDays(1);
					}
					//}
				}
				return trans;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				Transit2 transit = new Transit2
				{
					date = "",
					sssl = string.Format("ERROR: {0} LINE {1}", eX.Message, line),
					mdras = "",
					mdnak = "",
					mdsub = "",
					rupdl = "",
					rupll = "",
					rupml = ""
				};
				trans.Add(transit);

				return trans;
			}
		}
		public async Task<List<Transit2>> GetDashTransEx2(string mdas, string adas, string pdas, string pend, string latlng, string timezone, int ayanid)
		{
			_logger.LogInformation("GetDashTransEx2");
			List<Transit2> trans = new List<Transit2>();
			try
			{
				string tz = TZConvert.IanaToWindows(timezone);
				mdas = mdas.ToLower();
				adas = adas.ToLower();
				pdas = pdas.ToLower();
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = DateTime.Now;
				DateTime eday = new DateTime(Convert.ToInt32(pend.Split('-')[2]), Convert.ToInt32(pend.Split('-')[1]), Convert.ToInt32(pend.Split('-')[0]));
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string nJ = string.Format(@"{0}\sublordz.json", astClient);
				string pN = string.Format(@"{0}\planet_stars.json", astClient);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string cnstls = string.Empty;
				string sssl = string.Empty;
				bool once = true;
				string mdras = string.Empty, mdnak = string.Empty, mdsub = string.Empty;
				using (StreamReader r3 = new StreamReader(pN))
				{
					string json = r3.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json);
					var exists = data.Property(mdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(adas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(pdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					cnstls = cnstls.Remove(cnstls.Length - 1).Trim();
				}
				using (StreamReader r2 = new StreamReader(nJ))
				{
					string json2 = r2.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json2);
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					while (today <= eday)
					{
						int d = today.Day;
						int m = today.Month;
						int y = today.Year;
						int hou = 5;//Convert.ToUInt32(today.Hour);
						int min = 0;//Convert.ToUInt32(today.Minute);
						int sec = 0;
						double lat = Convert.ToDouble(latlng.Split('|')[0]);
						double lng = Convert.ToDouble(latlng.Split('|')[1]);
						string ayan = string.Empty;
						if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
						{
							ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
						}
						Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, 0, ayan, ayanid, true);
						int rpos = 0;
						foreach (string sign in signs)
						{
							rpos++;
							if (mHoro.planetsPos.ContainsKey(sign))
							{
								var pls = mHoro.planetsPos[sign].Split('|');
								for (var k = 0; k < pls.Length; k++)
								{
									if (pls[k].Split(' ')[1] == "MEAN_NODE")
									{
										var kpos = rpos + 6;
										if (kpos > 12) kpos = (kpos - 12);
										if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
										{
											var eP = mHoro.planetsPos[signs[kpos - 1]];
											mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
										}
										else
										{
											mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
										}
										mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
										if (mdas.Substring(0, 2).ToLower() == "ra")
										{
											mdras = sign;
											double dval = dmsToDec(Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[2]));
											mdnak = calcStar(dval, mdras).Split('|')[0];
											mdsub = getSUBZ(mdras, zstart[mdras] + dval);
										}
										else if (mdas.Substring(0, 2).ToLower() == "ke")
										{
											mdras = signs[kpos - 1];
											double dval = dmsToDec(Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[2]));
											mdnak = calcStar(dval, mdras).Split('|')[0];
											mdsub = getSUBZ(mdras, zstart[mdras] + dval);
										}
									}
									else if (pls[k].Split(' ')[1].ToLower() == mdas.Substring(0, 2).ToLower())
									{
										mdras = sign;
										double dval = dmsToDec(Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[2]));
										mdnak = calcStar(dval, sign).Split('|')[0];
										mdsub = getSUBZ(sign, zstart[sign] + dval);
									}
								}
							}
						}
						sssl = getSSSL2(cnstls, mHoro);
						if (sssl != string.Empty)
						{
							try
							{
								Transit2 transit = new Transit2
								{
									date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today),//string.Format("{0}-{1}-{2},{3}", today.Day, today.Month, today.Year, key.Split('|')[1].Split('-')[2]),
									sssl = sssl,
									mdras = mdras,
									mdnak = mdnak,
									mdsub = mdsub
								};
								trans.Add(transit);
							}
							catch (Exception eX)
							{
								Console.WriteLine(eX.Message);
							}
						}
						else
						{
							Transit2 transit = new Transit2
							{
								date = String.Format(ci, "{0:ddd MMM dd,yyyy}", today),
								sssl = "",
								mdras = mdras,
								mdnak = mdnak,
								mdsub = mdsub
							};
							trans.Add(transit);
						}
						today = today.AddDays(1);
					}
					//}
				}
				return trans;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				Transit2 transit = new Transit2
				{
					date = "",
					sssl = string.Format("ERROR: {0} LINE {1}", eX.Message, line),
					mdras = "",
					mdnak = "",
					mdsub = ""
				};
				trans.Add(transit);

				return trans;
			}
		}
		[HttpGet("GetDashTrans4DT")]
		public ActionResult GetDashTrans4DT(string dob, string tob, string mdas, string adas, string pdas, string pend, string latlng, string timezone, int ayanid)
		{
			try
			{
				_logger.LogInformation("GetDashTrans4DT");
				string tz = TZConvert.IanaToWindows(timezone);
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				mdas = mdas.ToLower();
				adas = adas.ToLower();
				pdas = pdas.ToLower();
				List<Transit2> trans = new List<Transit2>();
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				DateTime today = new DateTime(i3, (int)u2, (int)u1, (int)u4, (int)u5, (int)u6);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string nJ = string.Format(@"{0}\sublordz.json", astClient);
				string pN = string.Format(@"{0}\planet_stars.json", astClient);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string[] ras = { "ar|M|Mars", "ta|F|Venus", "ge|D|Mercury", "cn|M|Moon", "le|F|Sun", "vi|D|Mercury", "li|M|Venus", "sc|F|Mars", "sa|D|Jupiter", "cp|M|Saturn", "aq|F|Saturn", "pi|D|Jupiter" };
				Dictionary<string, string> dctRAS = new Dictionary<string, string>();
				dctRAS["ar"] = "Mars";
				dctRAS["ta"] = "Venus";
				dctRAS["ge"] = "Mercury";
				dctRAS["cn"] = "Moon";
				dctRAS["le"] = "Sun";
				dctRAS["vi"] = "Mercury";
				dctRAS["li"] = "Venus";
				dctRAS["sc"] = "Mars";
				dctRAS["sa"] = "Jupiter";
				dctRAS["cp"] = "Saturn";
				dctRAS["aq"] = "Saturn";
				dctRAS["pi"] = "Jupiter";
				Dictionary<DayOfWeek, string> dctRUP = new Dictionary<DayOfWeek, string>();
				dctRUP[DayOfWeek.Sunday] = "Sun";
				dctRUP[DayOfWeek.Monday] = "Moon";
				dctRUP[DayOfWeek.Tuesday] = "Mars";
				dctRUP[DayOfWeek.Wednesday] = "Mercury";
				dctRUP[DayOfWeek.Thursday] = "Jupiter";
				dctRUP[DayOfWeek.Friday] = "Venus";
				dctRUP[DayOfWeek.Saturday] = "Saturn";
				string cnstls = string.Empty;
				string sssl = string.Empty;
				bool once = true;
				string mdras = string.Empty, mdnak = string.Empty, mdsub = string.Empty, rupml = string.Empty, rupll = string.Empty;
				using (StreamReader r3 = new StreamReader(pN))
				{
					string json = r3.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json);
					var exists = data.Property(mdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(adas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					exists = data.Property(pdas);
					if (exists != null)
					{
						cnstls += string.Format("{0}|", exists.Value.ToString().Trim());
					}
					cnstls = cnstls.Remove(cnstls.Length - 1).Trim();
				}
				using (StreamReader r2 = new StreamReader(nJ))
				{
					string json2 = r2.ReadToEnd();
					var data = (JObject)JsonConvert.DeserializeObject(json2);
					Horoscope mHoro = new Horoscope();
					double u7 = Convert.ToDouble(latlng.Split('|')[0]);
					double u8 = Convert.ToDouble(latlng.Split('|')[1]);
					string ayan = string.Empty;
					if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
					{
						TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
						TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
						double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
						ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
					}
					mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					mHoro.calc_houses();
					mHoro.calc_planets_pos(true, astClient);
					int rpos = 0;
					foreach (string sign in signs)
					{
						rpos++;
						if (mHoro.planetsPos.ContainsKey(sign))
						{
							var pls = mHoro.planetsPos[sign].Split('|');
							for (var k = 0; k < pls.Length; k++)
							{
								if (pls[k].Split(' ')[1] == "MEAN_NODE")
								{
									var kpos = rpos + 6;
									if (kpos > 12) kpos = (kpos - 12);
									if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
									{
										var eP = mHoro.planetsPos[signs[kpos - 1]];
										mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									else
									{
										mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								}
								else if (pls[k].Split(' ')[1].ToLower() == mdas.Substring(0, 2).ToLower())
								{
									mdras = sign;
									double dval = dmsToDec(Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls[k].Split(' ')[0].Split('.')[2]));
									mdnak = calcStar(dval, sign).Split('|')[0];
									mdsub = getSUBZ(sign, zstart[sign] + dval);
								}
								else if (pls[k].Split(' ')[1] == "Mo")
								{
									rupml = dctRAS[sign];
								}
								else if (pls[k].Split(' ')[1] == "AC")
								{
									rupll = dctRAS[sign];
								}
							}
						}
					}
					sssl = getSSSL2(cnstls, mHoro);
					if (sssl != string.Empty)
					{
						try
						{
							Transit2 transit = new Transit2
							{
								date = String.Format(ci, "{0:ddd MMM dd,yyyy HH:mm:ss}", today),//string.Format("{0}-{1}-{2},{3}", today.Day, today.Month, today.Year, key.Split('|')[1].Split('-')[2]),
								sssl = sssl,
								mdras = mdras,
								mdnak = mdnak,
								mdsub = mdsub,
								rupdl = dctRUP[today.DayOfWeek],
								rupll = rupll,
								rupml = rupml
							};
							trans.Add(transit);
						}
						catch (Exception eX)
						{
							Console.WriteLine(eX.Message);
						}
					}
					else
					{
						Transit2 transit = new Transit2
						{
							date = String.Format(ci, "{0:ddd MMM dd,yyyy HH:mm:ss}", today),
							sssl = "",
							mdras = mdras,
							mdnak = mdnak,
							mdsub = mdsub
						};
						trans.Add(transit);
					}
					today = today.AddDays(1);
					//}
					//}
				}
				return new JsonResult(trans.ToList());
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		public string getSUBZ(string sign, double pos)
		{
			//double ppos = (pos.ToString().IndexOf('.') != -1) ? Convert.ToInt32(pos.ToString().Split('.')[0]) * 60 + Convert.ToInt32(pos.ToString().Split('.')[1]) : pos * 60;
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string nJ = string.Format(@"{0}\sublordz.json", astClient);
			using (StreamReader r = new StreamReader(nJ))
			{
				string json = r.ReadToEnd();
				Dictionary<string, string> items = JsonConvert.DeserializeObject<Dictionary<string, string>>(json);
				string subz = string.Empty;
				foreach (var item in items)
				{
					if (item.Value.Split('|')[1] == sign)
					{
						string sd = item.Value.Split('|')[0].Split('-')[0];
						string ed = item.Value.Split('|')[0].Split('-')[1];
						//double sm = Convert.ToInt32(sd.Split('.')[0]) * 60 + Convert.ToInt32(sd.Split('.')[1]) + Convert.ToInt32(sd.Split('.')[2]) / 60;
						//double em = Convert.ToInt32(ed.Split('.')[0]) * 60 + Convert.ToInt32(ed.Split('.')[1]) + Convert.ToInt32(ed.Split('.')[2]) / 60;
						double sm = dmsToDec(Convert.ToInt32(sd.Split('.')[0]), Convert.ToInt32(sd.Split('.')[1]), Convert.ToInt32(sd.Split('.')[2]));
						double em = dmsToDec(Convert.ToInt32(ed.Split('.')[0]), Convert.ToInt32(ed.Split('.')[1]), Convert.ToInt32(ed.Split('.')[2]));
						if (pos > sm && pos <= em) { subz = item.Key; break; }
					}
				}
				return subz;// (subz.Length > 0) ? subz.Remove(subz.Length - 1).Trim() : subz;
			}
		}
		public string getSUB(double pos)
		{
			//double ppos = (pos.ToString().IndexOf('.') != -1) ? Convert.ToInt32(pos.ToString().Split('.')[0]) * 60 + Convert.ToInt32(pos.ToString().Split('.')[1]) : pos * 60;
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string nJ = string.Format(@"{0}\sublordz.json", astClient);
			using (StreamReader r = new StreamReader(nJ))
			{
				string json = r.ReadToEnd();
				Dictionary<string, string> items = JsonConvert.DeserializeObject<Dictionary<string, string>>(json);
				string subz = string.Empty;
				foreach (var item in items)
				{
					//					if (item.Value.Split('|')[1] == sign)
					//					{
					string sd = item.Value.Split('|')[0].Split('-')[0];
					string ed = item.Value.Split('|')[0].Split('-')[1];
					//double sm = Convert.ToInt32(sd.Split('.')[0]) * 60 + Convert.ToInt32(sd.Split('.')[1]) + Convert.ToInt32(sd.Split('.')[2]) / 60;
					//double em = Convert.ToInt32(ed.Split('.')[0]) * 60 + Convert.ToInt32(ed.Split('.')[1]) + Convert.ToInt32(ed.Split('.')[2]) / 60;
					double sm = dmsToDec(Convert.ToInt32(sd.Split('.')[0]), Convert.ToInt32(sd.Split('.')[1]), Convert.ToInt32(sd.Split('.')[2]));
					double em = dmsToDec(Convert.ToInt32(ed.Split('.')[0]), Convert.ToInt32(ed.Split('.')[1]), Convert.ToInt32(ed.Split('.')[2]));
					if (pos >= sm && pos < em) subz += item.Key + ",";
					//					}
				}
				return (subz.Length > 0) ? subz.Remove(subz.Length - 1).Trim() : subz;
			}
		}

		public string getSSSL2(string naks, Horoscope mH)
		{
			string sssl = string.Empty;
			Dictionary<string, int> zstart = new Dictionary<string, int>();
			zstart["ar"] = 0;
			zstart["ta"] = 30;
			zstart["ge"] = 60;
			zstart["cn"] = 90;
			zstart["le"] = 120;
			zstart["vi"] = 150;
			zstart["li"] = 180;
			zstart["sc"] = 210;
			zstart["sa"] = 240;
			zstart["cp"] = 270;
			zstart["aq"] = 300;
			zstart["pi"] = 330;
			foreach (var ppos in mH.planetsPos)
			{
				foreach (string pl in ppos.Value.Split('|'))
				{
					string pn = pl.Split(' ')[1];
					if (pn != "Ur" && pn != "Pl" && pn != "me" && pn != "os" && pn != "Ne" && pn != "AC" && pn != "TRUE_NODE")
					{  //consider only true planets
						string[] pds = pl.Split(' ')[0].Split('.');
						string star = calcStar(dmsToDec(Convert.ToInt32(pds[0]), Convert.ToInt32(pds[1]), Convert.ToInt32(pds[2])), ppos.Key).Split('|')[0];
						if (star.Trim() == string.Empty) continue;
						if (naks.Contains(star))
						{
							double zd = dmsToDec(Convert.ToInt32(zstart[ppos.Key]), 0, 0);
							string[] p = pl.Split(' ')[0].TrimEnd('.').Split('.');
							double plpos = zd + dmsToDec(Convert.ToInt32(p[0]), Convert.ToInt32(p[1]), Convert.ToInt32(p[2]));
							sssl += string.Format("{0}|{1}-{2}-{3},", getSUBZ(ppos.Key, plpos), star, ppos.Key, pl);
						}
					}
				}
			}
			return (sssl.Length > 0) ? sssl.Remove(sssl.Length - 1).Trim() : sssl;
		}
		[HttpGet("GetYogas")]
		public async Task<ActionResult> GetYogas(string dob, string tob, string latlng, string timezone, string lang)
		{
			_logger.LogInformation(string.Format("GetYogas-{0}", dob));
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			Dictionary<string, string> dctConjYogs = new Dictionary<string, string>();
			Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string yogf = string.Empty, astf = string.Empty;
				switch (lang)
				{
					case "ta":
						yogf = string.Format(@"{0}\ta-yogs.json", astClient);
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						break;
					case "en":
						yogf = string.Format(@"{0}\en-yogs.json", astClient);
						astf = string.Format(@"{0}\en-dct.json", astClient);
						break;
					case "te":
						yogf = string.Format(@"{0}\te-yogs.json", astClient);
						astf = string.Format(@"{0}\te-dct.json", astClient);
						break;
					case "hi":
						yogf = string.Format(@"{0}\hi-yogs.json", astClient);
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						break;
					default:
						yogf = string.Format(@"{0}\en-yogs.json", astClient);
						astf = string.Format(@"{0}\en-dct.json", astClient);
						break;
				}
				string yogs = string.Empty, adct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdr = new StreamReader(yogf, Encoding.UTF8))
				{
					yogs = rdr.ReadToEnd();
					adct = rdra.ReadToEnd();
				}
				Dictionary<string, string> dctAst;
				Dictionary<string, string> dctSrc;
				try
				{
					dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
					dctSrc = JsonConvert.DeserializeObject<Dictionary<string, string>>(yogs);
				}
				catch (JsonException eX)
				{
					var st = new StackTrace(eX, true);
					var frame = st.GetFrame(st.FrameCount - 1);
					var line = frame.GetFileLineNumber();
					dctYogs.Add("eX.Message", string.Format("{0} {1}", eX.Message, line.ToString()));
					return new JsonResult(dctYogs);
				}
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				string tz = TZConvert.IanaToWindows(timezone);
				//Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				//mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, tz, false, string.Empty);
				Horoscope mHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, tz, false, string.Empty);
					mHoro.calc_planets_pos(false, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					//mHoro.calc_houses();
					return mHoro;
				});

				Dictionary<string, string> plpos = mHoro.planetsPos;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				//mHoro.calc_planets_pos(false, astClient);
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				bool ves = false, vos = false;
				string ves_pl = string.Empty, vos_pl = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
							else
							{
								if (pl.Split(' ')[1] != "Mo" && pl.Split(' ')[1] != "MEAN_NODE" && pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
									switch (r2)
									{
										case 2: ////veshi yoga
											ves = true;
											ves_pl += pl.Split(' ')[1] + ",";
											break;
										case 12: //voshi yoga
											vos = true;
											vos_pl += pl.Split(' ')[1] + ",";
											break;
										default:
											break;
									}
								}
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				if (ves && vos)
				{//ubhachari yoga
					bool ben = false, mel = false;
					foreach (string pl in ves_pl.Split(','))
					{
						switch (pl)
						{
							case "Mo":
							case "Me":
							case "Ve":
							case "Ju":
								ben = true;
								break;
							case "Su":
							case "Ma":
							case "Sa":
							case "Ra":
							case "Ke":
								mel = true;
								break;
							default:
								break;
						}
					}
					foreach (string pl in vos_pl.Split(','))
					{
						switch (pl)
						{
							case "Mo":
							case "Me":
							case "Ve":
							case "Ju":
								ben = true;
								break;
							case "Su":
							case "Ma":
							case "Sa":
							case "Ra":
							case "Ke":
								mel = true;
								break;
							default:
								break;
						}
					}
					try
					{
						string pls_ves = string.Empty;
						foreach (string pl in ves_pl.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_ves += dctAst[dctPlNames[pl]] + ",";
						}
						string pls_vos = string.Empty;
						foreach (string pl in vos_pl.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_vos += dctAst[dctPlNames[pl]] + ",";
						}

						dctYogs["UBAHAYACHARI-YOGA"] = string.Format("{0} {1}", dctSrc["UBAHAYACHARI-YOGA"].Replace("[1]", pls_ves.TrimEnd(',')).Replace("[2]", pls_vos.TrimEnd(',')).Replace("[3]", dctAst["UBAHAYACHARI-YOGA"]), (ben == true) ? dctSrc["UBAHAYACHARI-YOGA,BEN"] : dctSrc["UBAHAYACHARI-YOGA,MEL"]);
					}
					catch
					{
						dctYogs["UBAHAYACHARI-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (ves)
				{
					bool ben = false, mel = false;
					foreach (string pl in ves_pl.Split(','))
					{
						switch (pl)
						{
							case "Mo":
							case "Me":
							case "Ve":
							case "Ju":
								ben = true;
								break;
							case "Su":
							case "Ma":
							case "Sa":
							case "Ra":
							case "Ke":
								mel = true;
								break;
							default:
								break;
						}
					}
					try
					{
						string pls_ves = string.Empty;
						foreach (string pl in ves_pl.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_ves += dctAst[dctPlNames[pl]] + ",";
						}
						dctYogs["VESHI-YOGA"] = string.Format("{0} {1}", dctSrc["VESHI-YOGA"].Replace("[1]", pls_ves.TrimEnd(',')).Replace("[2]", dctAst["VESHI-YOGA"]), (mel == true) ? dctSrc["VESHI-YOGA,MEL"] : "");
					}
					catch
					{
						dctYogs["VESHI-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (vos)
				{
					bool ben = false, mel = false, fben = false;
					foreach (string pl in vos_pl.Split(','))
					{
						fben = isBEN(pl);
						switch (pl)
						{
							case "Mo":
							case "Me":
							case "Ve":
							case "Ju":
								ben = true;
								break;
							case "Su":
							case "Ma":
							case "Sa":
							case "Ra":
							case "Ke":
								mel = true;
								break;
							default:
								break;
						}
					}
					if (isBEN("Su") && fben)
					{
						try
						{
							string pls_vos = string.Empty;
							foreach (string pl in vos_pl.Split(','))
							{
								if (pl.Trim() != string.Empty)
									pls_vos += dctAst[dctPlNames[pl]] + ",";
							}
							dctYogs["VOSHI-YOGA"] = string.Format("{0} {1}", dctSrc["VOSHI-YOGA"].Replace("[1]", pls_vos.TrimEnd(',')).Replace("[2]", dctAst["VOSHI-YOGA"]), (mel == true) ? dctSrc["VOSHI-YOGA,MEL"] : "");
						}
						catch
						{
							dctYogs["VOSHI-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				int nsank = 0;
				bool bsnp = false;
				bool banp = false;
				bool ben_8 = false, ben_7 = false, ben_6 = false, mel_8 = false, mel_6 = false;
				string snp_pls = string.Empty;
				string anp_pls = string.Empty;
				bool bcan_kem = false;
				bool malefic_in_ken = false;
				bool benefic_in_ken = false;
				bool one7shak = true;
				bool four10pak = true;
				int one_hou_pl = 0;
				int four_hou_pl = 0;
				int svn_hou_pl = 0;
				int ten_hou_pl = 0;

				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plpos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plpos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
								if (pHou.code != "MEAN_NODE" && pHou.code != "Ke" && pHou.code != "Ur" && pHou.code != "Pl" && pHou.code != "me" && pHou.code != "os" && pHou.code != "Ne" && pHou.code != "AC" && pHou.code != "TRUE_NODE")
								{  //consider only true  
									bpl = true;
									pkey += pHou.code + "-";
									if (pHou.hno != 1 || pHou.hno != 7) one7shak = false;
									if (pHou.hno != 4 || pHou.hno != 10) four10pak = false;
									switch (pHou.hno)
									{
										case 1:
											one_hou_pl++;
											break;
										case 4:
											four_hou_pl++;
											break;
										case 7:
											svn_hou_pl++;
											break;
										case 10:
											ten_hou_pl++;
											break;
										default:
											break;
									}
									if (pHou.lordship == "KEN" || pHou.lordship == "BOTH") //panchmaha purusha yoga applies only if in kendra
									{
										if (pHou.code == "Sa" || pHou.code == "Me" || pHou.code == "Su")
										{
											malefic_in_ken = true;
										}
										else if (pHou.code == "Ju" || pHou.code == "Ma" || pHou.code == "Ve" || pHou.code == "Mo")
										{
											benefic_in_ken = true;
										}
									}
									if (pHou.code != "Su" && pHou.code != "Mo")
									{
										int mhno = Convert.ToInt32(ra.Split('|')[4]);
										switch (mhno)
										{
											case 2:
												bsnp = true;
												snp_pls += pHou.name + ",";
												break;
											case 12:
												banp = true;
												anp_pls += pHou.name + ",";
												break;
											default:
												break;
										}
									}
									if (pHou.code == "Su" || pHou.code == "Ma" || pHou.code == "Sa")
									{ //malefics
										if (pHou.hno == 4 || pHou.mhno == 4)
										{ //4th house from lagna or moon occupied by a malefic
										}
										else if (pHou.hno == 6)
										{
											mel_6 = true;
										}
										else if (pHou.hno == 8)
										{
											mel_8 = true;
										}
									}
									if (pHou.mhno == 1 || pHou.mhno == 4 || pHou.mhno == 7 || pHou.mhno == 10)
									{ //precense of planets in kendra house from moon which cancels kemadrupha yoga
										bcan_kem = true;
									}
									if (pHou.code == "Me" || pHou.code == "Ve" || pHou.code == "Ju")
									{
										if (pHou.hno == 7) ben_7 = true;
										else if (pHou.hno == 8) ben_8 = true;

									}
								}
							}
						}
						if (bpl) nsank++;
					}
					if (pkey.Split('-').Count() - 1 > 1) //yoga2 formed through conjunction
					{
						pkey = pkey.Remove(pkey.Length - 1).Trim();
						pkey = sortPls(pkey);
						string pckey = string.Format("{0}|{1}", pkey, ra.Split('|')[3]);
						// dctConjYogs.Adpckey, "");
						string yog = (dctSrc.ContainsKey(pckey) == true) ? dctSrc[pckey] : (dctSrc.ContainsKey(pkey) == true) ? dctSrc[pkey] : "";
						if (yog != string.Empty)
						{
							string plk = string.Empty;
							foreach (string key in pkey.Split('-'))
								plk += dctPlNames[key] + "-";
							plk = plk.Remove(plk.Length - 1).Trim();
							dctYogs[plk] = yog;
						}
					}
				}
				foreach (var plh in dctPlHou)
				{
					PlanetHouse pHou = plh.Value;
					switch (pHou.code)
					{
						case "Ma":
							if (pHou.sign == "cp" || pHou.sign == "ar" || pHou.sign == "sc")
							{
								//mars is exalted or own sign
								if (asc_h.Split('|')[1] != "D")
								{ //ruchaka yoga
									bool bsun = false, bmoon = false;
									if (dctPlHou["Su"].hno == pHou.hno)
									{//sun is combined
										bsun = true;
									}
									if (dctPlHou["Mo"].hno == pHou.hno)
									{//moon is combined
										bmoon = true;
									}
									try
									{
										dctYogs["RUCHAKA-YOGA"] = string.Format("{0} {1}", dctSrc["RUCHAKA-YOGA"].Replace("[1]", (pHou.sign == "cp") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["RUCHAKA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["RUCHAKA-YOGA,SU"] : (bmoon) ? dctSrc["RUCHAKA-YOGA,MO"] : "");
									}
									catch
									{
										dctYogs["RUCHAKA-YOGA"] = "Internal error. Please report to help desk.";
									}
								}
							}
							break;
						case "Me":
							if (pHou.sign == "vi" || pHou.sign == "ta")
							{  //mercury exalted or own sign
								bool bsun = false, bmoon = false;
								if (dctPlHou["Su"].hno == pHou.hno)
								{//sun is combined
									bsun = true;
								}
								if (dctPlHou["Mo"].hno == pHou.hno)
								{//moon is combined
									bmoon = true;
								}
								if (asc_h.Split('|')[1] == "D")
								{ //bhadra yoga
									try
									{
										dctYogs["BHADRA-YOGA"] = string.Format("{0} {1}", dctSrc["BHADRA-YOGA"].Replace("[1]", (pHou.sign == "vi") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["BHADRA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["BHADRA-YOGA,SU"] : (bmoon) ? dctSrc["BHADRA-YOGA,MO"] : "");
									}
									catch
									{
										dctYogs["BHADRA-YOGA"] = "Internal error. Please report to help desk.";
									}

								}
							}
							break;
						case "Ju":
							if (pHou.sign == "cn" || pHou.sign == "sa" || pHou.sign == "pi")
							{ //jupiter exalted or own sign
								bool bsun = false, bmoon = false;
								if (dctPlHou["Su"].hno == pHou.hno)
								{//sun is combined
									bsun = true;
								}
								if (dctPlHou["Mo"].hno == pHou.hno)
								{//moon is combined
									bmoon = true;
								}
								if (asc_h.Split('|')[1] == "D" || asc_h.Split('|')[1] == "M")
								{ //hamsa yoga
									try
									{
										dctYogs["HAMSA-YOGA"] = string.Format("{0} {1}", dctSrc["HAMSA-YOGA"].Replace("[1]", (pHou.sign == "cn") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["HAMSA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["HAMSA-YOGA,SU"] : (bmoon) ? dctSrc["HAMSA-YOGA,MO"] : "");
									}
									catch
									{
										dctYogs["HAMSA-YOGA"] = "Internal error. Please report to help desk.";
									}
								}
							}
							break;
						case "Ve":
							if (pHou.sign == "pi" || pHou.sign == "ta" || pHou.sign == "li")
							{ //venus exalted or own sign
								bool bsun = false, bmoon = false;
								if (dctPlHou["Su"].hno == pHou.hno)
								{//sun is combined
									bsun = true;
								}
								if (dctPlHou["Mo"].hno == pHou.hno)
								{//moon is combined
									bmoon = true;
								}
								//malva yoga
								try
								{
									dctYogs["MALVA-YOGA"] = string.Format("{0} {1}", dctSrc["MALVA-YOGA"].Replace("[1]", (pHou.sign == "pi") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["MALVA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["MALVA-YOGA,SU"] : (bmoon) ? dctSrc["MALVA-YOGA,MO"] : "");
								}
								catch
								{
									dctYogs["MALVA-YOGA"] = "Internal error. Please report to help desk.";
								}

							}
							break;
						case "Sa":
							if (pHou.sign == "li" || pHou.sign == "cp" || pHou.sign == "aq")
							{ //saturn exalted or own sign
								bool bsun = false, bmoon = false;
								if (dctPlHou["Su"].hno == pHou.hno)
								{//sun is combined
									bsun = true;
								}
								if (dctPlHou["Mo"].hno == pHou.hno)
								{//moon is combined
									bmoon = true;
								}
								if (asc_h.Split('|')[1] != "D")
								{ //shasha yoga
									try
									{
										dctYogs["SHASHA-YOGA"] = string.Format("{0}", dctSrc["SHASHA-YOGA"].Replace("[1]", (pHou.sign == "li") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["SHASHA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["SHASHA-YOGA,SU"] : (bmoon) ? dctSrc["SHASHA-YOGA,MO"] : "");
									}
									catch (Exception eX)
									{
										dctYogs["SHASHA-YOGA"] = eX.Message; //"Internal error. Please report to help desk.";
									}
								}
							}
							break;
						default:
							break;
					}
				}

				//GAJkesari yoga
				if (((dctPlHou["Mo"].sign != "sc") && (dctPlHou["Ju"].sign != "cp")) && ((dctPlHou["Mo"].lordship == "KEN" || dctPlHou["Mo"].lordship == "BOTH") && (dctPlHou["Ju"].lordship == "KEN" || dctPlHou["Ju"].lordship == "BOTH")))
				{ //moon & jupiter in kendra
					int kno = (dctPlHou["Ju"].mhno - dctPlHou["Mo"].mhno) + 1;
					switch (kno)
					{
						case 1:
							try
							{
								dctYogs["GAJKESARI-YOGA"] = string.Format("{0} {1}", dctSrc["GAJKESARI-YOGA"].Replace("[1]", kno.ToString()).Replace("[2]", dctAst["GAJKESARI-YOGA"]), dctSrc["GAJKESARI-YOGA|1"]);
							}
							catch
							{
								dctYogs["GAJKESARI-YOGA"] = "Internal error. Please report to help desk.";
							}
							break;
						case 4:
						case 7:
						case 10:
							try
							{
								dctYogs["GAJKESARI-YOGA,JU"] = string.Format("{0} {1}", dctSrc["GAJKESARI-YOGA,JU"].Replace("[1]", kno.ToString()).Replace("[2]", dctAst["GAJKESARI-YOGA"]), dctSrc["GAJKESARI-YOGA,JU|" + kno.ToString()]);
							}
							catch
							{
								dctYogs["GAJKESARI-YOGA,JU"] = "Internal error. Please report to help desk.";
							}
							break;
						default:
							break;
					}
				}
				//chandra yogas
				int ncad = 0;
				string adh_p = string.Empty, ad_h = string.Empty;
				switch (dctPlHou["Me"].mhno)
				{
					case 6:
					case 7:
					case 8:
						adh_p += "Me" + ",";
						ad_h += dctPlHou["Me"].mhno.ToString() + ",";
						ncad++;
						break;
					default:
						break;
				}
				switch (dctPlHou["Ju"].mhno)
				{
					case 6:
					case 7:
					case 8:
						adh_p += "Ju" + ",";
						ad_h += dctPlHou["Ju"].mhno.ToString() + ",";
						ncad++;
						break;
					default:
						break;
				}
				switch (dctPlHou["Ve"].mhno)
				{
					case 6:
					case 7:
					case 8:
						adh_p += "Ve" + ",";
						ad_h += dctPlHou["Ve"].mhno.ToString() + ",";
						ncad++;
						break;
					default:
						break;
				}
				if (ncad > 1)
				{ //minmum for adhi yoga
					try
					{
						string pls_adh = string.Empty;
						foreach (string pl in adh_p.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_adh += dctAst[dctPlNames[pl]] + ",";
						}
						dctYogs["ADHI-YOGA"] = string.Format("{0}", dctSrc["ADHI-YOGA"].Replace("[1]", pls_adh.TrimEnd(',')).Replace("[2]", ad_h.TrimEnd(',')).Replace("[3]", dctAst["ADHI-YOGA"]));
					}
					catch
					{
						dctYogs["ADHI-YOGA"] = "Internal error. Please report to help desk.";
					}

				}
				if (bsnp && banp)
				{  //durudhara yoga
					try
					{
						string pls_snp = string.Empty;
						foreach (string pl in snp_pls.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_snp += dctAst[pl] + ",";
						}
						string pls_anp = string.Empty;
						foreach (string pl in anp_pls.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_anp += dctAst[pl] + ",";
						}
						dctYogs["DURUDHARA-YOGA"] = string.Format("{0}", dctSrc["DURUDHARA-YOGA"].Replace("[1]", (pls_snp + pls_anp).TrimEnd(',')).Replace("[2]", anp_pls).Replace("[3]", dctAst["DURUDHARA-YOGA"]));
					}
					catch
					{
						dctYogs["DURUDHARA-YOGA"] = "Internal error. Please report to help desk.";
					}

				}
				else if (bsnp)
				{ //sunapa yoga
					try
					{
						string pls_snp = string.Empty;
						foreach (string pl in snp_pls.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_snp += dctAst[pl] + ",";
						}
						dctYogs["SUNAPHA-YOGA"] = string.Format("{0}", dctSrc["SUNAPHA-YOGA"].Replace("[1]", pls_snp.TrimEnd(',')).Replace("[2]", dctAst["SUNAPHA-YOGA"]));
					}
					catch
					{
						dctYogs["SUNAPHA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (banp)
				{ //anapa yoga
					string pls_anp = string.Empty;
					try
					{
						foreach (string pl in anp_pls.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_anp += dctAst[pl] + ",";
						}
						dctYogs["ANAPHA-YOGA"] = string.Format("{0}", dctSrc["ANAPHA-YOGA"].Replace("[1]", pls_anp.TrimEnd(',')).Replace("[2]", dctAst["ANAPHA-YOGA"]));
					}
					catch (Exception eX)
					{
						dctYogs["ANAPHA-YOGA"] = string.Format("{0} {1}", eX.Message, pls_anp);//"Internal error. Please report to help desk.";
					}
				}
				else
				{ //kemadruma yoga
				}
				//moon is in rahu ketu axis
				bool bmon_in_rk = false;
				if (dctPlHou["MEAN_NODE"].hno + 6 > 12)
				{
					if (dctPlHou["Mo"].hno > dctPlHou["MEAN_NODE"].hno)
					{
						bmon_in_rk = true;
					}
					else if (dctPlHou["Mo"].hno < 12 - (dctPlHou["MEAN_NODE"].hno + 6))
					{
						bmon_in_rk = true;
					}
					else if (dctPlHou["Mo"].hno == 12 - (dctPlHou["MEAN_NODE"].hno + 6))
					{
						if (dctPlHou["MEAN_NODE"].pos > dctPlHou["Mo"].pos)
						{
							bmon_in_rk = true;
						}
					}
					else if (dctPlHou["Mo"].hno == dctPlHou["MEAN_NODE"].hno)
					{
						if (dctPlHou["MEAN_NODE"].pos < dctPlHou["Mo"].pos)
						{
							bmon_in_rk = true;
						}
					}
				}
				else if (dctPlHou["Mo"].hno < (dctPlHou["MEAN_NODE"].hno + 6))
				{
					bmon_in_rk = true;
				}
				else if (dctPlHou["Mo"].hno == dctPlHou["MEAN_NODE"].hno)
				{
					if (dctPlHou["MEAN_NODE"].pos < dctPlHou["Mo"].pos)
					{
						bmon_in_rk = true;
					}
				}
				else if (dctPlHou["Mo"].hno == (dctPlHou["MEAN_NODE"].hno + 6))
				{
					if (dctPlHou["MEAN_NODE"].pos > dctPlHou["Mo"].pos)
					{
						bmon_in_rk = true;
					}
				}
				bool bmon_inmic = false;
				string inmic_asp = string.Empty;
				if (dctPlHou["Mo"].sign == "li" && (dctPlHou["Mo"].houselord == "Me" || dctPlHou["Mo"].houselord == "Ve" || dctPlHou["Mo"].houselord == "Sa"))
				{ //moon is in varga of inimical planet
					if ((dctPlHou["Mo"].hno == dctPlHou["Me"].hno) || (dctPlHou["Mo"].hno == dctPlHou["Ve"].hno) || (dctPlHou["Mo"].hno == dctPlHou["Sa"].hno))
					{ //moon aspected by inimical planet
						bmon_inmic = true;
						if (dctPlHou["Mo"].hno == dctPlHou["Me"].hno)
						{
							inmic_asp += string.Format("{0},", dctAst["Mercury"]);
						}
						if (dctPlHou["Mo"].hno == dctPlHou["Ve"].hno)
						{
							inmic_asp += string.Format("{0},", dctAst["Venus"]);
						}
						if (dctPlHou["Mo"].hno == dctPlHou["Sa"].hno)
						{
							inmic_asp += string.Format("{0},", dctAst["Saturn"]);
						}
					}
					int svn = (dctPlHou["Me"].hno + 6) > 12 ? (dctPlHou["Me"].hno + 6) - 12 : (dctPlHou["Me"].hno + 6);
					if (dctPlHou["Mo"].hno == svn)
					{//7th aspect from mercury
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Mercury"]);
					}
					svn = (dctPlHou["Me"].hno + 6) > 12 ? (dctPlHou["Ve"].hno + 6) - 12 : (dctPlHou["Ve"].hno + 6);
					if (dctPlHou["Mo"].hno == svn)
					{//7th aspect from venus
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Venus"]);
					}
					svn = (dctPlHou["Sa"].hno + 6) > 12 ? (dctPlHou["Sa"].hno + 6) - 12 : (dctPlHou["Sa"].hno + 6);
					if (dctPlHou["Mo"].hno == svn)
					{//7th aspect from saturn
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Saturn"]);
					}
					int sat_asp = (dctPlHou["Sa"].hno + 2) > 12 ? (dctPlHou["Sa"].hno + 2) - 12 : (dctPlHou["Sa"].hno + 2);
					if (dctPlHou["Mo"].hno == sat_asp)
					{//3rd aspect from saturn
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Saturn"]);
					}
					sat_asp = (dctPlHou["Sa"].hno + 9) > 12 ? (dctPlHou["Sa"].hno + 9) - 12 : (dctPlHou["Sa"].hno + 9);
					if (dctPlHou["Mo"].hno == sat_asp)
					{//10th aspect from saturn
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Saturn"]);
					}
				}
				//cancellation of kemadruma yoga
				if (dctPlHou["Mo"].lordship == "KEN" || dctPlHou["Mo"].lordship == "BOTH")
				{//moon in kendra
					if (dctPlHou["Ju"].hno == dctPlHou["Mo"].hno)
					{
						bcan_kem = true;
					}
					else
					{
						int ju_asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
						if (dctPlHou["Mo"].hno == ju_asp)
						{//7th aspect from jupiter
							bcan_kem = true;
						}
						ju_asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
						if (dctPlHou["Mo"].hno == ju_asp)
						{//5th aspect from jupiter
							bcan_kem = true;
						}
						ju_asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
						if (dctPlHou["Mo"].hno == ju_asp)
						{//9th aspect from jupiter
							bcan_kem = true;
						}
					}

				}
				if (dctPlHou["Ve"].lordship == "KEN" || dctPlHou["Ve"].lordship == "BOTH")
				{//venus in kendra
					if (dctPlHou["Ju"].hno == dctPlHou["Ve"].hno)
					{
						bcan_kem = true;
					}
					else
					{
						int ju_asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
						if (dctPlHou["Ve"].hno == ju_asp)
						{//7th aspect from jupiter
							bcan_kem = true;
						}
						ju_asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
						if (dctPlHou["Ve"].hno == ju_asp)
						{//5th aspect from jupiter
							bcan_kem = true;
						}
						ju_asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
						if (dctPlHou["Ve"].hno == ju_asp)
						{//9th aspect from jupiter
							bcan_kem = true;
						}
					}
				}
				if (dctPlHou["Mo"].sign == "ta" && dctPlHou["Mo"].hno == 10)
				{ //exalted moon in 10th house
					int asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
					if (dctPlHou["Mo"].hno == asp)
					{//7th aspect from jupiter
						bcan_kem = true;
					}
					asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
					if (dctPlHou["Mo"].hno == asp)
					{//5th aspect from jupiter
						bcan_kem = true;
					}
					asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
					if (dctPlHou["Mo"].hno == asp)
					{//9th aspect from jupiter
						bcan_kem = true;
					}
					if (dctPlHou["Mo"].hno == dctPlHou["Ju"].hno)
					{//1st aspect from jupiter
					}
					asp = (dctPlHou["Me"].hno + 6) > 12 ? (dctPlHou["Me"].hno + 6) - 12 : (dctPlHou["Me"].hno + 6);
					if (dctPlHou["Mo"].hno == asp)
					{//7th aspect from mercury
						bcan_kem = true;
					}
					if (dctPlHou["Mo"].hno == dctPlHou["Me"].hno)
					{//1st aspect from mercury
						bcan_kem = true;
					}
					asp = (dctPlHou["Ve"].hno + 6) > 12 ? (dctPlHou["Ve"].hno + 6) - 12 : (dctPlHou["Ve"].hno + 6);
					if (dctPlHou["Mo"].hno == asp)
					{//7th aspect from venus
						bcan_kem = true;
					}
					if (dctPlHou["Mo"].hno == dctPlHou["Ve"].hno)
					{//1st aspect from venus
						bcan_kem = true;
					}
				}
				if (dctPlHou["Ma"].sign == "li" && dctPlHou["Ju"].sign == "li" && dctPlHou["Su"].sign == "vi" && dctPlHou["Mo"].sign == "ta")
				{//mars & jupiter in libra, sun in virgo & moon in taurus
					bcan_kem = true;
				}
				//vasuman yoga
				//bool mer_upa = false, ven_upa = false, jup_upa = false;
				int nupa = 0;
				string upa_pl = string.Empty;
				if (dctPlHou["Me"].mhno == 3 || dctPlHou["Me"].mhno == 6 || dctPlHou["Me"].mhno == 10 || dctPlHou["Me"].mhno == 11)
				{//mercury occupy upachaya house from moon
				 //mer_upa = true;
					nupa++;
					upa_pl += "Mercury,";
				}
				if (dctPlHou["Ve"].mhno == 3 || dctPlHou["Ve"].mhno == 6 || dctPlHou["Ve"].mhno == 10 || dctPlHou["Ve"].mhno == 11)
				{//venus occupy upachaya house from moon
				 //ven_upa = true;
					nupa++;
					upa_pl += "Venus,";
				}
				if (dctPlHou["Ju"].mhno == 3 || dctPlHou["Ju"].mhno == 6 || dctPlHou["Ju"].mhno == 10 || dctPlHou["Ju"].mhno == 11)
				{//jupiter occupy upachaya house from moon
				 //jup_upa = true;
					nupa++;
					upa_pl += "Jupiter";
				}
				if (nupa == 3)
				{ //all benefics in upachaya houses
					try
					{
						dctYogs["VASUMAN-YOGA,UPA"] = string.Format("{0}", dctSrc["VASUMAN-YOGA,UPA"].Replace("[1]", dctAst["UPACHAYA-HOUSES"]).Replace("[2]", dctAst["VASUMAN-YOGA"]));
					}
					catch
					{
						dctYogs["VASUMAN-YOGA,UPA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (nupa == 2)
				{
					try
					{
						dctYogs["VASUMAN-YOGA"] = string.Format("{0}", dctSrc["VASUMAN-YOGA"].Replace("[1]", upa_pl).Replace("[2]", dctAst["UPACHAYA-HOUSES"]).Replace("[3]", dctAst["VASUMAN-YOGA"]));
					}
					catch
					{
						dctYogs["VASUMAN-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				//chandra dhana yogas
				string cdn = string.Empty;
				string c = string.Empty;
				switch (dctPlHou["Mo"].shno)
				{
					case 1:
					case 4:
					case 7:
					case 10:
						//moon in kendra from sun
						break;
					case 2:
					case 5:
					case 8:
					case 11:
						//moon in panapahara from sun
						break;
					case 3:
					case 6:
					case 9:
					case 12:
						try
						{
							dctYogs["UTTAMADI-YOGA"] = string.Format("{0}", dctSrc["UTTAMADI-YOGA"].Replace("[1]", dctPlHou["Mo"].shno.ToString()).Replace("[2]", dctAst["APOKLIMA-HOUSE"]).Replace("[3]", dctAst["UTTAMADI-YOGA"]).Replace("[4]", dctSrc["UTTAMADI-YOGA," + dctPlHou["Mo"].shno.ToString()]));
						}
						catch
						{
							dctYogs["UTTAMADI-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					default:
						break;
				}
				if (dctPlHou["Ju"].mhno == 6 || dctPlHou["Ju"].mhno == 8 || dctPlHou["Ju"].mhno == 12)
				{//shakata yoga
					if (ncad < 1 && (dctPlHou["Ju"].lordship != "KEN" || dctPlHou["Ju"].lordship != "BOTH"))
					{
						switch (dctPlHou["Ju"].mhno)
						{
							case 6:
							case 8:
							case 12:
								try
								{
									dctYogs["SHAKATA-YOGA,JU"] = string.Format("{0} {1}", dctSrc["SHAKATA-YOGA"].Replace("[1]", dctPlHou["Jo"].shno.ToString()).Replace("[2]", dctAst["SHAKATA-YOGA"]), dctSrc[string.Format("SHAKATA-YOGA,JU|{0}", dctPlHou["Jo"].shno)]);
								}
								catch
								{
									dctYogs["SHAKATA-YOGA,JU"] = "Internal error. Please report to help desk.";
								}
								break;
							default:
								break;
						}
					}
				}
				else if (one7shak)
				{//all planents occupying lagna and 7th house
					try
					{
						dctYogs["SHAKATA-YOGA,1-7"] = string.Format("{0}", dctSrc["SHAKATA-YOGA,1-7"].Replace("[1]", dctAst["SHAKATA-YOGA"]));
					}
					catch
					{
						dctYogs["SHAKATA-YOGA,1-7"] = "Internal error. Please report to help desk.";
					}
				}
				else if (four10pak)
				{//all planents occupying 4th and 10th house
					try
					{
						dctYogs["PAKSHI-YOGA"] = string.Format("{0}", dctSrc["PAKSHI-YOGA"].Replace("[1]", dctAst["PAKSHI-YOGA"]));
					}
					catch
					{
						dctYogs["PAKSHI-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				switch (nsank)
				{
					case 7:
						//veena yoga
						try
						{
							dctYogs["VEENA-YOGA"] = string.Format("{0}", dctSrc["VEENA-YOGA"].Replace("[1]", dctAst["VEENA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["VEENA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 6:
						//daama yoga
						try
						{
							dctYogs["DAAMA-YOGA"] = string.Format("{0}", dctSrc["DAAMA-YOGA"].Replace("[1]", dctAst["DAAMA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["DAAMA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 5:
						//paasha yoga
						try
						{
							dctYogs["PAASHA-YOGA"] = string.Format("{0}", dctSrc["PAASHA-YOGA"].Replace("[1]", dctAst["PAASHA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["PAASHA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 4:
						//keedara yoga
						try
						{
							dctYogs["KEDHARA-YOGA"] = string.Format("{0}", dctSrc["KEDHARA-YOGA"].Replace("[1]", dctAst["KEDHARA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["KEDHARA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 3:
						//shoola yoga
						try
						{
							dctYogs["SHOOLA-YOGA"] = string.Format("{0}", dctSrc["SHOOLA-YOGA"].Replace("[1]", dctAst["SHOOLA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["SHOOLA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 2:
						//yuga yoga
						try
						{
							dctYogs["YUGA-YOGA"] = string.Format("{0}", dctSrc["YUGA-YOGA"].Replace("[1]", dctAst["YUGA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["YUGA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 1:
						//gola yoga
						dctYogs["GOLA-YOGA"] = string.Format("{0}", dctSrc["GOLA-YOGA"].Replace("[1]", dctAst["GOLA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						break;
					default:
						break;

				}
				//Aashraya yogas
				if (msgn_pls != string.Empty && fsgn_pls == string.Empty && dsgn_pls == string.Empty)
				{//rajju yoga
					try
					{
						dctYogs["RAJJU-YOGA"] = string.Format("{0}", dctSrc["RAJJU-YOGA"].Replace("[1]", dctAst["RAJJU-YOGA"]).Replace("[2]", dctAst["AASHRAYA-YOGAS"]));
					}
					catch
					{
						dctYogs["RAJJU-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (msgn_pls == string.Empty && fsgn_pls != string.Empty && dsgn_pls == string.Empty)
				{//musala yoga
					try
					{
						dctYogs["MUSALA-YOGA"] = string.Format("{0}", dctSrc["MUSALA-YOGA"].Replace("[1]", dctAst["MUSALA-YOGA"]).Replace("[2]", dctAst["AASHRAYA-YOGAS"]));
					}
					catch
					{
						dctYogs["MUSALA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (msgn_pls == string.Empty && fsgn_pls == string.Empty && dsgn_pls != string.Empty)
				{//nala yoga
					try
					{
						dctYogs["NALA-YOGA"] = string.Format("{0}", dctSrc["NALA-YOGA"].Replace("[1]", dctAst["NALA-YOGA"]).Replace("[2]", dctAst["AASHRAYA-YOGAS"]));
					}
					catch
					{
						dctYogs["NALA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				//Dala yogas
				if (dctPlHou["Ju"].lordship == "KEN" && dctPlHou["Me"].lordship == "KEN" && dctPlHou["Ve"].lordship == "KEN" && dctPlHou["Mo"].lordship == "KEN")
				{//maala yoga
					if (!malefic_in_ken)
					{
						try
						{
							dctYogs["MAALA-YOGA"] = string.Format("{0}", dctSrc["MAALA-YOGA"].Replace("[1]", dctAst["MAALA-YOGA"]).Replace("[2]", dctAst["DALA-YOGAS"]));
						}
						catch
						{
							dctYogs["MAALA-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				else if (dctPlHou["Sa"].lordship == "KEN" && dctPlHou["Su"].lordship == "KEN" && dctPlHou["Ma"].lordship == "Ke" && dctPlHou["Ra"].lordship == "KEN" && dctPlHou["Ke"].lordship == "KEN")
				{//sarpa yoga
					if (!benefic_in_ken)
					{
						try
						{
							dctYogs["SARPA-YOGA"] = string.Format("{0}", dctSrc["SARPA-YOGA"].Replace("[1]", dctAst["SARPA-YOGA"]).Replace("[2]", dctAst["DALA-YOGAS"]));
						}
						catch
						{
							dctYogs["SARPA-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				bool gad = false;
				string gad_1h = string.Empty, gad_2h = string.Empty;
				if (one_hou_pl + four_hou_pl == 7)
				{
					//all planets in 1 & 4 gada yoga
					gad = true;
					gad_1h = dctAst["LAGNA"];
					gad_2h = "2";
				}
				else if (four_hou_pl + svn_hou_pl == 7)
				{
					gad = true;
					gad_1h = "4";
					gad_2h = "7";
				}
				else if (svn_hou_pl + ten_hou_pl == 7)
				{
					gad = true;
					gad_1h = "7";
					gad_2h = "10";
				}
				else if (ten_hou_pl + one_hou_pl == 7)
				{
					gad = true;
					gad_1h = "10";
					gad_2h = dctAst["LAGNA"];
				}
				if (gad)
				{
					try
					{
						//gada yoga
						dctYogs["GADA-YOGA"] = string.Format("{0}", dctSrc["GADA-YOGA"].Replace("[1]", gad_1h).Replace("[2]", gad_2h).Replace("[3]", dctAst["GADA-YOGA"]));
					}
					catch
					{
						dctYogs["GADA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				string ken_hou = string.Empty;
				string tri_hou = string.Empty;
				string lag_hou = string.Empty;
				string trin1_hou = string.Empty;
				string trin2_hou = string.Empty;
				string trin3_hou = string.Empty;
				string yupa_hou = string.Empty;
				string shara_hou = string.Empty;
				string shakti_hou = string.Empty;
				string danda_hou = string.Empty;
				string nauka_hou = string.Empty;
				string koota_hou = string.Empty;
				string chatra_hou = string.Empty;
				string danusta_hou = string.Empty;
				string achand_hou = string.Empty;
				string chakra_hou = string.Empty;
				string samudra_hou = string.Empty;
				bool bken = true, btri = true, blag = true, btrin = true, byupa = true, bshara = true, bshakti = true, bdanda = true, bnauka = true, bkoota = true, bchatra = true, bdanusta = true, bachand = true, bchakra = true, bsamudra = true;
				bool isAdj = false;
				//angular group
				string ben_1hou = string.Empty, ben_7hou = string.Empty, ben_8hou = string.Empty, ben_9hou = string.Empty, ben_10hou = string.Empty;
				//parivarthan yoga
				bool bheri = true;
				PlanetHouse p10L = dctPlHou[dctPlHou[hou10.Split('|')[2]].houselord];
				foreach (KeyValuePair<string, PlanetHouse> item in dctPlHou)
				{
					PlanetHouse pH = item.Value;
					if (pH.code == dctPlHou[pH.houselord].code)
					{//parivarthan/exchange yoga
						PlanetHouse pLL = dctPlHou[asc_h.Split('|')[2]];
						PlanetHouse p2L = dctPlHou[hou2.Split('|')[2]];
						PlanetHouse p4L = dctPlHou[hou4.Split('|')[2]];
						PlanetHouse p5L = dctPlHou[hou5.Split('|')[2]];
						PlanetHouse p7L = dctPlHou[hou7.Split('|')[2]];
						PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
						int maha_yog = -1;
						switch (pH.hno)
						{
							case 2:
							case 4:
							case 5:
							case 7:
							case 9:
							case 10:
							case 11:
								if ((pH.houselord == pLL.code) && (pH.hno == dctPlHou[pLL.houselord].hno))
								{//lagna lord xchange with 2,4,5,7,9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,1"] = string.Format("{0}", dctSrc["MAHA-YOGA,1"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,1"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2) && (pH.houselord == p2L.code) && (pH.hno == dctPlHou[p2L.houselord].hno))
								{//second lord xchange with 4,5,7,9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,2"] = string.Format("{0}", dctSrc["MAHA-YOGA,2"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,2"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4) && (pH.houselord == p4L.code) && (pH.hno == dctPlHou[p4L.houselord].hno))
								{//forth lord xchange with 4,5,7,9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,4"] = string.Format("{0}", dctSrc["MAHA-YOGA,4"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAhA-YOGA,4"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4 && pH.hno != 5) && (pH.houselord == p5L.code) && (pH.hno == dctPlHou[p5L.houselord].hno))
								{//fifth lord xchange with 7,9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,5"] = string.Format("{0}", dctSrc["MAHA-YOGA,5"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,5"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4 && pH.hno != 5 && pH.hno != 7) && (pH.houselord == p7L.code) && (pH.hno == dctPlHou[p7L.houselord].hno))
								{//seventh lord xchange with 9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,7"] = string.Format("{0}", dctSrc["MAHA-YOGA,7"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,7"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4 && pH.hno != 5 && pH.hno != 7 && pH.hno != 9) && (pH.houselord == p9L.code) && (pH.hno == dctPlHou[p9L.houselord].hno))
								{//ninth lord xchange with 10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,9"] = string.Format("{0}", dctSrc["MAHA-YOGA,9"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,9"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4 && pH.hno != 5 && pH.hno != 7 && pH.hno != 9 && pH.hno != 10) && (pH.houselord == p5L.code) && (pH.hno == dctPlHou[p5L.houselord].hno))
								{//tenth lord xchange with 11 lord
									try
									{
										dctYogs["MAHA-YOGA,10"] = string.Format("{0}", dctSrc["MAHA-YOGA,10"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,10"] = "Internal error. Please report to help desk.";
									}
								}
								break;
							default:
								break;
						}
						if ((pH.hno == 2 && dctPlHou[pH.houselord].hno == 9) || (pH.hno == 9 && dctPlHou[pH.houselord].hno == 2))
						{
							if ((pH.lordship == "KEN" || pH.lordship == "TRI" || pH.lordship == "BOTH") && (dctPlHou[pH.houselord].lordship == "KEN" || dctPlHou[pH.houselord].lordship == "TRI" || dctPlHou[pH.houselord].lordship == "BOTH"))
							{//khadga yoga
								try
								{
									dctYogs["KHADGA-YOGA"] = string.Format("{0}", dctSrc["KHADGA-YOGA"].Replace("[1]", dctAst[pH.lordship]).Replace("[2]", dctAst[pH.name]).Replace("[3]", dctAst[dctPlHou[pH.houselord].lordship]).Replace("[4]", dctAst[dctPlHou[pH.houselord].name]).Replace("[5]", dctAst["MAHA-YOGA"]));
								}
								catch
								{
									dctYogs["KHADGA-YOGA"] = "Internal error. Please report to help desk.";
								}
							}
						}
					}
					if (pH.lordship == "KEN")
					{
						ken_hou += pH.code + "," + pH.hno.ToString() + "|";
					}
					else if (pH.lordship != "BOTH")
					{
						bken = false;
					}
					if (pH.lordship == "TRI")
					{
						tri_hou += pH.code + "," + pH.hno.ToString() + "|";
					}
					else if (pH.lordship != "BOTH")
					{
						btri = false;
					}
					if (pH.lordship == "BOTH")
					{
						lag_hou += pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						blag = false;
					}
					if (pH.hno == 2 || pH.hno == 6 || pH.hno == 10)
					{
						trin1_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else if (pH.hno == 3 || pH.hno == 7 || pH.hno == 11)
					{
						trin2_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else if (pH.hno == 4 || pH.hno == 8 || pH.hno == 12)
					{
						trin3_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						btrin = false;
					}
					if (pH.hno > 0 && pH.hno < 5)
					{
						yupa_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						byupa = false;
					}
					if (pH.hno > 3 && pH.hno < 8)
					{
						shara_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bshara = false;
					}
					if (pH.hno > 6 && pH.hno < 11)
					{
						shakti_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bshakti = false;
					}
					if (pH.hno == 1 || (pH.hno > 9 && pH.hno < 13))
					{
						danda_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bdanda = false;
					}
					if (pH.hno > 0 && pH.hno < 8)
					{
						nauka_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bnauka = false;
					}
					if (pH.hno > 3 && pH.hno < 11)
					{
						koota_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bkoota = false;
					}
					if (pH.hno == 1 || (pH.hno > 6 && pH.hno < 13))
					{
						chatra_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bchatra = false;
					}
					if ((pH.hno > 0 && pH.hno < 5) || (pH.hno > 9 && pH.hno < 13))
					{
						danusta_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bdanusta = false;
					}
					if (pH.lordship != "KEN" || pH.lordship != "BOTH")
					{
						achand_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bachand = false;
					}
					if (pH.hno == 1 || pH.hno == 3 || pH.hno == 5 || pH.hno == 7 || pH.hno == 9 || pH.hno == 11)
					{
						chakra_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bchakra = false;
					}
					if (pH.hno == 2 || pH.hno == 4 || pH.hno == 6 || pH.hno == 8 || pH.hno == 10 || pH.hno == 12)
					{
						samudra_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bsamudra = false;
					}
					if (pH.hno == 1 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_1hou += pH.code + ",";
					}
					else if (pH.hno == 7 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_7hou += pH.code + ",";
					}
					else if (pH.hno == 8 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_8hou += pH.code + ",";
					}
					else if (pH.hno == 9 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_9hou += pH.code + ",";
					}
					else if (pH.hno == 10 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_10hou += pH.code + ",";
					}
					if (pH.hno != 1 && pH.hno != 2 && pH.hno != 7 && pH.hno != 12)
					{
						bheri = false;
					}
				}
				//ravi yogas
				if (ben_7 && ben_8)
				{//lagnadhi yoga
					bool bcan_lag = false;
					if (dctPlHou["Sa"].hno == 7 || dctPlHou["Sa"].hno == 8)
					{//saturn associates 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Sa"].hno + 6 == 7) || (dctPlHou["Sa"].hno + 6 == 8))
					{//saturn 7th aspect to 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Sa"].hno + 2 == 7) || (dctPlHou["Sa"].hno + 2 == 8))
					{//saturn 3rd aspect to 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Sa"].hno + 9 == 7) || (dctPlHou["Sa"].hno + 9 == 8))
					{//saturn 10th aspect to 7 or 8
						bcan_lag = true;
					}
					if (dctPlHou["Ma"].hno == 7 || dctPlHou["Ma"].hno == 8)
					{//mars associates 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Ma"].hno + 6 == 7) || (dctPlHou["Ma"].hno + 6 == 8))
					{//mars 7th aspect to 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Ma"].hno + 3 == 4) || (dctPlHou["Sa"].hno + 3 == 4))
					{//mars 4th aspect to 7 or 8
						bcan_lag = true;
					}
					if (dctPlHou["Su"].hno == 7 || dctPlHou["Su"].hno == 8)
					{//Sun associates 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Su"].hno + 6 == 7) || (dctPlHou["Su"].hno + 6 == 8))
					{//Sun 7th aspect to 7 or 8
						bcan_lag = true;
					}
					if (!bcan_lag)
					{
						try
						{
							dctYogs["LAGNADHI-YOGA"] = string.Format("{0}", dctSrc["LAGNADHI-YOGA"].Replace("[1]", ben_7hou).Replace("[2]", ben_8hou).Replace("[3]", dctAst["LAGNADHI-YOGA"]));
						}
						catch
						{
							dctYogs["LAGNADHI-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				if (bken)
				{
					bool kh1 = false, kh2 = false, kh3 = false, kh4 = false;
					bool kh1_isbenf = false, kh2_isbenf = false, kh3_isbenf = false, kh4_isbenf = false;
					string kh1_p = string.Empty, kh2_p = string.Empty, kh3_p = string.Empty, kh4_p = string.Empty;
					foreach (string kph in ken_hou.Split('|'))
					{
						//foreach (string ph in kph.Split(','))
						if (kph.Split(',')[0] != "Ra" && kph.Split(',')[0] != "Ke")
						{
							int h = Convert.ToInt32(kph.Split(',')[1]);
							switch (h)
							{
								case 1:
									kh1 = true;
									kh1_p += dctAst[dctPlNames[kph.Split(',')[0]]] + ',';
									if (kph.Split(',')[0] == "Ju" || kph.Split(',')[0] == "Ve" || kph.Split(',')[0] == "Me" || kph.Split(',')[0] == "Mo")
										kh1_isbenf = true;
									break;
								case 4:
									kh2 = true;
									kh2_p += dctAst[dctPlNames[kph.Split(',')[0]]] + ',';
									if (kph.Split(',')[0] == "Ju" || kph.Split(',')[0] == "Ve" || kph.Split(',')[0] == "Me" || kph.Split(',')[0] == "Mo")
										kh2_isbenf = true;
									break;
								case 7:
									kh3 = true;
									kh3_p += dctAst[dctPlNames[kph.Split(',')[0]]] + ',';
									if (kph.Split(',')[0] == "Ju" || kph.Split(',')[0] == "Ve" || kph.Split(',')[0] == "Me" || kph.Split(',')[0] == "Mo")
										kh3_isbenf = true;
									break;
								case 10:
									kh4 = true;
									kh4_p += dctAst[dctPlNames[kph.Split(',')[0]]] + ',';
									if (kph.Split(',')[0] == "Ju" || kph.Split(',')[0] == "Ve" || kph.Split(',')[0] == "Me" || kph.Split(',')[0] == "Mo")
										kh4_isbenf = true;
									break;
								default:
									break;
							}
						}
					}
					foreach (string lph in lag_hou.Split('|'))
					{
						if (lph.Split(',')[0] != "Ra" && lph.Split(',')[0] != "Ke")
						{
							int h = Convert.ToInt32(lph.Split(',')[1]);
							switch (h)
							{
								case 1:
									kh1 = true;
									kh1_p += dctAst[dctPlNames[lph.Split(',')[0]]] + ',';
									if (lph.Split(',')[0] == "Ju" || lph.Split(',')[0] == "Ve" || lph.Split(',')[0] == "Me" || lph.Split(',')[0] == "Mo")
										kh1_isbenf = true;
									break;
								default:
									break;
							}
						}
					}
					//if (bken)
					{
						//check if shak
						//if (kh1 && kh3 && kh2 == false && kh4 == false)
						//{
						//shakata yoga
						//}
						//if (kh3 && kh4 && kh1 == false && kh2 == false)
						//{
						//pakshi yoga
						//}
						//if ((kh1 && kh2  && kh3 == false && kh4 == false) || (kh3 && kh4  && kh1 == false && kh2 == false))
						//{
						//gada yoga
						//}
						if (kh1 && kh1_isbenf && kh3 && kh3_isbenf && kh2 && !kh2_isbenf && kh4 && !kh4_isbenf)
						{//vajra yoga
							try
							{
								dctYogs["VAJRA-YOGA,1"] = string.Format("{0}", dctSrc["VAJRA-YOGA,1"].Replace("[1]", kh1_p + kh3_p).Replace("[2]", kh2_p + kh4_p).Replace("[3]", dctAst["VAJRA-YOGA"]));
							}
							catch
							{
								dctYogs["VAJRA-YOGA,1"] = "Internal error. Please report to help desk.";
							}
						}
						else if (kh1 && !kh1_isbenf && kh3 && !kh3_isbenf && kh2 && kh2_isbenf && kh4 && kh4_isbenf)
						{//vajra yoga
							try
							{
								dctYogs["VAJRA-YOGA,2"] = string.Format("{0}", dctSrc["VAJRA-YOGA,2"].Replace("[1]", kh1_p + kh3_p).Replace("[2]", kh2_p + kh4_p).Replace("[3]", dctAst["VAJRA-YOGA"]));
							}
							catch
							{
								dctYogs["VAJRA-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}
						else if (kh1 && kh3 && kh2 && kh4)
						{//kamala yoga
							try
							{
								dctYogs["KAMALA-YOGA"] = string.Format("{0}", dctSrc["KAMALA-YOGA"].Replace("[1]", dctAst["KAMALA-YOGA"]));
							}
							catch
							{
								dctYogs["KAMALA-YOGA"] = "Internal error. Please report to help desk.";
							}
						}
						if (kh1 || kh2 || kh3 || kh4)
						{ //cancellation of kemadrupa yoga due to precense of planets in kendra from lagna
							bcan_kem = true;
						}
					}
					bool ben_in_ken = false;
					if (!kh1 || (kh1 && kh1_isbenf))
					{
						ben_in_ken = true;
					}
					else
					{
						ben_in_ken = false;
					}
					if (!kh2 || (kh2 && kh2_isbenf))
					{
						ben_in_ken = true;
					}
					else
					{
						ben_in_ken = false;
					}
					if (!kh3 || (kh3 && kh3_isbenf))
					{
						ben_in_ken = true;
					}
					else
					{
						ben_in_ken = false;
					}
					if (!kh4 || (kh4 && kh4_isbenf))
					{
						ben_in_ken = true;
					}
					else
					{
						ben_in_ken = false;
					}
					if (ben_in_ken && (!mel_6) && (!mel_8))
					{//parvatha yoga
						try
						{
							dctYogs["PARVATA-YOGA,BEN|6,8"] = string.Format("{0}", dctSrc["PARVATHA-YOGA,BEN|6,8"].Replace("[1]", dctAst["PARVATHA-YOGA"]));
						}
						catch
						{
							dctYogs["PARVATA-YOGA,BEN|6-8"] = "Internal error. Please report to help desk.";
						}
					}
					if ((dctPlHou[asc_h.Split('|')[2]].lordship == "KEN" || dctPlHou[asc_h.Split('|')[2]].lordship == "BOTH") && (dctPlHou[hou12.Split('|')[2]].lordship == "KEN" || dctPlHou[hou12.Split('|')[2]].lordship == "BOTH"))
					{
						bool basp1 = false, basp2 = false;
						int asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 7th aspect from jupiter
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 7th aspect from jupiter
							basp2 = true;
						}
						asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 5th aspect from jupiter
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 5th aspect from jupiter
							basp2 = true;
						}
						asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 9th aspect from jupiter
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 9th aspect from jupiter
							basp2 = true;
						}
						if (dctPlHou[asc_h.Split('|')[2]].hno == dctPlHou["Ju"].hno)
						{//asc & jupiter in conj
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == dctPlHou["Ju"].hno)
						{//12 lord & jupiter in conj
							basp2 = true;
						}
						asp = (dctPlHou["Me"].hno + 6) > 12 ? (dctPlHou["Me"].hno + 6) - 12 : (dctPlHou["Me"].hno + 6);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 7th aspect from mercury
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 7th aspect from mercury
							basp2 = true;
						}
						if (dctPlHou[asc_h.Split('|')[2]].hno == dctPlHou["Me"].hno)
						{//asc & mercury in conj
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == dctPlHou["Me"].hno)
						{//12 lord & mercury in conj
							basp2 = true;
						}
						asp = (dctPlHou["Ve"].hno + 6) > 12 ? (dctPlHou["Ve"].hno + 6) - 12 : (dctPlHou["Ve"].hno + 6);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 7th aspect from venus
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 7th aspect from venus
							basp2 = true;
						}
						if (dctPlHou[asc_h.Split('|')[2]].hno == dctPlHou["Ve"].hno)
						{//asc & venus in conj
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == dctPlHou["Ve"].hno)
						{//12 lord & venus in conj
							basp2 = true;
						}
						if (basp1 && basp2)
						{//parvata yoga
							try
							{
								dctYogs["PARVATA-YOGA,KEN|1,12"] = string.Format("{0}", dctSrc["PARVATHA-YOGA,KEN|1,12"].Replace("[1]", dctAst[dctPlHou[asc_h.Split('|')[2]].houselord]).Replace("[2]", dctAst[dctPlHou[hou12.Split('|')[2]].houselord]).Replace("[3]", dctAst["PARVATHA-YOGA"]));
							}
							catch
							{
								dctYogs["PARVATA-YOGA,KEN|1,12"] = "Internal error. Please report to help desk.";
							}
						}
					}
					PlanetHouse p4L = dctPlHou[hou4.Split('|')[2]];
					PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
					if ((p4L.lordship == "KEN" || p4L.lordship == "BOTH") && (p9L.lordship == "KEN" || p9L.lordship == "BOTH"))
					{
						PlanetStrength pS = checkStrength(dctPlHou[asc_h.Split('|')[2]]);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
						{//kaahala yoga
							try
							{
								dctYogs["KAAHALA-YOGA,1"] = string.Format("{0}", dctSrc["KAAHALA-YOGA,1"].Replace("[1]", dctAst[dctPlHou[hou4.Split('|')[2]].houselord]).Replace("[2]", dctAst[dctPlHou[hou9.Split('|')[2]].houselord]).Replace("[3]", string.Format("{0},{1}", dctPlHou[hou4.Split('|')[2]].hno, dctPlHou[hou9.Split('|')[2]].hno)).Replace("[4]", dctAst[dctPlHou[asc_h.Split('|')[2]].houselord]).Replace("[5]", dctAst["KAAHALA-YOGA"]));
							}
							catch
							{
								dctYogs["KAAHALA-YOGA,1"] = "Internal error. Please report to help desk.";
							}
						}
					}
					PlanetHouse p4 = dctPlHou[hou4.Split('|')[2]];
					PlanetStrength pS4 = checkStrength(p4);
					if (pS4 == PlanetStrength.EXALTED || pS4 == PlanetStrength.OWN)
					{
						PlanetHouse p10 = dctPlHou[hou10.Split('|')[2]];
						bool asp = false;
						if (p4.hno == p10.hno)
						{//associated by 10 lord
							asp = true;
						}
						switch (p10.code)
						{
							case "Su":
							case "Mo":
								asp = checkAspect(p10.hno, p4.hno, 7);
								break;
							case "Ju":
								asp = checkAspect(p10.hno, p4.hno, 7);
								asp = checkAspect(p10.hno, p4.hno, 5);
								asp = checkAspect(p10.hno, p4.hno, 9);
								break;
							case "Me":
								asp = checkAspect(p10.hno, p4.hno, 7);
								break;
							case "Ma":
								asp = checkAspect(p10.hno, p4.hno, 7);
								asp = checkAspect(p10.hno, p4.hno, 4);
								break;
							case "Ve":
								asp = checkAspect(p10.hno, p4.hno, 7);
								break;
							case "Sa":
								asp = checkAspect(p10.hno, p4.hno, 7);
								asp = checkAspect(p10.hno, p4.hno, 3);
								asp = checkAspect(p10.hno, p4.hno, 10);
								break;
							default:
								break;
						}
						if (asp)
						{//kaahala yoga
							try
							{
								dctYogs["KAAHALA-YOGA,2"] = string.Format("{0}", dctSrc["KAAHALA-YOGA,2"].Replace("[1]", dctAst[dctPlHou[hou4.Split('|')[2]].houselord]).Replace("[2]", (pS4 == PlanetStrength.EXALTED) ? dctAst["exalted"] : dctAst["in own house"]).Replace("[3]", dctAst[dctPlHou[hou10.Split('|')[2]].houselord]).Replace("[4]", dctAst["KAAHALA-YOGA"]));
							}
							catch
							{
								dctYogs["KAAHALA-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}

					}
					PlanetHouse pHL = dctPlHou[asc_h.Split('|')[2]];
					PlanetStrength pSL = checkStrength(pHL);
					if (pSL == PlanetStrength.EXALTED && (pHL.lordship == "KEN" || pHL.lordship == "BOTH"))
					{
						bool basp = false;
						int jasp = 0;
						if (pHL.hno == dctPlHou["Ju"].hno)
						{
							basp = true;
							jasp = 1;
						}
						int asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 5th aspect from jupiter
							basp = true;
							jasp = 5;
						}
						asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 7th aspect from jupiter
							basp = true;
							jasp = 7;
						}
						asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 9th aspect from jupiter
							basp = true;
							jasp = 9;
						}
						//if (basp)
						//{//chamara yoga
						//    try
						//    {
						//        dctYogs["CHAAMARA-YOGA,2"] = string.Format("{0}", dctSrc["CHAAMARA-YOGA,2"].Replace("[1]", dctAst[dctPlHou[asc_h.Split('|')[2]].houselord]).Replace("[2]", jasp.ToString()).Replace("[3]", dctAst["CHAAMARA-YOGA"]));
						//    }
						//    catch
						//    {
						//        dctYogs["CHAMARA-YOGA,2"] = "Internal error. Please report to help desk.";
						//    }
						//}
					}
					if ((dctPlHou[hou4.Split('|')[2]].lordship == "KEN" || dctPlHou[hou4.Split('|')[2]].lordship == "BOTH") && (dctPlHou[hou9.Split('|')[2]].lordship == "KEN" || dctPlHou[hou9.Split('|')[2]].lordship == "BOTH"))
					{
						PlanetStrength pS = checkStrength(dctPlHou[asc_h.Split('|')[2]]);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
						{//kaahala yoga
							try
							{
								dctYogs["KAAHALA-YOGA,1"] = string.Format("{0}", dctSrc["KAAHALA-YOGA,1"].Replace("[1]", dctAst[dctPlHou[hou4.Split('|')[2]].houselord]).Replace("[2]", dctAst[dctPlHou[hou9.Split('|')[2]].houselord]).Replace("[3]", string.Format("{0},{1}", dctPlHou[hou4.Split('|')[2]].hno, dctPlHou[hou9.Split('|')[2]].hno)).Replace("[4]", dctAst[dctPlHou[asc_h.Split('|')[2]].houselord]).Replace("[5]", dctAst["KAAHALA-YOGA"]));
							}
							catch
							{
								dctYogs["KAAHALA-YOGA,1"] = "Internal error. Please report to help desk.";
							}
							//dctYogs["KAAHALA-YOGA,1"] = string.Format("{0}", dctSrc["KAAHALA-YOGA,1"].Replace("[1]", dctAst[dctPlNames[asc_h.Split('|')[2]]]).Replace("[2]", dctAst[dctPlNames[hou9.Split('|')[2]]]).Replace("[3]", string.Format("{0},{1}", dctPlHou[hou4.Split('|')[2]].hno, dctPlHou[hou9.Split('|')[2]].hno)).Replace("[4]", dctAst[dctPlNames[asc_h.Split('|')[2]]]).Replace("[5]", dctAst["KHAALA-YOGA"]));
						}
					}
					PlanetHouse p5L = dctPlHou[hou5.Split('|')[2]];
					PlanetHouse p6L = dctPlHou[hou6.Split('|')[2]];
					if ((p5L.lordship == "KEN" || p5L.lordship == "BOTH") && (p6L.lordship == "KEN" || p6L.lordship == "BOTH"))
					{
						PlanetStrength pS = checkStrength(dctPlHou[asc_h.Split('|')[2]]);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
						{//shankha yoga
							try
							{
								dctYogs["SHANKHA-YOGA,2"] = string.Format("{0}", dctSrc["SHANKHA-YOGA,2"].Replace("[1]", dctAst[dctPlNames[hou5.Split('|')[2]]])).Replace("[2]", dctAst[dctPlNames[hou6.Split('|')[2]]]).Replace("[3]", string.Format("{0},{1}", p5L.hno, p6L.hno).Replace("[4]", dctAst[dctPlNames[asc_h.Split('|')[2]]]).Replace("[5]", dctAst["SHANKHA-YOGA"]));
							}
							catch
							{
								dctYogs["SHANKHA-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}
					}
					if ((pHL.lordship == "KEN" || pHL.lordship == "BOTH") && (dctPlHou["Ju"].lordship == "KEN" || dctPlHou["Ju"].lordship == "BOTH") && (dctPlHou["Ve"].lordship == "KEN" || dctPlHou["Ve"].lordship == "BOTH"))
					{
						PlanetStrength pS = checkStrength(p9L);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
						{//bheri yoga
							try
							{
								dctYogs["BHERI-YOGA,2"] = string.Format("{0}", dctSrc["BHERI-YOGA,2"].Replace("[1]", dctAst[dctPlNames[asc_h.Split('|')[2]]]).Replace("[2]", dctAst[dctPlNames[hou9.Split('|')[2]]]).Replace("[3]", string.Format("{0},{1},{2}", pHL.hno, dctPlHou["Ju"].hno, dctPlHou["Ve"].hno)).Replace("[3]", dctAst["BHERI-YOGA"]));
							}
							catch
							{
								dctYogs["BHERI-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}
					}
				}
				else if (ken_hou == string.Empty && lag_hou == string.Empty)
				{//vapi yoga
				 //dctYogs["VAPI-YOGA"] = string.Format("{0}", dctSrc["VAPI-YOGA"].Replace("[1]", dctAst["VEPI-YOGA"]));
				}
				if (btri)
				{//shringataka yoga
					try
					{
						dctYogs["SHRINGATAKA-YOGA"] = string.Format("{0}", dctSrc["SHRINGATAKA-YOGA"].Replace("[1]", tri_hou).Replace("[2]", dctAst["SHRINGATAKA-YOGA"]));
					}
					catch
					{
						dctYogs["SHRINGATAKA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				if (btrin)
				{//hala yoga
					try
					{
						dctYogs["HALA-YOGA"] = string.Format("{0}", dctSrc["HALA-YOGA"].Replace("[1]", (trin1_hou != string.Empty) ? trin1_hou : (trin2_hou != string.Empty) ? trin2_hou : trin3_hou).Replace("[2]", dctAst["HALA-YOGA"]));
					}
					catch
					{
						dctYogs["HALA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				if (ben_1hou.Split(',').Count() > 0 || ben_7hou.Split(',').Count() > 0 || ben_9hou.Split(',').Count() > 0 || ben_10hou.Split(',').Count() > 0)
				{//chamara yoga
					string benfs = string.Empty;
					string hses = string.Empty;
					if (ben_1hou.Split(',').Count() > 0)
					{
						foreach (var bnf in ben_1hou.Split(','))
						{
							if (bnf != string.Empty)
								benfs += dctAst[dctPlNames[bnf]];
						}
						hses += "1,";
					}
					if (ben_7hou.Split(',').Count() > 0)
					{
						foreach (var bnf in ben_7hou.Split(','))
						{
							if (bnf != string.Empty)
								benfs += dctAst[dctPlNames[bnf]];
						}
						hses += "7,";
					}
					if (ben_9hou.Split(',').Count() > 0)
					{
						foreach (var bnf in ben_9hou.Split(','))
						{
							if (bnf != string.Empty)
								benfs += dctAst[dctPlNames[bnf]];
						}
						hses += "9,";
					}
					if (ben_10hou.Split(',').Count() > 1)
					{
						foreach (var bnf in ben_1hou.Split(','))
						{
							if (bnf != string.Empty)
								benfs += dctAst[dctPlNames[bnf]];
						}
						hses += "10,";
					}
					//try
					//{
					//    dctYogs["CHAAMARA-YOGA,1"] = string.Format("{0}", dctSrc["CHAAMARA-YOGA,1"].Replace("[1]", benfs).Replace("[2]", hses.Trim()).Replace("[3]", dctAst["CHAAMARA-YOGA"]));
					//}
					//catch
					//{
					//    dctYogs["CHAMARA-YOGA,1"] = "Internal error. Please report to help desk.";
					//}
				}
				PlanetHouse pLAG = dctPlHou[asc_h.Split('|')[2]];
				//PlanetHouse p10L = dctPlHou[dctPlHou[hou10.Split('|')[2]].houselord];
				if (pLAG.signtype == "M" && p10L.signtype == "M")
				{
					PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
					PlanetStrength pS = checkStrength(p9L);
					if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
					{//shankha yoga
						try
						{
							dctYogs["SHANKHA-YOGA,3"] = string.Format("{0}", dctSrc["SHANKHA-YOGA,3"].Replace("[1]", dctAst[dctPlNames[pLAG.code]]).Replace("[2]", dctAst[dctPlNames[p10L.code]]).Replace("[3]", dctAst["movable"]).Replace("[4]", dctAst[dctPlNames[p9L.code]]).Replace("[5]", dctAst["SHANKHA-YOGA"]));
						}
						catch
						{
							dctYogs["SHANKHA-YOGA,3"] = "Internal error. Please report to help desk.";
						}
					}
				}
				if (bheri)
				{
					PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
					PlanetStrength pS = checkStrength(p9L);
					if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
					{//bheri yoga
						try
						{
							dctYogs["BHERI-YOGA"] = string.Format("{0}", dctSrc["BHERI-YOGA,2"].Replace("[1]", dctAst[dctPlNames[p9L.name]]).Replace("[2]", dctAst["BHERI-YOGA"]));
						}
						catch
						{
							dctYogs["BHERI-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				PlanetStrength pLAGS = checkStrength(pLAG);
				if (pLAGS == PlanetStrength.EXALTED || pLAGS == PlanetStrength.MOOLTRIKONA || pLAGS == PlanetStrength.OWN || pLAGS == PlanetStrength.FRIEND)
				{
					PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
					if (p9L.lordship == "KEN" || p9L.lordship == "BOTH")
					{
						PlanetStrength pS = checkStrength(p9L);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN)
						{//lakshmi yoga
							string exa = (pS == PlanetStrength.EXALTED) ? "exalted" : (pS == PlanetStrength.MOOLTRIKONA) ? "mooltrikona" : "own";
							try
							{
								dctYogs["LAKSHMI-YOGA"] = string.Format("{0}", dctSrc["LAKSHMI-YOGA"].Replace("[1]", dctAst[dctPlNames[pLAG.code]]).Replace("[2]", dctAst[dctPlNames[p9L.code]]).Replace("[3]", p9L.hno.ToString()).Replace("[4]", dctAst[exa]).Replace("[5]", dctAst["LAKSHMI-YOGA"]));
							}
							catch
							{
								dctYogs["LAKSHMI-YOGA"] = "Internal error. Please report to help desk.";
							}
						}
					}
				}
				if (!bsnp && !banp && !bcan_kem)
				{
					try
					{
						dctYogs["KEMADRUMA-YOGA,1"] = string.Format("{0}", dctSrc["KEMADRUMA-YOGA,1"].Replace("[1]", dctAst["KEMADRUMA-YOGA"]));
					}
					catch
					{
						dctYogs["KEMADRUMA-YOGA,1"] = "Internal error. Please report to help desk.";
					}
				}
				else if (!bcan_kem)
				{
					if (dctPlHou["Mo"].hno == 1 || dctPlHou["Mo"].hno == 7)
					{
						if ((dctPlHou["Mo"].hno == dctPlHou["Ju"].hno) || (dctPlHou["Ju"].hno + 4 == dctPlHou["Mo"].hno) || (dctPlHou["Ju"].hno + 6 == dctPlHou["Mo"].hno) || (dctPlHou["Ju"].hno + 8 == dctPlHou["Mo"].hno))
						{ //moon in asc or 7th house gains jupiter aspect
						  //kemadhruma2 yoga
							try
							{
								dctYogs["KEMADRUMA-YOGA,2"] = string.Format("{0}", dctSrc["KEMADRUMA-YOGA,2"].Replace("[1]", dctPlHou["Mo"].hno.ToString()).Replace("[2]", dctAst["KEMADRUMA-YOGA"]));
							}
							catch
							{
								dctYogs["KEMADRUMA-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}
					}
				}
				else if (!bcan_kem && bmon_inmic)
				{
					try
					{
						dctYogs["KEMADRUMA-YOGA,3"] = string.Format("{0}", dctSrc["KEMARUMA-YOGA,3"].Replace("[1]", dctAst[dctPlHou["Mo"].sign]).Replace("[2]", inmic_asp).Replace("[3]", dctAst["KEMADRUMA-YOGA"]));
					}
					catch
					{
						dctYogs["KEMADRUMA-YOGA,3"] = "Internal error. Please report to help desk.";
					}
				}
				else if (!bcan_kem && bmon_in_rk)
				{
					try
					{
						dctYogs["KEMADRUMA-YOGA,4"] = string.Format("{0}", dctSrc["KEMARUMA-YOGA,4"].Replace("[1]", dctPlHou["Mo"].hno.ToString()).Replace("[2]", dctAst["KEMADRUMA-YOGA"]));
					}
					catch
					{
						dctYogs["KEMADRUMA-YOGA,4"] = "Internal error. Please report to help desk.";
					}
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("eX.Message", line.ToString());
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("GetYogasEx")]
		public async Task<ActionResult> GetYogasEx(string dob, string tob, string latlng, string timezone, double tzofset, int ayanid, string lang)
		{
			_logger.LogInformation(string.Format("GetYogas-{0}", dob));
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			Dictionary<string, string> dctConjYogs = new Dictionary<string, string>();
			Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string yogf = string.Empty, astf = string.Empty;
				switch (lang)
				{
					case "ta":
						yogf = string.Format(@"{0}\ta-yogs.json", astClient);
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						break;
					case "en":
						yogf = string.Format(@"{0}\en-yogs.json", astClient);
						astf = string.Format(@"{0}\en-dct.json", astClient);
						break;
					case "te":
						yogf = string.Format(@"{0}\te-yogs.json", astClient);
						astf = string.Format(@"{0}\te-dct.json", astClient);
						break;
					case "hi":
						yogf = string.Format(@"{0}\hi-yogs.json", astClient);
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						break;
					default:
						yogf = string.Format(@"{0}\en-yogs.json", astClient);
						astf = string.Format(@"{0}\en-dct.json", astClient);
						break;
				}
				string yogs = string.Empty, adct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdr = new StreamReader(yogf, Encoding.UTF8))
				{
					yogs = rdr.ReadToEnd();
					adct = rdra.ReadToEnd();
				}
				Dictionary<string, string> dctAst;
				Dictionary<string, string> dctSrc;
				try
				{
					dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
					dctSrc = JsonConvert.DeserializeObject<Dictionary<string, string>>(yogs);
				}
				catch (JsonException eX)
				{
					var st = new StackTrace(eX, true);
					var frame = st.GetFrame(st.FrameCount - 1);
					var line = frame.GetFileLineNumber();
					dctYogs.Add("eX.Message", string.Format("{0} {1}", eX.Message, line.ToString()));
					return new JsonResult(dctYogs);
				}
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				string tz = TZConvert.IanaToWindows(timezone);
				//Horoscope mHoro = new Horoscope();
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				//mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, tz, false, string.Empty);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double ofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, ofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, (int)tzofset, ayan, ayanid, false);

				//mHoro.calc_planets_pos(false, astClient);
				Dictionary<string, string> plpos = mHoro.planetsPos;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				bool ves = false, vos = false;
				string ves_pl = string.Empty, vos_pl = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
							else
							{
								if (pl.Split(' ')[1] != "Mo" && pl.Split(' ')[1] != "MEAN_NODE" && pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
									switch (r2)
									{
										case 2: ////veshi yoga
											ves = true;
											ves_pl += pl.Split(' ')[1] + ",";
											break;
										case 12: //voshi yoga
											vos = true;
											vos_pl += pl.Split(' ')[1] + ",";
											break;
										default:
											break;
									}
								}
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				if (ves && vos)
				{//ubhachari yoga
					bool ben = false, mel = false;
					foreach (string pl in ves_pl.Split(','))
					{
						switch (pl)
						{
							case "Mo":
							case "Me":
							case "Ve":
							case "Ju":
								ben = true;
								break;
							case "Su":
							case "Ma":
							case "Sa":
							case "Ra":
							case "Ke":
								mel = true;
								break;
							default:
								break;
						}
					}
					foreach (string pl in vos_pl.Split(','))
					{
						switch (pl)
						{
							case "Mo":
							case "Me":
							case "Ve":
							case "Ju":
								ben = true;
								break;
							case "Su":
							case "Ma":
							case "Sa":
							case "Ra":
							case "Ke":
								mel = true;
								break;
							default:
								break;
						}
					}
					try
					{
						string pls_ves = string.Empty;
						foreach (string pl in ves_pl.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_ves += dctAst[dctPlNames[pl]] + ",";
						}
						string pls_vos = string.Empty;
						foreach (string pl in vos_pl.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_vos += dctAst[dctPlNames[pl]] + ",";
						}

						dctYogs["UBAHAYACHARI-YOGA"] = string.Format("{0} {1}", dctSrc["UBAHAYACHARI-YOGA"].Replace("[1]", pls_ves.TrimEnd(',')).Replace("[2]", pls_vos.TrimEnd(',')).Replace("[3]", dctAst["UBAHAYACHARI-YOGA"]), (ben == true) ? dctSrc["UBAHAYACHARI-YOGA,BEN"] : dctSrc["UBAHAYACHARI-YOGA,MEL"]);
					}
					catch
					{
						dctYogs["UBAHAYACHARI-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (ves)
				{
					bool ben = false, mel = false;
					foreach (string pl in ves_pl.Split(','))
					{
						switch (pl)
						{
							case "Mo":
							case "Me":
							case "Ve":
							case "Ju":
								ben = true;
								break;
							case "Su":
							case "Ma":
							case "Sa":
							case "Ra":
							case "Ke":
								mel = true;
								break;
							default:
								break;
						}
					}
					try
					{
						string pls_ves = string.Empty;
						foreach (string pl in ves_pl.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_ves += dctAst[dctPlNames[pl]] + ",";
						}
						dctYogs["VESHI-YOGA"] = string.Format("{0} {1}", dctSrc["VESHI-YOGA"].Replace("[1]", pls_ves.TrimEnd(',')).Replace("[2]", dctAst["VESHI-YOGA"]), (mel == true) ? dctSrc["VESHI-YOGA,MEL"] : "");
					}
					catch
					{
						dctYogs["VESHI-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (vos)
				{
					bool ben = false, mel = false, fben = false;
					foreach (string pl in vos_pl.Split(','))
					{
						fben = isBEN(pl);
						switch (pl)
						{
							case "Mo":
							case "Me":
							case "Ve":
							case "Ju":
								ben = true;
								break;
							case "Su":
							case "Ma":
							case "Sa":
							case "Ra":
							case "Ke":
								mel = true;
								break;
							default:
								break;
						}
					}
					if (isBEN("Su") && fben)
					{
						try
						{
							string pls_vos = string.Empty;
							foreach (string pl in vos_pl.Split(','))
							{
								if (pl.Trim() != string.Empty)
									pls_vos += dctAst[dctPlNames[pl]] + ",";
							}
							dctYogs["VOSHI-YOGA"] = string.Format("{0} {1}", dctSrc["VOSHI-YOGA"].Replace("[1]", pls_vos.TrimEnd(',')).Replace("[2]", dctAst["VOSHI-YOGA"]), (mel == true) ? dctSrc["VOSHI-YOGA,MEL"] : "");
						}
						catch
						{
							dctYogs["VOSHI-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				int nsank = 0;
				bool bsnp = false;
				bool banp = false;
				bool ben_8 = false, ben_7 = false, ben_6 = false, mel_8 = false, mel_6 = false;
				string snp_pls = string.Empty;
				string anp_pls = string.Empty;
				bool bcan_kem = false;
				bool malefic_in_ken = false;
				bool benefic_in_ken = false;
				bool one7shak = true;
				bool four10pak = true;
				int one_hou_pl = 0;
				int four_hou_pl = 0;
				int svn_hou_pl = 0;
				int ten_hou_pl = 0;

				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plpos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plpos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
								if (pHou.code != "MEAN_NODE" && pHou.code != "Ke" && pHou.code != "Ur" && pHou.code != "Pl" && pHou.code != "me" && pHou.code != "os" && pHou.code != "Ne" && pHou.code != "AC" && pHou.code != "TRUE_NODE")
								{  //consider only true  
									bpl = true;
									pkey += pHou.code + "-";
									if (pHou.hno != 1 || pHou.hno != 7) one7shak = false;
									if (pHou.hno != 4 || pHou.hno != 10) four10pak = false;
									switch (pHou.hno)
									{
										case 1:
											one_hou_pl++;
											break;
										case 4:
											four_hou_pl++;
											break;
										case 7:
											svn_hou_pl++;
											break;
										case 10:
											ten_hou_pl++;
											break;
										default:
											break;
									}
									if (pHou.lordship == "KEN" || pHou.lordship == "BOTH") //panchmaha purusha yoga applies only if in kendra
									{
										if (pHou.code == "Sa" || pHou.code == "Me" || pHou.code == "Su")
										{
											malefic_in_ken = true;
										}
										else if (pHou.code == "Ju" || pHou.code == "Ma" || pHou.code == "Ve" || pHou.code == "Mo")
										{
											benefic_in_ken = true;
										}
									}
									if (pHou.code != "Su" && pHou.code != "Mo")
									{
										int mhno = Convert.ToInt32(ra.Split('|')[4]);
										switch (mhno)
										{
											case 2:
												bsnp = true;
												snp_pls += pHou.name + ",";
												break;
											case 12:
												banp = true;
												anp_pls += pHou.name + ",";
												break;
											default:
												break;
										}
									}
									if (pHou.code == "Su" || pHou.code == "Ma" || pHou.code == "Sa")
									{ //malefics
										if (pHou.hno == 4 || pHou.mhno == 4)
										{ //4th house from lagna or moon occupied by a malefic
										}
										else if (pHou.hno == 6)
										{
											mel_6 = true;
										}
										else if (pHou.hno == 8)
										{
											mel_8 = true;
										}
									}
									if (pHou.mhno == 1 || pHou.mhno == 4 || pHou.mhno == 7 || pHou.mhno == 10)
									{ //precense of planets in kendra house from moon which cancels kemadrupha yoga
										bcan_kem = true;
									}
									if (pHou.code == "Me" || pHou.code == "Ve" || pHou.code == "Ju")
									{
										if (pHou.hno == 7) ben_7 = true;
										else if (pHou.hno == 8) ben_8 = true;

									}
								}
							}
						}
						if (bpl) nsank++;
					}
					if (pkey.Split('-').Count() - 1 > 1) //yoga2 formed through conjunction
					{
						pkey = pkey.Remove(pkey.Length - 1).Trim();
						pkey = sortPls(pkey);
						string pckey = string.Format("{0}|{1}", pkey, ra.Split('|')[3]);
						// dctConjYogs.Adpckey, "");
						string yog = (dctSrc.ContainsKey(pckey) == true) ? dctSrc[pckey] : (dctSrc.ContainsKey(pkey) == true) ? dctSrc[pkey] : "";
						if (yog != string.Empty)
						{
							string plk = string.Empty;
							foreach (string key in pkey.Split('-'))
								plk += dctPlNames[key] + "-";
							plk = plk.Remove(plk.Length - 1).Trim();
							dctYogs[plk] = yog;
						}
					}
				}
				foreach (var plh in dctPlHou)
				{
					PlanetHouse pHou = plh.Value;
					switch (pHou.code)
					{
						case "Ma":
							if (pHou.sign == "cp" || pHou.sign == "ar" || pHou.sign == "sc")
							{
								//mars is exalted or own sign
								if (asc_h.Split('|')[1] != "D")
								{ //ruchaka yoga
									bool bsun = false, bmoon = false;
									if (dctPlHou["Su"].hno == pHou.hno)
									{//sun is combined
										bsun = true;
									}
									if (dctPlHou["Mo"].hno == pHou.hno)
									{//moon is combined
										bmoon = true;
									}
									try
									{
										dctYogs["RUCHAKA-YOGA"] = string.Format("{0} {1}", dctSrc["RUCHAKA-YOGA"].Replace("[1]", (pHou.sign == "cp") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["RUCHAKA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["RUCHAKA-YOGA,SU"] : (bmoon) ? dctSrc["RUCHAKA-YOGA,MO"] : "");
									}
									catch
									{
										dctYogs["RUCHAKA-YOGA"] = "Internal error. Please report to help desk.";
									}
								}
							}
							break;
						case "Me":
							if (pHou.sign == "vi" || pHou.sign == "ta")
							{  //mercury exalted or own sign
								bool bsun = false, bmoon = false;
								if (dctPlHou["Su"].hno == pHou.hno)
								{//sun is combined
									bsun = true;
								}
								if (dctPlHou["Mo"].hno == pHou.hno)
								{//moon is combined
									bmoon = true;
								}
								if (asc_h.Split('|')[1] == "D")
								{ //bhadra yoga
									try
									{
										dctYogs["BHADRA-YOGA"] = string.Format("{0} {1}", dctSrc["BHADRA-YOGA"].Replace("[1]", (pHou.sign == "vi") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["BHADRA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["BHADRA-YOGA,SU"] : (bmoon) ? dctSrc["BHADRA-YOGA,MO"] : "");
									}
									catch
									{
										dctYogs["BHADRA-YOGA"] = "Internal error. Please report to help desk.";
									}

								}
							}
							break;
						case "Ju":
							if (pHou.sign == "cn" || pHou.sign == "sa" || pHou.sign == "pi")
							{ //jupiter exalted or own sign
								bool bsun = false, bmoon = false;
								if (dctPlHou["Su"].hno == pHou.hno)
								{//sun is combined
									bsun = true;
								}
								if (dctPlHou["Mo"].hno == pHou.hno)
								{//moon is combined
									bmoon = true;
								}
								if (asc_h.Split('|')[1] == "D" || asc_h.Split('|')[1] == "M")
								{ //hamsa yoga
									try
									{
										dctYogs["HAMSA-YOGA"] = string.Format("{0} {1}", dctSrc["HAMSA-YOGA"].Replace("[1]", (pHou.sign == "cn") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["HAMSA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["HAMSA-YOGA,SU"] : (bmoon) ? dctSrc["HAMSA-YOGA,MO"] : "");
									}
									catch
									{
										dctYogs["HAMSA-YOGA"] = "Internal error. Please report to help desk.";
									}
								}
							}
							break;
						case "Ve":
							if (pHou.sign == "pi" || pHou.sign == "ta" || pHou.sign == "li")
							{ //venus exalted or own sign
								bool bsun = false, bmoon = false;
								if (dctPlHou["Su"].hno == pHou.hno)
								{//sun is combined
									bsun = true;
								}
								if (dctPlHou["Mo"].hno == pHou.hno)
								{//moon is combined
									bmoon = true;
								}
								//malva yoga
								try
								{
									dctYogs["MALVA-YOGA"] = string.Format("{0} {1}", dctSrc["MALVA-YOGA"].Replace("[1]", (pHou.sign == "pi") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["MALVA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["MALVA-YOGA,SU"] : (bmoon) ? dctSrc["MALVA-YOGA,MO"] : "");
								}
								catch
								{
									dctYogs["MALVA-YOGA"] = "Internal error. Please report to help desk.";
								}

							}
							break;
						case "Sa":
							if (pHou.sign == "li" || pHou.sign == "cp" || pHou.sign == "aq")
							{ //saturn exalted or own sign
								bool bsun = false, bmoon = false;
								if (dctPlHou["Su"].hno == pHou.hno)
								{//sun is combined
									bsun = true;
								}
								if (dctPlHou["Mo"].hno == pHou.hno)
								{//moon is combined
									bmoon = true;
								}
								if (asc_h.Split('|')[1] != "D")
								{ //shasha yoga
									try
									{
										dctYogs["SHASHA-YOGA"] = string.Format("{0}", dctSrc["SHASHA-YOGA"].Replace("[1]", (pHou.sign == "li") ? dctAst["exalted"] : dctAst["in own sign"]).Replace("[2]", (asc_h.Split('|')[1] == "F") ? dctAst["fixed"] : dctAst["movable"]).Replace("[3]", dctAst["SHASHA-YOGA"]).Replace("[4]", dctAst["PANCH-MAHAPURUSHA-YOGAS"]), (bsun) ? dctSrc["SHASHA-YOGA,SU"] : (bmoon) ? dctSrc["SHASHA-YOGA,MO"] : "");
									}
									catch (Exception eX)
									{
										dctYogs["SHASHA-YOGA"] = eX.Message; //"Internal error. Please report to help desk.";
									}
								}
							}
							break;
						default:
							break;
					}
				}

				//GAJkesari yoga
				if (((dctPlHou["Mo"].sign != "sc") && (dctPlHou["Ju"].sign != "cp")) && ((dctPlHou["Mo"].lordship == "KEN" || dctPlHou["Mo"].lordship == "BOTH") && (dctPlHou["Ju"].lordship == "KEN" || dctPlHou["Ju"].lordship == "BOTH")))
				{ //moon & jupiter in kendra
					int kno = (dctPlHou["Ju"].mhno - dctPlHou["Mo"].mhno) + 1;
					switch (kno)
					{
						case 1:
							try
							{
								dctYogs["GAJKESARI-YOGA"] = string.Format("{0} {1}", dctSrc["GAJKESARI-YOGA"].Replace("[1]", kno.ToString()).Replace("[2]", dctAst["GAJKESARI-YOGA"]), dctSrc["GAJKESARI-YOGA|1"]);
							}
							catch
							{
								dctYogs["GAJKESARI-YOGA"] = "Internal error. Please report to help desk.";
							}
							break;
						case 4:
						case 7:
						case 10:
							try
							{
								dctYogs["GAJKESARI-YOGA,JU"] = string.Format("{0} {1}", dctSrc["GAJKESARI-YOGA,JU"].Replace("[1]", kno.ToString()).Replace("[2]", dctAst["GAJKESARI-YOGA"]), dctSrc["GAJKESARI-YOGA,JU|" + kno.ToString()]);
							}
							catch
							{
								dctYogs["GAJKESARI-YOGA,JU"] = "Internal error. Please report to help desk.";
							}
							break;
						default:
							break;
					}
				}
				//chandra yogas
				int ncad = 0;
				string adh_p = string.Empty, ad_h = string.Empty;
				switch (dctPlHou["Me"].mhno)
				{
					case 6:
					case 7:
					case 8:
						adh_p += "Me" + ",";
						ad_h += dctPlHou["Me"].mhno.ToString() + ",";
						ncad++;
						break;
					default:
						break;
				}
				switch (dctPlHou["Ju"].mhno)
				{
					case 6:
					case 7:
					case 8:
						adh_p += "Ju" + ",";
						ad_h += dctPlHou["Ju"].mhno.ToString() + ",";
						ncad++;
						break;
					default:
						break;
				}
				switch (dctPlHou["Ve"].mhno)
				{
					case 6:
					case 7:
					case 8:
						adh_p += "Ve" + ",";
						ad_h += dctPlHou["Ve"].mhno.ToString() + ",";
						ncad++;
						break;
					default:
						break;
				}
				if (ncad > 1)
				{ //minmum for adhi yoga
					try
					{
						string pls_adh = string.Empty;
						foreach (string pl in adh_p.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_adh += dctAst[dctPlNames[pl]] + ",";
						}
						dctYogs["ADHI-YOGA"] = string.Format("{0}", dctSrc["ADHI-YOGA"].Replace("[1]", pls_adh.TrimEnd(',')).Replace("[2]", ad_h.TrimEnd(',')).Replace("[3]", dctAst["ADHI-YOGA"]));
					}
					catch
					{
						dctYogs["ADHI-YOGA"] = "Internal error. Please report to help desk.";
					}

				}
				if (bsnp && banp)
				{  //durudhara yoga
					try
					{
						string pls_snp = string.Empty;
						foreach (string pl in snp_pls.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_snp += dctAst[pl] + ",";
						}
						string pls_anp = string.Empty;
						foreach (string pl in anp_pls.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_anp += dctAst[pl] + ",";
						}
						dctYogs["DURUDHARA-YOGA"] = string.Format("{0}", dctSrc["DURUDHARA-YOGA"].Replace("[1]", (pls_snp + pls_anp).TrimEnd(',')).Replace("[2]", anp_pls).Replace("[3]", dctAst["DURUDHARA-YOGA"]));
					}
					catch
					{
						dctYogs["DURUDHARA-YOGA"] = "Internal error. Please report to help desk.";
					}

				}
				else if (bsnp)
				{ //sunapa yoga
					try
					{
						string pls_snp = string.Empty;
						foreach (string pl in snp_pls.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_snp += dctAst[pl] + ",";
						}
						dctYogs["SUNAPHA-YOGA"] = string.Format("{0}", dctSrc["SUNAPHA-YOGA"].Replace("[1]", pls_snp.TrimEnd(',')).Replace("[2]", dctAst["SUNAPHA-YOGA"]));
					}
					catch
					{
						dctYogs["SUNAPHA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (banp)
				{ //anapa yoga
					string pls_anp = string.Empty;
					try
					{
						foreach (string pl in anp_pls.Split(','))
						{
							if (pl.Trim() != string.Empty)
								pls_anp += dctAst[pl] + ",";
						}
						dctYogs["ANAPHA-YOGA"] = string.Format("{0}", dctSrc["ANAPHA-YOGA"].Replace("[1]", pls_anp.TrimEnd(',')).Replace("[2]", dctAst["ANAPHA-YOGA"]));
					}
					catch (Exception eX)
					{
						dctYogs["ANAPHA-YOGA"] = string.Format("{0} {1}", eX.Message, pls_anp);//"Internal error. Please report to help desk.";
					}
				}
				else
				{ //kemadruma yoga
				}
				//moon is in rahu ketu axis
				bool bmon_in_rk = false;
				if (dctPlHou["MEAN_NODE"].hno + 6 > 12)
				{
					if (dctPlHou["Mo"].hno > dctPlHou["MEAN_NODE"].hno)
					{
						bmon_in_rk = true;
					}
					else if (dctPlHou["Mo"].hno < 12 - (dctPlHou["MEAN_NODE"].hno + 6))
					{
						bmon_in_rk = true;
					}
					else if (dctPlHou["Mo"].hno == 12 - (dctPlHou["MEAN_NODE"].hno + 6))
					{
						if (dctPlHou["MEAN_NODE"].pos > dctPlHou["Mo"].pos)
						{
							bmon_in_rk = true;
						}
					}
					else if (dctPlHou["Mo"].hno == dctPlHou["MEAN_NODE"].hno)
					{
						if (dctPlHou["MEAN_NODE"].pos < dctPlHou["Mo"].pos)
						{
							bmon_in_rk = true;
						}
					}
				}
				else if (dctPlHou["Mo"].hno < (dctPlHou["MEAN_NODE"].hno + 6))
				{
					bmon_in_rk = true;
				}
				else if (dctPlHou["Mo"].hno == dctPlHou["MEAN_NODE"].hno)
				{
					if (dctPlHou["MEAN_NODE"].pos < dctPlHou["Mo"].pos)
					{
						bmon_in_rk = true;
					}
				}
				else if (dctPlHou["Mo"].hno == (dctPlHou["MEAN_NODE"].hno + 6))
				{
					if (dctPlHou["MEAN_NODE"].pos > dctPlHou["Mo"].pos)
					{
						bmon_in_rk = true;
					}
				}
				bool bmon_inmic = false;
				string inmic_asp = string.Empty;
				if (dctPlHou["Mo"].sign == "li" && (dctPlHou["Mo"].houselord == "Me" || dctPlHou["Mo"].houselord == "Ve" || dctPlHou["Mo"].houselord == "Sa"))
				{ //moon is in varga of inimical planet
					if ((dctPlHou["Mo"].hno == dctPlHou["Me"].hno) || (dctPlHou["Mo"].hno == dctPlHou["Ve"].hno) || (dctPlHou["Mo"].hno == dctPlHou["Sa"].hno))
					{ //moon aspected by inimical planet
						bmon_inmic = true;
						if (dctPlHou["Mo"].hno == dctPlHou["Me"].hno)
						{
							inmic_asp += string.Format("{0},", dctAst["Mercury"]);
						}
						if (dctPlHou["Mo"].hno == dctPlHou["Ve"].hno)
						{
							inmic_asp += string.Format("{0},", dctAst["Venus"]);
						}
						if (dctPlHou["Mo"].hno == dctPlHou["Sa"].hno)
						{
							inmic_asp += string.Format("{0},", dctAst["Saturn"]);
						}
					}
					int svn = (dctPlHou["Me"].hno + 6) > 12 ? (dctPlHou["Me"].hno + 6) - 12 : (dctPlHou["Me"].hno + 6);
					if (dctPlHou["Mo"].hno == svn)
					{//7th aspect from mercury
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Mercury"]);
					}
					svn = (dctPlHou["Me"].hno + 6) > 12 ? (dctPlHou["Ve"].hno + 6) - 12 : (dctPlHou["Ve"].hno + 6);
					if (dctPlHou["Mo"].hno == svn)
					{//7th aspect from venus
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Venus"]);
					}
					svn = (dctPlHou["Sa"].hno + 6) > 12 ? (dctPlHou["Sa"].hno + 6) - 12 : (dctPlHou["Sa"].hno + 6);
					if (dctPlHou["Mo"].hno == svn)
					{//7th aspect from saturn
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Saturn"]);
					}
					int sat_asp = (dctPlHou["Sa"].hno + 2) > 12 ? (dctPlHou["Sa"].hno + 2) - 12 : (dctPlHou["Sa"].hno + 2);
					if (dctPlHou["Mo"].hno == sat_asp)
					{//3rd aspect from saturn
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Saturn"]);
					}
					sat_asp = (dctPlHou["Sa"].hno + 9) > 12 ? (dctPlHou["Sa"].hno + 9) - 12 : (dctPlHou["Sa"].hno + 9);
					if (dctPlHou["Mo"].hno == sat_asp)
					{//10th aspect from saturn
						bmon_inmic = true;
						inmic_asp += string.Format("{0},", dctAst["Saturn"]);
					}
				}
				//cancellation of kemadruma yoga
				if (dctPlHou["Mo"].lordship == "KEN" || dctPlHou["Mo"].lordship == "BOTH")
				{//moon in kendra
					if (dctPlHou["Ju"].hno == dctPlHou["Mo"].hno)
					{
						bcan_kem = true;
					}
					else
					{
						int ju_asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
						if (dctPlHou["Mo"].hno == ju_asp)
						{//7th aspect from jupiter
							bcan_kem = true;
						}
						ju_asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
						if (dctPlHou["Mo"].hno == ju_asp)
						{//5th aspect from jupiter
							bcan_kem = true;
						}
						ju_asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
						if (dctPlHou["Mo"].hno == ju_asp)
						{//9th aspect from jupiter
							bcan_kem = true;
						}
					}

				}
				if (dctPlHou["Ve"].lordship == "KEN" || dctPlHou["Ve"].lordship == "BOTH")
				{//venus in kendra
					if (dctPlHou["Ju"].hno == dctPlHou["Ve"].hno)
					{
						bcan_kem = true;
					}
					else
					{
						int ju_asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
						if (dctPlHou["Ve"].hno == ju_asp)
						{//7th aspect from jupiter
							bcan_kem = true;
						}
						ju_asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
						if (dctPlHou["Ve"].hno == ju_asp)
						{//5th aspect from jupiter
							bcan_kem = true;
						}
						ju_asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
						if (dctPlHou["Ve"].hno == ju_asp)
						{//9th aspect from jupiter
							bcan_kem = true;
						}
					}
				}
				if (dctPlHou["Mo"].sign == "ta" && dctPlHou["Mo"].hno == 10)
				{ //exalted moon in 10th house
					int asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
					if (dctPlHou["Mo"].hno == asp)
					{//7th aspect from jupiter
						bcan_kem = true;
					}
					asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
					if (dctPlHou["Mo"].hno == asp)
					{//5th aspect from jupiter
						bcan_kem = true;
					}
					asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
					if (dctPlHou["Mo"].hno == asp)
					{//9th aspect from jupiter
						bcan_kem = true;
					}
					if (dctPlHou["Mo"].hno == dctPlHou["Ju"].hno)
					{//1st aspect from jupiter
					}
					asp = (dctPlHou["Me"].hno + 6) > 12 ? (dctPlHou["Me"].hno + 6) - 12 : (dctPlHou["Me"].hno + 6);
					if (dctPlHou["Mo"].hno == asp)
					{//7th aspect from mercury
						bcan_kem = true;
					}
					if (dctPlHou["Mo"].hno == dctPlHou["Me"].hno)
					{//1st aspect from mercury
						bcan_kem = true;
					}
					asp = (dctPlHou["Ve"].hno + 6) > 12 ? (dctPlHou["Ve"].hno + 6) - 12 : (dctPlHou["Ve"].hno + 6);
					if (dctPlHou["Mo"].hno == asp)
					{//7th aspect from venus
						bcan_kem = true;
					}
					if (dctPlHou["Mo"].hno == dctPlHou["Ve"].hno)
					{//1st aspect from venus
						bcan_kem = true;
					}
				}
				if (dctPlHou["Ma"].sign == "li" && dctPlHou["Ju"].sign == "li" && dctPlHou["Su"].sign == "vi" && dctPlHou["Mo"].sign == "ta")
				{//mars & jupiter in libra, sun in virgo & moon in taurus
					bcan_kem = true;
				}
				//vasuman yoga
				//bool mer_upa = false, ven_upa = false, jup_upa = false;
				int nupa = 0;
				string upa_pl = string.Empty;
				if (dctPlHou["Me"].mhno == 3 || dctPlHou["Me"].mhno == 6 || dctPlHou["Me"].mhno == 10 || dctPlHou["Me"].mhno == 11)
				{//mercury occupy upachaya house from moon
				 //mer_upa = true;
					nupa++;
					upa_pl += "Mercury,";
				}
				if (dctPlHou["Ve"].mhno == 3 || dctPlHou["Ve"].mhno == 6 || dctPlHou["Ve"].mhno == 10 || dctPlHou["Ve"].mhno == 11)
				{//venus occupy upachaya house from moon
				 //ven_upa = true;
					nupa++;
					upa_pl += "Venus,";
				}
				if (dctPlHou["Ju"].mhno == 3 || dctPlHou["Ju"].mhno == 6 || dctPlHou["Ju"].mhno == 10 || dctPlHou["Ju"].mhno == 11)
				{//jupiter occupy upachaya house from moon
				 //jup_upa = true;
					nupa++;
					upa_pl += "Jupiter";
				}
				if (nupa == 3)
				{ //all benefics in upachaya houses
					try
					{
						dctYogs["VASUMAN-YOGA,UPA"] = string.Format("{0}", dctSrc["VASUMAN-YOGA,UPA"].Replace("[1]", dctAst["UPACHAYA-HOUSES"]).Replace("[2]", dctAst["VASUMAN-YOGA"]));
					}
					catch
					{
						dctYogs["VASUMAN-YOGA,UPA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (nupa == 2)
				{
					try
					{
						dctYogs["VASUMAN-YOGA"] = string.Format("{0}", dctSrc["VASUMAN-YOGA"].Replace("[1]", upa_pl).Replace("[2]", dctAst["UPACHAYA-HOUSES"]).Replace("[3]", dctAst["VASUMAN-YOGA"]));
					}
					catch
					{
						dctYogs["VASUMAN-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				//chandra dhana yogas
				string cdn = string.Empty;
				string c = string.Empty;
				switch (dctPlHou["Mo"].shno)
				{
					case 1:
					case 4:
					case 7:
					case 10:
						//moon in kendra from sun
						break;
					case 2:
					case 5:
					case 8:
					case 11:
						//moon in panapahara from sun
						break;
					case 3:
					case 6:
					case 9:
					case 12:
						try
						{
							dctYogs["UTTAMADI-YOGA"] = string.Format("{0}", dctSrc["UTTAMADI-YOGA"].Replace("[1]", dctPlHou["Mo"].shno.ToString()).Replace("[2]", dctAst["APOKLIMA-HOUSE"]).Replace("[3]", dctAst["UTTAMADI-YOGA"]).Replace("[4]", dctSrc["UTTAMADI-YOGA," + dctPlHou["Mo"].shno.ToString()]));
						}
						catch
						{
							dctYogs["UTTAMADI-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					default:
						break;
				}
				if (dctPlHou["Ju"].mhno == 6 || dctPlHou["Ju"].mhno == 8 || dctPlHou["Ju"].mhno == 12)
				{//shakata yoga
					if (ncad < 1 && (dctPlHou["Ju"].lordship != "KEN" || dctPlHou["Ju"].lordship != "BOTH"))
					{
						switch (dctPlHou["Ju"].mhno)
						{
							case 6:
							case 8:
							case 12:
								try
								{
									dctYogs["SHAKATA-YOGA,JU"] = string.Format("{0} {1}", dctSrc["SHAKATA-YOGA,JU"].Replace("[1]", dctPlHou["Ju"].mhno.ToString()).Replace("[2]", dctAst["SHAKATA-YOGA"]), dctSrc[string.Format("SHAKATA-YOGA,JU|{0}", dctPlHou["Ju"].mhno)]);
								}
								catch
								{
									dctYogs["SHAKATA-YOGA,JU"] = "Internal error. Please report to help desk.";
								}
								break;
							default:
								break;
						}
					}
				}
				else if (one7shak)
				{//all planents occupying lagna and 7th house
					try
					{
						dctYogs["SHAKATA-YOGA,1-7"] = string.Format("{0}", dctSrc["SHAKATA-YOGA,1-7"].Replace("[1]", dctAst["SHAKATA-YOGA"]));
					}
					catch
					{
						dctYogs["SHAKATA-YOGA,1-7"] = "Internal error. Please report to help desk.";
					}
				}
				else if (four10pak)
				{//all planents occupying 4th and 10th house
					try
					{
						dctYogs["PAKSHI-YOGA"] = string.Format("{0}", dctSrc["PAKSHI-YOGA"].Replace("[1]", dctAst["PAKSHI-YOGA"]));
					}
					catch
					{
						dctYogs["PAKSHI-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				switch (nsank)
				{
					case 7:
						//veena yoga
						try
						{
							dctYogs["VEENA-YOGA"] = string.Format("{0}", dctSrc["VEENA-YOGA"].Replace("[1]", dctAst["VEENA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["VEENA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 6:
						//daama yoga
						try
						{
							dctYogs["DAAMA-YOGA"] = string.Format("{0}", dctSrc["DAAMA-YOGA"].Replace("[1]", dctAst["DAAMA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["DAAMA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 5:
						//paasha yoga
						try
						{
							dctYogs["PAASHA-YOGA"] = string.Format("{0}", dctSrc["PAASHA-YOGA"].Replace("[1]", dctAst["PAASHA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["PAASHA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 4:
						//keedara yoga
						try
						{
							dctYogs["KEDHARA-YOGA"] = string.Format("{0}", dctSrc["KEDHARA-YOGA"].Replace("[1]", dctAst["KEDHARA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["KEDHARA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 3:
						//shoola yoga
						try
						{
							dctYogs["SHOOLA-YOGA"] = string.Format("{0}", dctSrc["SHOOLA-YOGA"].Replace("[1]", dctAst["SHOOLA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["SHOOLA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 2:
						//yuga yoga
						try
						{
							dctYogs["YUGA-YOGA"] = string.Format("{0}", dctSrc["YUGA-YOGA"].Replace("[1]", dctAst["YUGA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						}
						catch
						{
							dctYogs["YUGA-YOGA"] = "Internal error. Please report to help desk.";
						}
						break;
					case 1:
						//gola yoga
						dctYogs["GOLA-YOGA"] = string.Format("{0}", dctSrc["GOLA-YOGA"].Replace("[1]", dctAst["GOLA-YOGA"]).Replace("[2]", dctAst["SANKHYA-YOGAS"]));
						break;
					default:
						break;

				}
				//Aashraya yogas
				if (msgn_pls != string.Empty && fsgn_pls == string.Empty && dsgn_pls == string.Empty)
				{//rajju yoga
					try
					{
						dctYogs["RAJJU-YOGA"] = string.Format("{0}", dctSrc["RAJJU-YOGA"].Replace("[1]", dctAst["RAJJU-YOGA"]).Replace("[2]", dctAst["AASHRAYA-YOGAS"]));
					}
					catch
					{
						dctYogs["RAJJU-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (msgn_pls == string.Empty && fsgn_pls != string.Empty && dsgn_pls == string.Empty)
				{//musala yoga
					try
					{
						dctYogs["MUSALA-YOGA"] = string.Format("{0}", dctSrc["MUSALA-YOGA"].Replace("[1]", dctAst["MUSALA-YOGA"]).Replace("[2]", dctAst["AASHRAYA-YOGAS"]));
					}
					catch
					{
						dctYogs["MUSALA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				else if (msgn_pls == string.Empty && fsgn_pls == string.Empty && dsgn_pls != string.Empty)
				{//nala yoga
					try
					{
						dctYogs["NALA-YOGA"] = string.Format("{0}", dctSrc["NALA-YOGA"].Replace("[1]", dctAst["NALA-YOGA"]).Replace("[2]", dctAst["AASHRAYA-YOGAS"]));
					}
					catch
					{
						dctYogs["NALA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				//Dala yogas
				if (dctPlHou["Ju"].lordship == "KEN" && dctPlHou["Me"].lordship == "KEN" && dctPlHou["Ve"].lordship == "KEN" && dctPlHou["Mo"].lordship == "KEN")
				{//maala yoga
					if (!malefic_in_ken)
					{
						try
						{
							dctYogs["MAALA-YOGA"] = string.Format("{0}", dctSrc["MAALA-YOGA"].Replace("[1]", dctAst["MAALA-YOGA"]).Replace("[2]", dctAst["DALA-YOGAS"]));
						}
						catch
						{
							dctYogs["MAALA-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				else if (dctPlHou["Sa"].lordship == "KEN" && dctPlHou["Su"].lordship == "KEN" && dctPlHou["Ma"].lordship == "Ke" && dctPlHou["Ra"].lordship == "KEN" && dctPlHou["Ke"].lordship == "KEN")
				{//sarpa yoga
					if (!benefic_in_ken)
					{
						try
						{
							dctYogs["SARPA-YOGA"] = string.Format("{0}", dctSrc["SARPA-YOGA"].Replace("[1]", dctAst["SARPA-YOGA"]).Replace("[2]", dctAst["DALA-YOGAS"]));
						}
						catch
						{
							dctYogs["SARPA-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				bool gad = false;
				string gad_1h = string.Empty, gad_2h = string.Empty;
				if (one_hou_pl + four_hou_pl == 7)
				{
					//all planets in 1 & 4 gada yoga
					gad = true;
					gad_1h = dctAst["LAGNA"];
					gad_2h = "2";
				}
				else if (four_hou_pl + svn_hou_pl == 7)
				{
					gad = true;
					gad_1h = "4";
					gad_2h = "7";
				}
				else if (svn_hou_pl + ten_hou_pl == 7)
				{
					gad = true;
					gad_1h = "7";
					gad_2h = "10";
				}
				else if (ten_hou_pl + one_hou_pl == 7)
				{
					gad = true;
					gad_1h = "10";
					gad_2h = dctAst["LAGNA"];
				}
				if (gad)
				{
					try
					{
						//gada yoga
						dctYogs["GADA-YOGA"] = string.Format("{0}", dctSrc["GADA-YOGA"].Replace("[1]", gad_1h).Replace("[2]", gad_2h).Replace("[3]", dctAst["GADA-YOGA"]));
					}
					catch
					{
						dctYogs["GADA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				string ken_hou = string.Empty;
				string tri_hou = string.Empty;
				string lag_hou = string.Empty;
				string trin1_hou = string.Empty;
				string trin2_hou = string.Empty;
				string trin3_hou = string.Empty;
				string yupa_hou = string.Empty;
				string shara_hou = string.Empty;
				string shakti_hou = string.Empty;
				string danda_hou = string.Empty;
				string nauka_hou = string.Empty;
				string koota_hou = string.Empty;
				string chatra_hou = string.Empty;
				string danusta_hou = string.Empty;
				string achand_hou = string.Empty;
				string chakra_hou = string.Empty;
				string samudra_hou = string.Empty;
				bool bken = true, btri = true, blag = true, btrin = true, byupa = true, bshara = true, bshakti = true, bdanda = true, bnauka = true, bkoota = true, bchatra = true, bdanusta = true, bachand = true, bchakra = true, bsamudra = true;
				bool isAdj = false;
				//angular group
				string ben_1hou = string.Empty, ben_7hou = string.Empty, ben_8hou = string.Empty, ben_9hou = string.Empty, ben_10hou = string.Empty;
				//parivarthan yoga
				bool bheri = true;
				PlanetHouse p10L = dctPlHou[dctPlHou[hou10.Split('|')[2]].houselord];
				foreach (KeyValuePair<string, PlanetHouse> item in dctPlHou)
				{
					PlanetHouse pH = item.Value;
					if (pH.code == dctPlHou[pH.houselord].code)
					{//parivarthan/exchange yoga
						PlanetHouse pLL = dctPlHou[asc_h.Split('|')[2]];
						PlanetHouse p2L = dctPlHou[hou2.Split('|')[2]];
						PlanetHouse p4L = dctPlHou[hou4.Split('|')[2]];
						PlanetHouse p5L = dctPlHou[hou5.Split('|')[2]];
						PlanetHouse p7L = dctPlHou[hou7.Split('|')[2]];
						PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
						int maha_yog = -1;
						switch (pH.hno)
						{
							case 2:
							case 4:
							case 5:
							case 7:
							case 9:
							case 10:
							case 11:
								if ((pH.houselord == pLL.code) && (pH.hno == dctPlHou[pLL.houselord].hno))
								{//lagna lord xchange with 2,4,5,7,9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,1"] = string.Format("{0}", dctSrc["MAHA-YOGA,1"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,1"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2) && (pH.houselord == p2L.code) && (pH.hno == dctPlHou[p2L.houselord].hno))
								{//second lord xchange with 4,5,7,9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,2"] = string.Format("{0}", dctSrc["MAHA-YOGA,2"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,2"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4) && (pH.houselord == p4L.code) && (pH.hno == dctPlHou[p4L.houselord].hno))
								{//forth lord xchange with 4,5,7,9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,4"] = string.Format("{0}", dctSrc["MAHA-YOGA,4"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAhA-YOGA,4"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4 && pH.hno != 5) && (pH.houselord == p5L.code) && (pH.hno == dctPlHou[p5L.houselord].hno))
								{//fifth lord xchange with 7,9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,5"] = string.Format("{0}", dctSrc["MAHA-YOGA,5"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,5"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4 && pH.hno != 5 && pH.hno != 7) && (pH.houselord == p7L.code) && (pH.hno == dctPlHou[p7L.houselord].hno))
								{//seventh lord xchange with 9,10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,7"] = string.Format("{0}", dctSrc["MAHA-YOGA,7"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,7"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4 && pH.hno != 5 && pH.hno != 7 && pH.hno != 9) && (pH.houselord == p9L.code) && (pH.hno == dctPlHou[p9L.houselord].hno))
								{//ninth lord xchange with 10,11 lords
									try
									{
										dctYogs["MAHA-YOGA,9"] = string.Format("{0}", dctSrc["MAHA-YOGA,9"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,9"] = "Internal error. Please report to help desk.";
									}
								}
								else if ((pH.hno != 2 && pH.hno != 4 && pH.hno != 5 && pH.hno != 7 && pH.hno != 9 && pH.hno != 10) && (pH.houselord == p5L.code) && (pH.hno == dctPlHou[p5L.houselord].hno))
								{//tenth lord xchange with 11 lord
									try
									{
										dctYogs["MAHA-YOGA,10"] = string.Format("{0}", dctSrc["MAHA-YOGA,10"].Replace("[1]", dctAst[pLL.name]).Replace("[2]", pH.hno.ToString()).Replace("[3]", dctAst[dctPlNames[pH.houselord]]).Replace("[4]", dctAst["MAHA-YOGA"]).Replace("[5]", dctAst["PARIVARTANA-YOGAS"]));
									}
									catch
									{
										dctYogs["MAHA-YOGA,10"] = "Internal error. Please report to help desk.";
									}
								}
								break;
							default:
								break;
						}
						if ((pH.hno == 2 && dctPlHou[pH.houselord].hno == 9) || (pH.hno == 9 && dctPlHou[pH.houselord].hno == 2))
						{
							if ((pH.lordship == "KEN" || pH.lordship == "TRI" || pH.lordship == "BOTH") && (dctPlHou[pH.houselord].lordship == "KEN" || dctPlHou[pH.houselord].lordship == "TRI" || dctPlHou[pH.houselord].lordship == "BOTH"))
							{//khadga yoga
								try
								{
									dctYogs["KHADGA-YOGA"] = string.Format("{0}", dctSrc["KHADGA-YOGA"].Replace("[1]", dctAst[pH.lordship]).Replace("[2]", dctAst[pH.name]).Replace("[3]", dctAst[dctPlHou[pH.houselord].lordship]).Replace("[4]", dctAst[dctPlHou[pH.houselord].name]).Replace("[5]", dctAst["MAHA-YOGA"]));
								}
								catch
								{
									dctYogs["KHADGA-YOGA"] = "Internal error. Please report to help desk.";
								}
							}
						}
					}
					if (pH.lordship == "KEN")
					{
						ken_hou += pH.code + "," + pH.hno.ToString() + "|";
					}
					else if (pH.lordship != "BOTH")
					{
						bken = false;
					}
					if (pH.lordship == "TRI")
					{
						tri_hou += pH.code + "," + pH.hno.ToString() + "|";
					}
					else if (pH.lordship != "BOTH")
					{
						btri = false;
					}
					if (pH.lordship == "BOTH")
					{
						lag_hou += pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						blag = false;
					}
					if (pH.hno == 2 || pH.hno == 6 || pH.hno == 10)
					{
						trin1_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else if (pH.hno == 3 || pH.hno == 7 || pH.hno == 11)
					{
						trin2_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else if (pH.hno == 4 || pH.hno == 8 || pH.hno == 12)
					{
						trin3_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						btrin = false;
					}
					if (pH.hno > 0 && pH.hno < 5)
					{
						yupa_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						byupa = false;
					}
					if (pH.hno > 3 && pH.hno < 8)
					{
						shara_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bshara = false;
					}
					if (pH.hno > 6 && pH.hno < 11)
					{
						shakti_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bshakti = false;
					}
					if (pH.hno == 1 || (pH.hno > 9 && pH.hno < 13))
					{
						danda_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bdanda = false;
					}
					if (pH.hno > 0 && pH.hno < 8)
					{
						nauka_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bnauka = false;
					}
					if (pH.hno > 3 && pH.hno < 11)
					{
						koota_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bkoota = false;
					}
					if (pH.hno == 1 || (pH.hno > 6 && pH.hno < 13))
					{
						chatra_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bchatra = false;
					}
					if ((pH.hno > 0 && pH.hno < 5) || (pH.hno > 9 && pH.hno < 13))
					{
						danusta_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bdanusta = false;
					}
					if (pH.lordship != "KEN" || pH.lordship != "BOTH")
					{
						achand_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bachand = false;
					}
					if (pH.hno == 1 || pH.hno == 3 || pH.hno == 5 || pH.hno == 7 || pH.hno == 9 || pH.hno == 11)
					{
						chakra_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bchakra = false;
					}
					if (pH.hno == 2 || pH.hno == 4 || pH.hno == 6 || pH.hno == 8 || pH.hno == 10 || pH.hno == 12)
					{
						samudra_hou = pH.code + "," + pH.hno.ToString() + "|";
					}
					else
					{
						bsamudra = false;
					}
					if (pH.hno == 1 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_1hou += pH.code + ",";
					}
					else if (pH.hno == 7 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_7hou += pH.code + ",";
					}
					else if (pH.hno == 8 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_8hou += pH.code + ",";
					}
					else if (pH.hno == 9 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_9hou += pH.code + ",";
					}
					else if (pH.hno == 10 && (pH.code == "Me" || pH.code == "Ve" || pH.code == "Ju" || pH.code == "Mo"))
					{
						ben_10hou += pH.code + ",";
					}
					if (pH.hno != 1 && pH.hno != 2 && pH.hno != 7 && pH.hno != 12)
					{
						bheri = false;
					}
				}
				//ravi yogas
				if (ben_7 && ben_8)
				{//lagnadhi yoga
					bool bcan_lag = false;
					if (dctPlHou["Sa"].hno == 7 || dctPlHou["Sa"].hno == 8)
					{//saturn associates 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Sa"].hno + 6 == 7) || (dctPlHou["Sa"].hno + 6 == 8))
					{//saturn 7th aspect to 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Sa"].hno + 2 == 7) || (dctPlHou["Sa"].hno + 2 == 8))
					{//saturn 3rd aspect to 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Sa"].hno + 9 == 7) || (dctPlHou["Sa"].hno + 9 == 8))
					{//saturn 10th aspect to 7 or 8
						bcan_lag = true;
					}
					if (dctPlHou["Ma"].hno == 7 || dctPlHou["Ma"].hno == 8)
					{//mars associates 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Ma"].hno + 6 == 7) || (dctPlHou["Ma"].hno + 6 == 8))
					{//mars 7th aspect to 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Ma"].hno + 3 == 4) || (dctPlHou["Sa"].hno + 3 == 4))
					{//mars 4th aspect to 7 or 8
						bcan_lag = true;
					}
					if (dctPlHou["Su"].hno == 7 || dctPlHou["Su"].hno == 8)
					{//Sun associates 7 or 8
						bcan_lag = true;
					}
					else if ((dctPlHou["Su"].hno + 6 == 7) || (dctPlHou["Su"].hno + 6 == 8))
					{//Sun 7th aspect to 7 or 8
						bcan_lag = true;
					}
					if (!bcan_lag)
					{
						try
						{
							dctYogs["LAGNADHI-YOGA"] = string.Format("{0}", dctSrc["LAGNADHI-YOGA"].Replace("[1]", ben_7hou).Replace("[2]", ben_8hou).Replace("[3]", dctAst["LAGNADHI-YOGA"]));
						}
						catch
						{
							dctYogs["LAGNADHI-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				if (bken)
				{
					bool kh1 = false, kh2 = false, kh3 = false, kh4 = false;
					bool kh1_isbenf = false, kh2_isbenf = false, kh3_isbenf = false, kh4_isbenf = false;
					string kh1_p = string.Empty, kh2_p = string.Empty, kh3_p = string.Empty, kh4_p = string.Empty;
					foreach (string kph in ken_hou.Split('|'))
					{
						//foreach (string ph in kph.Split(','))
						if (kph.Split(',')[0] != "Ra" && kph.Split(',')[0] != "Ke")
						{
							int h = Convert.ToInt32(kph.Split(',')[1]);
							switch (h)
							{
								case 1:
									kh1 = true;
									kh1_p += dctAst[dctPlNames[kph.Split(',')[0]]] + ',';
									if (kph.Split(',')[0] == "Ju" || kph.Split(',')[0] == "Ve" || kph.Split(',')[0] == "Me" || kph.Split(',')[0] == "Mo")
										kh1_isbenf = true;
									break;
								case 4:
									kh2 = true;
									kh2_p += dctAst[dctPlNames[kph.Split(',')[0]]] + ',';
									if (kph.Split(',')[0] == "Ju" || kph.Split(',')[0] == "Ve" || kph.Split(',')[0] == "Me" || kph.Split(',')[0] == "Mo")
										kh2_isbenf = true;
									break;
								case 7:
									kh3 = true;
									kh3_p += dctAst[dctPlNames[kph.Split(',')[0]]] + ',';
									if (kph.Split(',')[0] == "Ju" || kph.Split(',')[0] == "Ve" || kph.Split(',')[0] == "Me" || kph.Split(',')[0] == "Mo")
										kh3_isbenf = true;
									break;
								case 10:
									kh4 = true;
									kh4_p += dctAst[dctPlNames[kph.Split(',')[0]]] + ',';
									if (kph.Split(',')[0] == "Ju" || kph.Split(',')[0] == "Ve" || kph.Split(',')[0] == "Me" || kph.Split(',')[0] == "Mo")
										kh4_isbenf = true;
									break;
								default:
									break;
							}
						}
					}
					foreach (string lph in lag_hou.Split('|'))
					{
						if (lph.Split(',')[0] != "Ra" && lph.Split(',')[0] != "Ke")
						{
							int h = Convert.ToInt32(lph.Split(',')[1]);
							switch (h)
							{
								case 1:
									kh1 = true;
									kh1_p += dctAst[dctPlNames[lph.Split(',')[0]]] + ',';
									if (lph.Split(',')[0] == "Ju" || lph.Split(',')[0] == "Ve" || lph.Split(',')[0] == "Me" || lph.Split(',')[0] == "Mo")
										kh1_isbenf = true;
									break;
								default:
									break;
							}
						}
					}
					//if (bken)
					{
						//check if shak
						//if (kh1 && kh3 && kh2 == false && kh4 == false)
						//{
						//shakata yoga
						//}
						//if (kh3 && kh4 && kh1 == false && kh2 == false)
						//{
						//pakshi yoga
						//}
						//if ((kh1 && kh2  && kh3 == false && kh4 == false) || (kh3 && kh4  && kh1 == false && kh2 == false))
						//{
						//gada yoga
						//}
						if (kh1 && kh1_isbenf && kh3 && kh3_isbenf && kh2 && !kh2_isbenf && kh4 && !kh4_isbenf)
						{//vajra yoga
							try
							{
								dctYogs["VAJRA-YOGA,1"] = string.Format("{0}", dctSrc["VAJRA-YOGA,1"].Replace("[1]", kh1_p + kh3_p).Replace("[2]", kh2_p + kh4_p).Replace("[3]", dctAst["VAJRA-YOGA"]));
							}
							catch
							{
								dctYogs["VAJRA-YOGA,1"] = "Internal error. Please report to help desk.";
							}
						}
						else if (kh1 && !kh1_isbenf && kh3 && !kh3_isbenf && kh2 && kh2_isbenf && kh4 && kh4_isbenf)
						{//vajra yoga
							try
							{
								dctYogs["VAJRA-YOGA,2"] = string.Format("{0}", dctSrc["VAJRA-YOGA,2"].Replace("[1]", kh1_p + kh3_p).Replace("[2]", kh2_p + kh4_p).Replace("[3]", dctAst["VAJRA-YOGA"]));
							}
							catch
							{
								dctYogs["VAJRA-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}
						else if (kh1 && kh3 && kh2 && kh4)
						{//kamala yoga
							try
							{
								dctYogs["KAMALA-YOGA"] = string.Format("{0}", dctSrc["KAMALA-YOGA"].Replace("[1]", dctAst["KAMALA-YOGA"]));
							}
							catch
							{
								dctYogs["KAMALA-YOGA"] = "Internal error. Please report to help desk.";
							}
						}
						if (kh1 || kh2 || kh3 || kh4)
						{ //cancellation of kemadrupa yoga due to precense of planets in kendra from lagna
							bcan_kem = true;
						}
					}
					bool ben_in_ken = false;
					if (!kh1 || (kh1 && kh1_isbenf))
					{
						ben_in_ken = true;
					}
					else
					{
						ben_in_ken = false;
					}
					if (!kh2 || (kh2 && kh2_isbenf))
					{
						ben_in_ken = true;
					}
					else
					{
						ben_in_ken = false;
					}
					if (!kh3 || (kh3 && kh3_isbenf))
					{
						ben_in_ken = true;
					}
					else
					{
						ben_in_ken = false;
					}
					if (!kh4 || (kh4 && kh4_isbenf))
					{
						ben_in_ken = true;
					}
					else
					{
						ben_in_ken = false;
					}
					if (ben_in_ken && (!mel_6) && (!mel_8))
					{//parvatha yoga
						try
						{
							dctYogs["PARVATA-YOGA,BEN|6,8"] = string.Format("{0}", dctSrc["PARVATHA-YOGA,BEN|6,8"].Replace("[1]", dctAst["PARVATHA-YOGA"]));
						}
						catch
						{
							dctYogs["PARVATA-YOGA,BEN|6-8"] = "Internal error. Please report to help desk.";
						}
					}
					if ((dctPlHou[asc_h.Split('|')[2]].lordship == "KEN" || dctPlHou[asc_h.Split('|')[2]].lordship == "BOTH") && (dctPlHou[hou12.Split('|')[2]].lordship == "KEN" || dctPlHou[hou12.Split('|')[2]].lordship == "BOTH"))
					{
						bool basp1 = false, basp2 = false;
						int asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 7th aspect from jupiter
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 7th aspect from jupiter
							basp2 = true;
						}
						asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 5th aspect from jupiter
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 5th aspect from jupiter
							basp2 = true;
						}
						asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 9th aspect from jupiter
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 9th aspect from jupiter
							basp2 = true;
						}
						if (dctPlHou[asc_h.Split('|')[2]].hno == dctPlHou["Ju"].hno)
						{//asc & jupiter in conj
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == dctPlHou["Ju"].hno)
						{//12 lord & jupiter in conj
							basp2 = true;
						}
						asp = (dctPlHou["Me"].hno + 6) > 12 ? (dctPlHou["Me"].hno + 6) - 12 : (dctPlHou["Me"].hno + 6);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 7th aspect from mercury
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 7th aspect from mercury
							basp2 = true;
						}
						if (dctPlHou[asc_h.Split('|')[2]].hno == dctPlHou["Me"].hno)
						{//asc & mercury in conj
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == dctPlHou["Me"].hno)
						{//12 lord & mercury in conj
							basp2 = true;
						}
						asp = (dctPlHou["Ve"].hno + 6) > 12 ? (dctPlHou["Ve"].hno + 6) - 12 : (dctPlHou["Ve"].hno + 6);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 7th aspect from venus
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == asp)
						{//12 lord gets 7th aspect from venus
							basp2 = true;
						}
						if (dctPlHou[asc_h.Split('|')[2]].hno == dctPlHou["Ve"].hno)
						{//asc & venus in conj
							basp1 = true;
						}
						if (dctPlHou[hou12.Split('|')[2]].hno == dctPlHou["Ve"].hno)
						{//12 lord & venus in conj
							basp2 = true;
						}
						if (basp1 && basp2)
						{//parvata yoga
							try
							{
								dctYogs["PARVATA-YOGA,KEN|1,12"] = string.Format("{0}", dctSrc["PARVATHA-YOGA,KEN|1,12"].Replace("[1]", dctAst[dctPlHou[asc_h.Split('|')[2]].houselord]).Replace("[2]", dctAst[dctPlHou[hou12.Split('|')[2]].houselord]).Replace("[3]", dctAst["PARVATHA-YOGA"]));
							}
							catch
							{
								dctYogs["PARVATA-YOGA,KEN|1,12"] = "Internal error. Please report to help desk.";
							}
						}
					}
					PlanetHouse p4L = dctPlHou[hou4.Split('|')[2]];
					PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
					if ((p4L.lordship == "KEN" || p4L.lordship == "BOTH") && (p9L.lordship == "KEN" || p9L.lordship == "BOTH"))
					{
						PlanetStrength pS = checkStrength(dctPlHou[asc_h.Split('|')[2]]);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
						{//kaahala yoga
							try
							{
								dctYogs["KAAHALA-YOGA,1"] = string.Format("{0}", dctSrc["KAAHALA-YOGA,1"].Replace("[1]", dctAst[dctPlHou[hou4.Split('|')[2]].houselord]).Replace("[2]", dctAst[dctPlHou[hou9.Split('|')[2]].houselord]).Replace("[3]", string.Format("{0},{1}", dctPlHou[hou4.Split('|')[2]].hno, dctPlHou[hou9.Split('|')[2]].hno)).Replace("[4]", dctAst[dctPlHou[asc_h.Split('|')[2]].houselord]).Replace("[5]", dctAst["KAAHALA-YOGA"]));
							}
							catch
							{
								dctYogs["KAAHALA-YOGA,1"] = "Internal error. Please report to help desk.";
							}
						}
					}
					PlanetHouse p4 = dctPlHou[hou4.Split('|')[2]];
					PlanetStrength pS4 = checkStrength(p4);
					if (pS4 == PlanetStrength.EXALTED || pS4 == PlanetStrength.OWN)
					{
						PlanetHouse p10 = dctPlHou[hou10.Split('|')[2]];
						bool asp = false;
						if (p4.hno == p10.hno)
						{//associated by 10 lord
							asp = true;
						}
						switch (p10.code)
						{
							case "Su":
							case "Mo":
								asp = checkAspect(p10.hno, p4.hno, 7);
								break;
							case "Ju":
								asp = checkAspect(p10.hno, p4.hno, 7);
								asp = checkAspect(p10.hno, p4.hno, 5);
								asp = checkAspect(p10.hno, p4.hno, 9);
								break;
							case "Me":
								asp = checkAspect(p10.hno, p4.hno, 7);
								break;
							case "Ma":
								asp = checkAspect(p10.hno, p4.hno, 7);
								asp = checkAspect(p10.hno, p4.hno, 4);
								break;
							case "Ve":
								asp = checkAspect(p10.hno, p4.hno, 7);
								break;
							case "Sa":
								asp = checkAspect(p10.hno, p4.hno, 7);
								asp = checkAspect(p10.hno, p4.hno, 3);
								asp = checkAspect(p10.hno, p4.hno, 10);
								break;
							default:
								break;
						}
						if (asp)
						{//kaahala yoga
							try
							{
								dctYogs["KAAHALA-YOGA,2"] = string.Format("{0}", dctSrc["KAAHALA-YOGA,2"].Replace("[1]", dctAst[dctPlHou[hou4.Split('|')[2]].houselord]).Replace("[2]", (pS4 == PlanetStrength.EXALTED) ? dctAst["exalted"] : dctAst["in own house"]).Replace("[3]", dctAst[dctPlHou[hou10.Split('|')[2]].houselord]).Replace("[4]", dctAst["KAAHALA-YOGA"]));
							}
							catch
							{
								dctYogs["KAAHALA-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}

					}
					PlanetHouse pHL = dctPlHou[asc_h.Split('|')[2]];
					PlanetStrength pSL = checkStrength(pHL);
					if (pSL == PlanetStrength.EXALTED && (pHL.lordship == "KEN" || pHL.lordship == "BOTH"))
					{
						bool basp = false;
						int jasp = 0;
						if (pHL.hno == dctPlHou["Ju"].hno)
						{
							basp = true;
							jasp = 1;
						}
						int asp = (dctPlHou["Ju"].hno + 4) > 12 ? (dctPlHou["Ju"].hno + 4) - 12 : (dctPlHou["Ju"].hno + 4);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 5th aspect from jupiter
							basp = true;
							jasp = 5;
						}
						asp = (dctPlHou["Ju"].hno + 6) > 12 ? (dctPlHou["Ju"].hno + 6) - 12 : (dctPlHou["Ju"].hno + 6);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 7th aspect from jupiter
							basp = true;
							jasp = 7;
						}
						asp = (dctPlHou["Ju"].hno + 8) > 12 ? (dctPlHou["Ju"].hno + 8) - 12 : (dctPlHou["Ju"].hno + 8);
						if (dctPlHou[asc_h.Split('|')[2]].hno == asp)
						{//asc lord gets 9th aspect from jupiter
							basp = true;
							jasp = 9;
						}
						if (basp)
						{//chamara yoga
						 //try
						 //{
						 //	dctYogs["CHAAMARA-YOGA,2"] = string.Format("{0}", dctSrc["CHAAMARA-YOGA,2"].Replace("[1]", dctAst[dctPlHou[asc_h.Split('|')[2]].houselord]).Replace("[2]", jasp.ToString()).Replace("[3]", dctAst["CHAAMARA-YOGA"]));
						 //}
						 //catch
						 //{
						 //	dctYogs["CHAMARA-YOGA,2"] = "Internal error. Please report to help desk.";
						 //}
						}
					}
					if ((dctPlHou[hou4.Split('|')[2]].lordship == "KEN" || dctPlHou[hou4.Split('|')[2]].lordship == "BOTH") && (dctPlHou[hou9.Split('|')[2]].lordship == "KEN" || dctPlHou[hou9.Split('|')[2]].lordship == "BOTH"))
					{
						PlanetStrength pS = checkStrength(dctPlHou[asc_h.Split('|')[2]]);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
						{//kaahala yoga
							try
							{
								dctYogs["KAAHALA-YOGA,1"] = string.Format("{0}", dctSrc["KAAHALA-YOGA,1"].Replace("[1]", dctAst[dctPlHou[hou4.Split('|')[2]].houselord]).Replace("[2]", dctAst[dctPlHou[hou9.Split('|')[2]].houselord]).Replace("[3]", string.Format("{0},{1}", dctPlHou[hou4.Split('|')[2]].hno, dctPlHou[hou9.Split('|')[2]].hno)).Replace("[4]", dctAst[dctPlHou[asc_h.Split('|')[2]].houselord]).Replace("[5]", dctAst["KAAHALA-YOGA"]));
							}
							catch
							{
								dctYogs["KAAHALA-YOGA,1"] = "Internal error. Please report to help desk.";
							}
							//dctYogs["KAAHALA-YOGA,1"] = string.Format("{0}", dctSrc["KAAHALA-YOGA,1"].Replace("[1]", dctAst[dctPlNames[asc_h.Split('|')[2]]]).Replace("[2]", dctAst[dctPlNames[hou9.Split('|')[2]]]).Replace("[3]", string.Format("{0},{1}", dctPlHou[hou4.Split('|')[2]].hno, dctPlHou[hou9.Split('|')[2]].hno)).Replace("[4]", dctAst[dctPlNames[asc_h.Split('|')[2]]]).Replace("[5]", dctAst["KHAALA-YOGA"]));
						}
					}
					PlanetHouse p5L = dctPlHou[hou5.Split('|')[2]];
					PlanetHouse p6L = dctPlHou[hou6.Split('|')[2]];
					if ((p5L.lordship == "KEN" || p5L.lordship == "BOTH") && (p6L.lordship == "KEN" || p6L.lordship == "BOTH"))
					{
						PlanetStrength pS = checkStrength(dctPlHou[asc_h.Split('|')[2]]);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
						{//shankha yoga
							try
							{
								dctYogs["SHANKHA-YOGA,2"] = string.Format("{0}", dctSrc["SHANKHA-YOGA,2"].Replace("[1]", dctAst[dctPlNames[hou5.Split('|')[2]]])).Replace("[2]", dctAst[dctPlNames[hou6.Split('|')[2]]]).Replace("[3]", string.Format("{0},{1}", p5L.hno, p6L.hno).Replace("[4]", dctAst[dctPlNames[asc_h.Split('|')[2]]]).Replace("[5]", dctAst["SHANKHA-YOGA"]));
							}
							catch
							{
								dctYogs["SHANKHA-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}
					}
					if ((pHL.lordship == "KEN" || pHL.lordship == "BOTH") && (dctPlHou["Ju"].lordship == "KEN" || dctPlHou["Ju"].lordship == "BOTH") && (dctPlHou["Ve"].lordship == "KEN" || dctPlHou["Ve"].lordship == "BOTH"))
					{
						PlanetStrength pS = checkStrength(p9L);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
						{//bheri yoga
							try
							{
								dctYogs["BHERI-YOGA,2"] = string.Format("{0}", dctSrc["BHERI-YOGA,2"].Replace("[1]", dctAst[dctPlNames[asc_h.Split('|')[2]]]).Replace("[2]", dctAst[dctPlNames[hou9.Split('|')[2]]]).Replace("[3]", string.Format("{0},{1},{2}", pHL.hno, dctPlHou["Ju"].hno, dctPlHou["Ve"].hno)).Replace("[3]", dctAst["BHERI-YOGA"]));
							}
							catch
							{
								dctYogs["BHERI-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}
					}
				}
				else if (ken_hou == string.Empty && lag_hou == string.Empty)
				{//vapi yoga
				 //dctYogs["VAPI-YOGA"] = string.Format("{0}", dctSrc["VAPI-YOGA"].Replace("[1]", dctAst["VEPI-YOGA"]));
				}
				if (btri)
				{//shringataka yoga
					try
					{
						dctYogs["SHRINGATAKA-YOGA"] = string.Format("{0}", dctSrc["SHRINGATAKA-YOGA"].Replace("[1]", tri_hou).Replace("[2]", dctAst["SHRINGATAKA-YOGA"]));
					}
					catch
					{
						dctYogs["SHRINGATAKA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				if (btrin)
				{//hala yoga
					try
					{
						dctYogs["HALA-YOGA"] = string.Format("{0}", dctSrc["HALA-YOGA"].Replace("[1]", (trin1_hou != string.Empty) ? trin1_hou : (trin2_hou != string.Empty) ? trin2_hou : trin3_hou).Replace("[2]", dctAst["HALA-YOGA"]));
					}
					catch
					{
						dctYogs["HALA-YOGA"] = "Internal error. Please report to help desk.";
					}
				}
				if (ben_1hou.Split(',').Count() > 0 || ben_7hou.Split(',').Count() > 0 || ben_9hou.Split(',').Count() > 0 || ben_10hou.Split(',').Count() > 0)
				{//chamara yoga
					string benfs = string.Empty;
					string hses = string.Empty;
					if (ben_1hou.Split(',').Count() > 0)
					{
						foreach (var bnf in ben_1hou.Split(','))
						{
							if (bnf != string.Empty)
								benfs += dctAst[dctPlNames[bnf]];
						}
						hses += "1,";
					}
					if (ben_7hou.Split(',').Count() > 0)
					{
						foreach (var bnf in ben_7hou.Split(','))
						{
							if (bnf != string.Empty)
								benfs += dctAst[dctPlNames[bnf]];
						}
						hses += "7,";
					}
					if (ben_9hou.Split(',').Count() > 0)
					{
						foreach (var bnf in ben_9hou.Split(','))
						{
							if (bnf != string.Empty)
								benfs += dctAst[dctPlNames[bnf]];
						}
						hses += "9,";
					}
					if (ben_10hou.Split(',').Count() > 1)
					{
						foreach (var bnf in ben_1hou.Split(','))
						{
							if (bnf != string.Empty)
								benfs += dctAst[dctPlNames[bnf]];
						}
						hses += "10,";
					}
					//try
					//{
					//	dctYogs["CHAAMARA-YOGA,1"] = string.Format("{0}", dctSrc["CHAAMARA-YOGA,1"].Replace("[1]", benfs).Replace("[2]", hses.Trim()).Replace("[3]", dctAst["CHAAMARA-YOGA"]));
					//}
					//catch
					//{
					//	dctYogs["CHAMARA-YOGA,1"] = "Internal error. Please report to help desk.";
					//}
				}
				PlanetHouse pLAG = dctPlHou[asc_h.Split('|')[2]];
				//PlanetHouse p10L = dctPlHou[dctPlHou[hou10.Split('|')[2]].houselord];
				if (pLAG.signtype == "M" && p10L.signtype == "M")
				{
					PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
					PlanetStrength pS = checkStrength(p9L);
					if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
					{//shankha yoga
						try
						{
							dctYogs["SHANKHA-YOGA,3"] = string.Format("{0}", dctSrc["SHANKHA-YOGA,3"].Replace("[1]", dctAst[dctPlNames[pLAG.code]]).Replace("[2]", dctAst[dctPlNames[p10L.code]]).Replace("[3]", dctAst["movable"]).Replace("[4]", dctAst[dctPlNames[p9L.code]]).Replace("[5]", dctAst["SHANKHA-YOGA"]));
						}
						catch
						{
							dctYogs["SHANKHA-YOGA,3"] = "Internal error. Please report to help desk.";
						}
					}
				}
				if (bheri)
				{
					PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
					PlanetStrength pS = checkStrength(p9L);
					if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN || pS == PlanetStrength.FRIEND)
					{//bheri yoga
						try
						{
							dctYogs["BHERI-YOGA"] = string.Format("{0}", dctSrc["BHERI-YOGA,2"].Replace("[1]", dctAst[dctPlNames[p9L.name]]).Replace("[2]", dctAst["BHERI-YOGA"]));
						}
						catch
						{
							dctYogs["BHERI-YOGA"] = "Internal error. Please report to help desk.";
						}
					}
				}
				PlanetStrength pLAGS = checkStrength(pLAG);
				if (pLAGS == PlanetStrength.EXALTED || pLAGS == PlanetStrength.MOOLTRIKONA || pLAGS == PlanetStrength.OWN || pLAGS == PlanetStrength.FRIEND)
				{
					PlanetHouse p9L = dctPlHou[hou9.Split('|')[2]];
					if (p9L.lordship == "KEN" || p9L.lordship == "BOTH")
					{
						PlanetStrength pS = checkStrength(p9L);
						if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN)
						{//lakshmi yoga
							string exa = (pS == PlanetStrength.EXALTED) ? "exalted" : (pS == PlanetStrength.MOOLTRIKONA) ? "mooltrikona" : "own";
							try
							{
								dctYogs["LAKSHMI-YOGA"] = string.Format("{0}", dctSrc["LAKSHMI-YOGA"].Replace("[1]", dctAst[dctPlNames[pLAG.code]]).Replace("[2]", dctAst[dctPlNames[p9L.code]]).Replace("[3]", p9L.hno.ToString()).Replace("[4]", dctAst[exa]).Replace("[5]", dctAst["LAKSHMI-YOGA"]));
							}
							catch
							{
								dctYogs["LAKSHMI-YOGA"] = "Internal error. Please report to help desk.";
							}
						}
					}
				}
				if (!bsnp && !banp && !bcan_kem)
				{
					try
					{
						dctYogs["KEMADRUMA-YOGA,1"] = string.Format("{0}", dctSrc["KEMADRUMA-YOGA,1"].Replace("[1]", dctAst["KEMADRUMA-YOGA"]));
					}
					catch
					{
						dctYogs["KEMADRUMA-YOGA,1"] = "Internal error. Please report to help desk.";
					}
				}
				else if (!bcan_kem)
				{
					if (dctPlHou["Mo"].hno == 1 || dctPlHou["Mo"].hno == 7)
					{
						if ((dctPlHou["Mo"].hno == dctPlHou["Ju"].hno) || (dctPlHou["Ju"].hno + 4 == dctPlHou["Mo"].hno) || (dctPlHou["Ju"].hno + 6 == dctPlHou["Mo"].hno) || (dctPlHou["Ju"].hno + 8 == dctPlHou["Mo"].hno))
						{ //moon in asc or 7th house gains jupiter aspect
						  //kemadhruma2 yoga
							try
							{
								dctYogs["KEMADRUMA-YOGA,2"] = string.Format("{0}", dctSrc["KEMADRUMA-YOGA,2"].Replace("[1]", dctPlHou["Mo"].hno.ToString()).Replace("[2]", dctAst["KEMADRUMA-YOGA"]));
							}
							catch
							{
								dctYogs["KEMADRUMA-YOGA,2"] = "Internal error. Please report to help desk.";
							}
						}
					}
				}
				else if (!bcan_kem && bmon_inmic)
				{
					try
					{
						dctYogs["KEMADRUMA-YOGA,3"] = string.Format("{0}", dctSrc["KEMARUMA-YOGA,3"].Replace("[1]", dctAst[dctPlHou["Mo"].sign]).Replace("[2]", inmic_asp).Replace("[3]", dctAst["KEMADRUMA-YOGA"]));
					}
					catch
					{
						dctYogs["KEMADRUMA-YOGA,3"] = "Internal error. Please report to help desk.";
					}
				}
				else if (!bcan_kem && bmon_in_rk)
				{
					try
					{
						dctYogs["KEMADRUMA-YOGA,4"] = string.Format("{0}", dctSrc["KEMARUMA-YOGA,4"].Replace("[1]", dctPlHou["Mo"].hno.ToString()).Replace("[2]", dctAst["KEMADRUMA-YOGA"]));
					}
					catch
					{
						dctYogs["KEMADRUMA-YOGA,4"] = "Internal error. Please report to help desk.";
					}
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("eX.Message", line.ToString());
			}
			return new JsonResult(dctYogs);
		}
		string sortPls(string pls)
		{
			Dictionary<string, int> dctPls = new Dictionary<string, int>();
			dctPls["Su"] = 1;
			dctPls["Mo"] = 2;
			dctPls["Ju"] = 3;
			dctPls["Me"] = 4;
			dctPls["Ve"] = 5;
			dctPls["Ma"] = 6;
			dctPls["Sa"] = 7;
			string[] arrPls = pls.Split('-');
			int j = 0;
			string sortPls = string.Empty;
			for (int i = 0; i < arrPls.Length; i++)
			{
				for (j = i + 1; j < arrPls.Length; j++)
				{
					if (dctPls[arrPls[j]] < dctPls[arrPls[i]])
					{
						string tmp = arrPls[i];
						arrPls[i] = arrPls[j];
						arrPls[j] = tmp;
					}
				}
			}
			for (int k = 0; k < arrPls.Length; k++)
				sortPls += arrPls[k] + "-";
			return sortPls.Remove(sortPls.Length - 1);
		}
		bool checkAspect(int hno1, int hno2, int a)
		{
			int asp = (hno1 + a) > 12 ? (hno1 + a) - 12 : (hno1 + a);
			return (hno2 == asp);
		}
		PlanetStrength checkStrength(PlanetHouse pl)
		{
			//bool strong_asc = false;
			PlanetStrength pS = PlanetStrength.NORMAL;
			switch (pl.code)
			{
				case "Su":
					if (pl.sign == "ar")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "le")
					{
						if (pl.pos >= 4 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
					}
					else if (pl.sign == "le")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "cn" || pl.sign == "ar" || pl.sign == "sa" || pl.sign == "sc")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "cp" || pl.sign == "aq") pS = PlanetStrength.ENEMY;
					else if (pl.sign == "li") pS = PlanetStrength.DEBILIATED;
					break;
				case "Mo":
					if (pl.sign == "ta")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "ta")
					{
						if (pl.pos >= 4 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "cn")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "le" || pl.sign == "ar" || pl.sign == "sc" || pl.sign == "sa" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "ge" || pl.sign == "vi" || pl.sign == "sa" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.ENEMY;
					}
					else if (pl.sign == "sc") pS = PlanetStrength.DEBILIATED;
					break;
				case "Ju":
					if (pl.sign == "cn")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "sa")
					{//own
						if (pl.pos >= 0 && pl.pos <= 10)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "pi")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "le" || pl.sign == "sc" || pl.sign == "ar")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "ta" || pl.sign == "li") pS = PlanetStrength.ENEMY;
					else if (pl.sign == "cp") pS = PlanetStrength.DEBILIATED;
					break;
				case "Ve":
					if (pl.sign == "pi")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "li")
					{//own
						if (pl.pos >= 0 && pl.pos <= 15)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "ta")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "cp" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "le" || pl.sign == "ta" || pl.sign == "li") pS = PlanetStrength.ENEMY;
					else if (pl.sign == "sc") pS = PlanetStrength.DEBILIATED;
					break;
				case "Ma":
					if (pl.sign == "cp")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "ar")
					{//own
						if (pl.pos >= 0 && pl.pos <= 12)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "sc")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "cp" || pl.sign == "aq") pS = PlanetStrength.ENEMY;
					else if (pl.sign == "le" || pl.sign == "cn" || pl.sign == "sa" || pl.sign == "pi")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					break;
				case "Me":
					if (pl.sign == "vi")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "vi")
					{//own
						if (pl.pos >= 16 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}

					}
					else if (pl.sign == "ge")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "cp" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "sa" || pl.sign == "pi" || pl.sign == "ar" || pl.sign == "sc")
					{//friend house
						pS = PlanetStrength.ENEMY;
					}
					else if (pl.sign == "pi") pS = PlanetStrength.DEBILIATED;
					break;
				case "Sa":
					if (pl.sign == "li")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "aq")
					{//own
						if (pl.pos >= 0 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "cp")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "ta")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "le") pS = PlanetStrength.ENEMY;
					else if (pl.sign == "ar") pS = PlanetStrength.DEBILIATED;
					break;
				default:
					break;
			}
			return pS;
		}
		[HttpPost("RecfyBTSML")]
		[ResponseCache(NoStore = true, Duration = 0)]
		public async Task<ActionResult> RecfyBTSML(SMLParams smlParms)// string dobf, string dobr, string latlng, string timezone, int dstofset, int ayanid)
		{
			_logger.LogInformation("RecfyBTSML");
			try
			{
				RecfyBirthTime rcf = new RecfyBirthTime();
				RecfyBirthTime rcf1 = await checkSML(smlParms.dobf, smlParms.lat, smlParms.lng, smlParms.timezone, smlParms.dstofset, smlParms.ayanid);
				if (!string.IsNullOrEmpty(smlParms.dobr))
				{
					RecfyBirthTime rcf2 = await checkSML(smlParms.dobr, smlParms.lat, smlParms.lng, smlParms.timezone, smlParms.dstofset, smlParms.ayanid);
					rcf.recfyDOB = string.Format("{0}|{1}", rcf1.recfyDOB, rcf2.recfyDOB);
					rcf.rem = string.Format("{0}|{1}", rcf1.rem, rcf2.rem);
				}
				else
				{
					rcf.recfyDOB = string.Format("{0}", rcf1.recfyDOB);
					rcf.rem = string.Format("{0}", rcf1.rem);
				}
				//Task.WaitAll(tk);
				return new JsonResult(rcf);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		public async Task<RecfyBirthTime> checkSML(string dob, double lat, double lng, string timezone, int dstofset, int ayanid)
		{
			RecfyBirthTime rcfBT = new RecfyBirthTime();
			rcfBT.recfyDOB = string.Empty;
			try
			{
				//return await Task.Run(() =>
				//{
				string tz = TZConvert.IanaToWindows(timezone);
				string ayan = string.Empty;
				string[] fdt = dob.Split('|');
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				Dictionary<int, string> dctHou = new Dictionary<int, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				foreach (var dt in fdt)
				{
					if (dt.Trim() == string.Empty) continue;
					int d = Convert.ToInt32(dt.Split('T')[0].Split('-')[2]);
					int m = Convert.ToInt32(dt.Split('T')[0].Split('-')[1]);
					int y = Convert.ToInt32(dt.Split('T')[0].Split('-')[0]);
					int hou = Convert.ToInt32(dt.Split('T')[1].Split(':')[0]);
					int min = Convert.ToInt32(dt.Split('T')[1].Split(':')[1]);
					int sec = Convert.ToInt32(dt.Split('T')[1].Split(':')[2]);
					//double lat = Convert.ToDouble(latlng.Split('|')[0]);
					//double lng = Convert.ToDouble(latlng.Split('|')[1]);
					if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
					{
						TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
						TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
						double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
						ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
					}
					Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, true);

					//mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					//mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
					//update lunar nodes
					string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
					foreach (var ppos in mHoro.planetsPos)
					{
						foreach (var pl in ppos.Value.Split('|'))
						{
							if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
							else if (pl.Split(' ')[1] == "MEAN_NODE")
							{
								rsn = ppos.Key;
								rdeg = pl.Split(' ')[0];
							}
							if (rsn != string.Empty && asn != string.Empty) break;
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					int r1 = 0, r2 = 0;
					bool asc = false;
					for (r1 = 0; r1 < 12; r1++)
					{
						if (asc)
						{
							r2++;
							ras[r1] += "|" + (r2).ToString();
							dctHou[r2] = ras[r1];
						}
						if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
						{
							foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
							{
								if (pl.Split(' ')[1] == "AC")
								{
									asc = true;
									r2++;
									ras[r1] += "|" + (r2).ToString();
									dctHou[r2] = ras[r1];
								}
							}
						}
						if (r2 == 12)
						{
							break;
						}
						if (r1 == 11) r1 = -1;
					}
					r2 = 0;
					asc = false;
					for (r1 = 0; r1 < 12; r1++)
					{
						if (asc) r2++;
						if (ras[r1].Split('|')[0] == rsn)
						{
							asc = true;
							r2++;
						}
						if (r2 == 7)
						{
							ksn = ras[r1].Split('|')[0];
							break;
						}
						if (r1 == 11) r1 = -1;
					}

					int rpos = calcHno(asn, rsn);
					int kpos = calcHno(rsn, ksn);
					//var mn = i + 11;
					//if (mn > 15) mn -= 15;
					if (mHoro.planetsPos.ContainsKey(ksn))
					{
						var eP = mHoro.planetsPos[ksn];
						mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
					}
					else
					{
						mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
					}
					// plPos[sign] = ePls;
					mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
					foreach (string ra in ras)
					{
						bool bpl = false;
						string pkey = string.Empty;
						if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
						{
							foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
							{
								int hno = Convert.ToInt32(ra.Split('|')[3]);
								string lordship = string.Empty;
								switch (hno)
								{
									case 1:
										lordship = "BOTH";
										break;
									case 5:
									case 9:
										lordship = "TRI";
										break;
									case 4:
									case 7:
									case 10:
										lordship = "KEN";
										break;
									default:
										break;
								}
								if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
									string[] pld = pl.Split(' ')[0].Split('.');
									PlanetHouse pHou = new PlanetHouse
									{
										code = pl.Split(' ')[1],
										name = dctPlNames[pl.Split(' ')[1]],
										hno = Convert.ToInt32(ra.Split('|')[3]),
										mhno = -1,
										shno = -1,
										pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
										sign = ra.Split('|')[0],
										signtype = ra.Split('|')[1],
										lordship = lordship,
										houselord = ra.Split('|')[2]
									};
									dctPlHou[pl.Split(' ')[1]] = pHou;
								}
							}
						}
					}
					string asc_sls = string.Empty;
					string mo_sls = string.Empty;
					string su_sls = string.Empty;
					string asgn = string.Empty;
					string ssgn = string.Empty;
					string msgn = string.Empty;
					double adeg = 0f;
					double sdeg = 0f;
					double mdeg = 0f;
					double asl_deg = 0f;
					double ssl_deg = 0f;
					double msl_deg = 0f;
					foreach (var ppos in mHoro.planetsPos)
					{
						foreach (var pl in ppos.Value.Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asgn = pl.Split(' ')[0];
								string[] pdg = pl.Split(' ')[0].Split('.');
								string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
								adeg = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
								asc_sls = getSUBZ(ppos.Key, adeg);

							}
							else if (pl.Split(' ')[1] == "Mo")
							{
								msgn = pl.Split(' ')[0];
								string[] pdg = pl.Split(' ')[0].Split('.');
								string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
								mdeg = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
								mo_sls = getSUBZ(ppos.Key, mdeg);
							}
							else if (pl.Split(' ')[1] == "Su")
							{
								ssgn = pl.Split(' ')[0];
								string[] pdg = pl.Split(' ')[0].Split('.');
								string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
								sdeg = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
								su_sls = getSUBZ(ppos.Key, sdeg);
							}
							if (asc_sls != string.Empty && mo_sls != string.Empty && su_sls != string.Empty) break;
						}
						if (asc_sls != string.Empty && mo_sls != string.Empty && su_sls != string.Empty) break;
					}
					foreach (var ppos in mHoro.planetsPos)
					{
						foreach (var pl in ppos.Value.Split('|'))
						{
							if (pl.Split(' ')[1].ToLower() == asc_sls.Split('-')[1].Substring(0, 2).ToLower())
							{
								string[] pdg = pl.Split(' ')[0].Split('.');
								string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
								asl_deg = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
							}
							else if (pl.Split(' ')[1].ToLower() == mo_sls.Split('-')[1].Substring(0, 2).ToLower())
							{
								string[] pdg = pl.Split(' ')[0].Split('.');
								string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
								msl_deg = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
							}
							else if (pl.Split(' ')[1].ToLower() == su_sls.Split('-')[1].Substring(0, 2).ToLower())
							{
								string[] pdg = pl.Split(' ')[0].Split('.');
								string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
								ssl_deg = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
							}
							if (asl_deg != 0f && msl_deg != 0f && ssl_deg != 0f) break;
						}
						if (asl_deg != 0f && msl_deg != 0f && ssl_deg != 0f) break;
					}
					foreach (var ph in dctPlHou)
					{
						double zp = zstart[ph.Value.sign] + ph.Value.pos;
						foreach (var hp in mHoro.housePos)
						{
							int v_iter = Convert.ToInt32(hp.Key);
							int cur_h = (v_iter == 12) ? 1 : v_iter + 1;
							double mins1 = dmsToDec(Convert.ToInt32(mHoro.housePos[hp.Key].Split('°')[0]), Convert.ToInt32(mHoro.housePos[hp.Key].Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.housePos[hp.Key].Split('\'')[1].Split('\"')[0]));
							double mins2 = dmsToDec(Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('°')[0]), Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('\'')[1].Split('\"')[0]));
							if (mins2 < mins1)
							{
								if (zp >= 0 && zp < mins2) dctPlHou[ph.Key].phno = v_iter;
							}
							else
							{
								if (zp >= mins1 && zp < mins2) dctPlHou[ph.Key].phno = v_iter;
							}
							//if (mins2 < mins1)
							//{
							//	if (zp > 0 && zp < mins2 || zp >= mins2 && zp < 360) { dctPlHou[ph.Key].phno = cur_h; break; }
							//}
							//else
							//{
							//	if (zp >= mins1 && zp < mins2) { dctPlHou[ph.Key].phno = v_iter; break; }
							//}
						}
					}
					foreach (var ph in dctPlHou)
					{
						List<int> lstsgs = new List<int>();
						string str = getSUBZ(ph.Value.sign, zstart[ph.Value.sign] + ph.Value.pos);
						string ru = str.Split('-')[1];
						ru = string.Format("{0}{1}", char.ToUpper(ru[0]), ru[1]);
						lstsgs.Add(Convert.ToInt32(dctPlHou[ru].phno));
						if (!lstsgs.Contains(ph.Value.phno)) lstsgs.Add(ph.Value.phno);
						string oh = string.Empty;
						foreach (var r in ras)
						{
							if (r.Split('|')[2] == ru)
							{
								oh += r.Split('|')[3] + ',';
								if (!lstsgs.Contains(Convert.ToInt32(r.Split('|')[3]))) lstsgs.Add(Convert.ToInt32(r.Split('|')[3]));
							}
						}
						oh = string.Empty;
						foreach (var r in ras)
						{
							if (r.Split('|')[2] == ph.Value.code)
							{
								oh += r.Split('|')[3] + ',';
								if (!lstsgs.Contains(Convert.ToInt32(r.Split('|')[3]))) lstsgs.Add(Convert.ToInt32(r.Split('|')[3]));
							}
						}
						lstsgs.Sort();
						//string p_sigs = String.Join(",", lstsgs.ToArray());
						dctPlHou[ph.Key].sigs = lstsgs.ToArray();
					}
					double hpos1 = dmsToDec(Convert.ToInt32(mHoro.housePos["1"].Split('°')[0]), Convert.ToInt32(mHoro.housePos["1"].Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.housePos["1"].Split('\'')[1].Split('\"')[0]));
					double hpos2 = dmsToDec(Convert.ToInt32(mHoro.housePos["2"].Split('°')[0]), Convert.ToInt32(mHoro.housePos["2"].Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.housePos["2"].Split('\'')[1].Split('\"')[0]));
					string asc_sigs = string.Empty;
					//planets in house
					foreach (var ph in dctPlHou)
					{
						if (ph.Value.pos >= hpos1 && ph.Value.pos < hpos2) { asc_sigs += ph.Key + ','; }
						else if ((hpos1 > hpos2) && ((ph.Value.pos >= hpos1 && ph.Value.pos < 360) || (ph.Value.pos >= 0 && ph.Value.pos < hpos2)))
						{
							asc_sigs += ph.Key + ',';
						}
					}
					//planets in the star of the occupants of asc sign
					var psigs = asc_sigs.Split(',');
					for (var p = 0; p < psigs.Length; p++)
					{
						foreach (var ph in dctPlHou)
						{
							BirthStar str = calcBirthStar(ph.Value.pos, ph.Value.sign);
							string ru = str.ruler.Substring(0, 2);
							ru = string.Format("{0}{1}", char.ToUpper(ru[0]), ru[1]);
							if (ru == psigs[p]) asc_sigs += ph.Key + ",";
						}
					}
					//planets in asc star
					foreach (var ph in dctPlHou)
					{
						BirthStar str = calcBirthStar(ph.Value.pos, ph.Value.sign);
						if (str.ruler == asc_sls.Split('-')[1])
						{
							asc_sigs += ph.Key + ",";
						}
					}
					string asgn_lrd = asc_sls.Split('-')[0];
					asc_sigs += string.Format("{0}{1}", char.ToUpper(asgn_lrd[0]), asgn_lrd[1]) + ",";
					bool sig1 = false;
					bool sig7 = false;
					bool sig10 = false;
					foreach (var i in dctPlHou["Su"].sigs)
					{
						if (i == 1) sig1 = true;
						else if (i == 7) sig7 = true;
						else if (i == 10) sig10 = true;
					}
					foreach (var i in dctPlHou["Mo"].sigs)
					{
						if (i == 1) sig1 = true;
						else if (i == 7) sig7 = true;
						else if (i == 10) sig10 = true;
					}
					psigs = asc_sigs.Split(',');
					string ahsigs = string.Empty;
					for (var p = 0; p < psigs.Length; p++)
					{
						if (psigs[p].Trim() == string.Empty) continue;
						foreach (var i in dctPlHou[psigs[p]].sigs)
						{
							if (i == 1) sig1 = true;
							else if (i == 7) sig7 = true;
							else if (i == 10) sig10 = true;
							ahsigs = i.ToString() + ",";
						}
						ahsigs = string.Join(",", dctPlHou[psigs[p]].sigs);
					}
					if (sig1 && sig7 && sig10)
					{
						rcfBT.recfyDOB = dt;
						string susigs = string.Join(",", dctPlHou["Su"].sigs);
						string mosigs = string.Join(",", dctPlHou["Mo"].sigs);
						rcfBT.rem = string.Format("Sun({0}), Moon({1}), Lagna({2}) signifies 1-7-10", susigs, mosigs, ahsigs);
						break;
					}
					else
					{
						rcfBT.rem = "NOT SIGNIFY";
					}
				}
				return rcfBT;
				//});
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				rcfBT.rem = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				return rcfBT;
			}
		}
		[HttpGet("RecfyBTEx")]
		[ResponseCache(NoStore = true, Duration = 0)]
		public async Task<ActionResult> RecfyBTEx(string dob, string tob, string latlng, string timezone, double tzofset, int ayanid)
		{
			_logger.LogInformation("RecfyBTEx");
			try
			{
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
				//update lunar nodes
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1] == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				string asc_sls = string.Empty;
				string mo_sls = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC")
						{
							string[] pdg = pl.Split(' ')[0].Split('.');
							string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
							double plpos = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
							asc_sls = getSUBZ(ppos.Key, plpos);

						}
						else if (pl.Split(' ')[1] == "Mo")
						{
							string[] pdg = pl.Split(' ')[0].Split('.');
							string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
							double plpos = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
							mo_sls = getSUBZ(ppos.Key, plpos);
						}
						if (asc_sls != string.Empty && mo_sls != string.Empty) break;
					}
					if (asc_sls != string.Empty && mo_sls != string.Empty) break;
				}
				//LEVEL 1
				string a_signL = asc_sls.Split('-')[0];
				string a_starL = asc_sls.Split('-')[1];
				string a_subL = asc_sls.Split('-')[2];
				string m_signL = mo_sls.Split('-')[0];
				string m_starL = mo_sls.Split('-')[1];
				string m_subL = mo_sls.Split('-')[2];
				bool bL1 = false, bL2 = false, bL3 = false;
				if (a_signL == m_signL)
				{
					bL1 = true;
				}
				else
				{
					string star = getSSSL3(a_signL, mHoro);
					if (star.Split('|')[2] == m_signL) bL1 = true;
					else if (star.Split('|')[1] == m_signL) bL1 = true;
					else if (star.Split('|')[0] == m_signL) bL1 = true;
					star = getSSSL3(m_signL, mHoro);
					if (star.Split('|')[2] == a_signL) bL1 = true;
					else if (star.Split('|')[1] == a_signL) bL1 = true;
					else if (star.Split('|')[0] == a_signL) bL1 = true;
					else
					{
						star = string.Empty;
						foreach (var ppos in mHoro.planetsPos)
						{
							foreach (var pl in ppos.Value.Split('|'))
							{
								if (pl.Split(' ')[1].ToLower() == m_subL.Substring(0, 2))
								{
									var pos = pl.Split(' ')[0].Trim();
									//console.log('pos len=' + pos.split('.').length.toString());
									//int mins = 0;
									//if (pos.IndexOf('.') > -1 && pos.Split('.')[1] != "")
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60) + ((pos.Split('.')[1] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[1], 10));
									//else
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60);

									double dl = dmsToDec(zstart[ppos.Key] + Convert.ToInt32(pos.Split('.')[0]), Convert.ToInt32(pos.Split('.')[1]), Convert.ToInt32(pos.Split('.')[2]));
									star = calcSSSL3(dl);
									break;
								}
							}
							if (star != string.Empty) break;
						}
						if (a_signL == star.Split('|')[1] || a_signL == star.Split('|')[2]) bL1 = true;
					}
				}
				//LEVEL 2
				if (a_starL == m_starL)
				{
					bL2 = true;
				}
				else
				{
					string star = getSSSL3(a_starL, mHoro);
					if (star.Split('|')[2] == m_starL) bL2 = true;
					else if (star.Split('|')[1] == m_starL) bL2 = true;
					else if (star.Split('|')[0] == m_starL) bL2 = true;
					star = getSSSL3(m_starL, mHoro);
					if (star.Split('|')[2] == a_starL) bL2 = true;
					else if (star.Split('|')[1] == a_starL) bL2 = true;
					else if (star.Split('|')[0] == a_starL) bL2 = true;
					else
					{
						star = string.Empty;
						foreach (var ppos in mHoro.planetsPos)
						{
							foreach (var pl in ppos.Value.Split('|'))
							{
								if (pl.Split(' ')[1].ToLower() == m_subL.Substring(0, 2))
								{
									var pos = pl.Split(' ')[0].Trim();
									//console.log('pos len=' + pos.split('.').length.toString());
									//int mins = 0;
									//if (pos.IndexOf('.') > -1 && pos.Split('.')[1] != "")
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60) + ((pos.Split('.')[1] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[1], 10));
									//else
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60);

									double dl = dmsToDec(zstart[ppos.Key] + Convert.ToInt32(pos.Split('.')[0]), Convert.ToInt32(pos.Split('.')[1]), Convert.ToInt32(pos.Split('.')[2]));
									star = calcSSSL3(dl);
									break;
								}
							}
							if (star != string.Empty) break;
						}
						if (a_starL == star.Split('|')[1] || a_starL == star.Split('|')[2]) bL2 = true;
					}
				}
				//LEVEL 3
				if (a_subL == m_subL)
				{
					bL3 = true;
				}
				else
				{
					string star = getSSSL3(a_starL, mHoro);
					if (star.Split('|')[2] == m_subL) bL3 = true;
					else if (star.Split('|')[1] == m_subL) bL3 = true;
					else if (star.Split('|')[0] == m_subL) bL3 = true;
					star = getSSSL3(m_starL, mHoro);
					if (star.Split('|')[2] == a_subL) bL3 = true;
					else if (star.Split('|')[1] == a_subL) bL3 = true;
					else if (star.Split('|')[0] == a_subL) bL3 = true;
					else
					{
						star = string.Empty;
						foreach (var ppos in mHoro.planetsPos)
						{
							foreach (var pl in ppos.Value.Split('|'))
							{
								if (pl.Split(' ')[1].ToLower() == m_subL.Substring(0, 2))
								{
									var pos = pl.Split(' ')[0].Trim();
									//console.log('pos len=' + pos.split('.').length.toString());
									//int mins = 0;
									//if (pos.IndexOf('.') > -1 && pos.Split('.')[1] != "")
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60) + ((pos.Split('.')[1] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[1], 10));
									//else
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60);

									double dl = dmsToDec(zstart[ppos.Key] + Convert.ToInt32(pos.Split('.')[0]), Convert.ToInt32(pos.Split('.')[1]), Convert.ToInt32(pos.Split('.')[2]));
									star = calcSSSL3(dl);
									break;
								}
							}
							if (star != string.Empty) break;
						}
						if (a_subL == star.Split('|')[1] || a_subL == star.Split('|')[2]) bL3 = true;
					}
				}
				RecfyBirthTime rcfBT = new RecfyBirthTime();
				if (bL1 && bL2 && bL3)
				{
					rcfBT.rem = "Birth Time Rectification not required as Ruling Planets agrees";
					rcfBT.recfyDOB = "";
				}
				else
				{
					rcfBT = await SuggestBT(dob, tob, latlng, timezone, (int)tzofset, ayanid);
					if (rcfBT.rem == "Birth Time Rectified")
					{
						rcfBT.rem = string.Format("Birth Time Rectification is required as Ruling Planets did not agree. Rectified Birth Time is {0}", rcfBT.recfyDOB);
						//rcfBT.recfyDOB = "RECTIFIED BIRTHTIME IS: ";
					}
					else
					{
						rcfBT.rem = string.Format("Birth Time Rectification is required as Ruling Planets did not agree. Our App could not rectify within 5min range from the given DOB, please try providing a best match close to 5min range");
					}
				}
				return new JsonResult(rcfBT);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		public string getSSSL3(string lord, Horoscope horo)
		{
			Dictionary<string, int> zstart = new Dictionary<string, int>();
			zstart["ar"] = 0;
			zstart["ta"] = 30;
			zstart["ge"] = 60;
			zstart["cn"] = 90;
			zstart["le"] = 120;
			zstart["vi"] = 150;
			zstart["li"] = 180;
			zstart["sc"] = 210;
			zstart["sa"] = 240;
			zstart["cp"] = 270;
			zstart["aq"] = 300;
			zstart["pi"] = 330;
			string star = string.Empty;
			foreach (var ppos in horo.planetsPos)
			{
				foreach (var pl in ppos.Value.Split('|'))
				{
					if (pl.Split(' ')[1].ToLower() == lord.Substring(0, 2))
					{
						var pos = pl.Split(' ')[0].Trim();
						//string p = pl.Split(' ')[0].TrimEnd('.');
						//                  p = (pl.Split(' ')[0].IndexOf('.') != -1) ? pl.Split(' ')[0] : pl.Split(' ')[0] + ".0";
						//console.log('pos len=' + pos.split('.').length.toString());
						//int mins = 0;
						//if (p.IndexOf('.') > -1 && p.Split('.')[1] != "")
						//    mins = (zstart[ppos.Key] + Convert.ToInt32(p.Split('.')[0], 10)) * 60 + Convert.ToInt32(p.Split('.')[1], 10);
						//else
						//    mins = (zstart[ppos.Key] + Convert.ToInt32(p.Split(' ')[0].Split('.')[0], 10)) * 60;

						double dl = dmsToDec(zstart[ppos.Key] + Convert.ToInt32(pos.Split('.')[0]), Convert.ToInt32(pos.Split('.')[1]), Convert.ToInt32(pos.Split('.')[2]));
						return calcSSSL3(dl);
					}
				}
			}
			return "";
		}
		public string calcSSSL3(double pos)
		{
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				using (StreamReader r3 = new StreamReader(string.Format(@"{0}\sublords.json", astClient)))
				{
					string json = r3.ReadToEnd();
					List<SubLord> sublords = JsonConvert.DeserializeObject<List<SubLord>>(json);
					string subz = string.Empty;
					foreach (var item in sublords)
					{
						var degs = item.deg;
						//var s_mins = Convert.ToInt32(degs.Split('-')[0].Split('.')[0], 10) * 60 + Convert.ToInt32(degs.Split('-')[0].Split('.')[1]);
						//var e_mins = Convert.ToInt32(degs.Split('-')[1].Split('.')[0], 10) * 60 + Convert.ToInt32(degs.Split('-')[1].Split('.')[1]);
						var s_mins = dmsToDec(Convert.ToInt32(degs.Split('-')[0].Split('.')[0]), Convert.ToInt32(degs.Split('-')[0].Split('.')[1]), Convert.ToInt32(degs.Split('-')[0].Split('.')[2]));
						var e_mins = dmsToDec(Convert.ToInt32(degs.Split('-')[1].Split('.')[0]), Convert.ToInt32(degs.Split('-')[1].Split('.')[1]), Convert.ToInt32(degs.Split('-')[1].Split('.')[2]));
						//var deg_s = parseFloat(degs.split('-')[0].split('.')[0] + '.' + degs.split('-')[0].split('.')[1]);
						//var deg_e = parseFloat(degs.split('-')[1].split('.')[0] + '.' + degs.split('-')[1].split('.')[1]);
						//console.log(s_mins);
						//console.log(e_mins);
						if (pos >= s_mins && pos < e_mins)
						{
							//console.log(s_mins);
							//console.log(e_mins);
							return item.sign + '|' + item.star + '|' + item.sub;
						}
					}
					return "";
				}
			}
			catch (Exception eX)
			{
				return eX.Message;
			}
		}
		[HttpGet("SuggestBT")]
		public async Task<RecfyBirthTime> SuggestBT(string dob, string tob, string latlng, string timezone, int dstofset, int ayanid)
		{
			_logger.LogInformation("SuggestBT");
			try
			{
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				int numTrys = 10;
				string ds = string.Format("{0}-{1}-{2} {3}:{4}:{5},0", i3, u2, u1, u4, u5, u6);
				DateTime dtBT = new DateTime(i3, (int)u2, (int)u1, (int)u4, (int)u5, (int)u6);
				int am = 0, sm = 5, atrys = 0, strys = 0;
				bool adfied = false;
				DateTime dtA = dtBT;
				while (numTrys > 0)
				{
					int min = 0;
					if (am < 6 && !adfied) { am++; min = am; atrys++; }
					else if (sm > -1) { sm--; min -= sm; strys++; }
					DateTime dtR = dtBT.AddMinutes(min);
					mHoro = await getHoroscope(dtR.Year, dtR.Month, dtR.Day, dtR.Hour, dtR.Minute, dtR.Second, u7, u8, tz, dstofset, ayan, ayanid, false);
					//update lunar nodes
					string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
					foreach (var ppos in mHoro.planetsPos)
					{
						foreach (var pl in ppos.Value.Split('|'))
						{
							if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
							else if (pl.Split(' ')[1] == "MEAN_NODE")
							{
								rsn = ppos.Key;
								rdeg = pl.Split(' ')[0];
							}
							if (rsn != string.Empty && asn != string.Empty) break;
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
					int r1 = 0, r2 = 0;
					bool asc = false;
					for (r1 = 0; r1 < 12; r1++)
					{
						if (asc) r2++;
						if (ras[r1] == rsn)
						{
							asc = true;
							r2++;
						}
						if (r2 == 7)
						{
							ksn = ras[r1];
							break;
						}
						if (r1 == 11) r1 = -1;
					}
					int rpos = calcHno(asn, rsn);
					int kpos = calcHno(rsn, ksn);
					if (mHoro.planetsPos.ContainsKey(ksn))
					{
						var eP = mHoro.planetsPos[ksn];
						mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
					}
					else
					{
						mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
					}
					// plPos[sign] = ePls;
					mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
					JsonResult jObj = (JsonResult)BTRL3Check(mHoro);
					RecfyBirthTime rcfB = (RecfyBirthTime)jObj.Value;
					if (rcfB.recfyDOB == string.Empty)
					{
						if (!adfied)
						{
							dtA = dtR;
							adfied = true;
						}
						else
						{
							RecfyBirthTime rcfBT = new RecfyBirthTime();
							rcfBT.rem = "Birth Time Rectified";
							if (atrys < strys)
								rcfBT.recfyDOB = string.Format("{0}/{1}/{2} {3}:{4}", dtA.Day, dtA.Month, dtA.Year, dtA.Hour, dtA.Minute);
							else
								rcfBT.recfyDOB = string.Format("{0}/{1}/{2} {3}:{4}", dtR.Day, dtR.Month, dtR.Year, dtR.Hour, dtR.Minute);
							return rcfBT;
						}
					}
					numTrys--;
				}
				if (adfied)
				{
					RecfyBirthTime rcf = new RecfyBirthTime();
					rcf.rem = "Birth Time Rectified";
					rcf.recfyDOB = string.Format("{0}/{1}/{2} {3}:{4}", dtA.Day, dtA.Month, dtA.Year, dtA.Hour, dtA.Minute);
					return rcf;
				}
				else
				{
					RecfyBirthTime rcf = new RecfyBirthTime();
					rcf.rem = "Birth Time Not Rectified";
					rcf.recfyDOB = "Could not rectify birthtime within 5 minute range, currently our App can perform BTR upto 5 minute range.";
					return rcf;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				RecfyBirthTime rcf = new RecfyBirthTime();
				rcf.rem = "Birth Time Not Rectified";
				rcf.recfyDOB = "An exception has occurred while performing the check, please report the error to help desk.";
				return rcf;
			}
		}
		[HttpGet("BTRL3Check")]
		public ActionResult BTRL3Check(Horoscope mHoro)
		{
			_logger.LogInformation("BTRL3Check");
			try
			{
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string asc_sls = string.Empty;
				string mo_sls = string.Empty;
				double aplpos = 0L;
				double mplpos = 0L;
				string asgn = string.Empty;
				string msgn = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC")
						{
							string[] pdg = pl.Split(' ')[0].Split('.');
							string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
							aplpos = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
							asc_sls = getSUBZ(ppos.Key, aplpos);
							asgn = ppos.Key;
						}
						else if (pl.Split(' ')[1] == "Mo")
						{
							string[] pdg = pl.Split(' ')[0].Split('.');
							string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
							mplpos = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2])); //Convert.ToDouble(p);
							mo_sls = getSUBZ(ppos.Key, mplpos);
							msgn = ppos.Key;
						}
						if (asc_sls != string.Empty && mo_sls != string.Empty) break;
					}
					if (asc_sls != string.Empty && mo_sls != string.Empty) break;
				}
				//LEVEL 1
				string a_signL = asc_sls.Split('-')[0];
				string a_starL = asc_sls.Split('-')[1];
				string a_subL = asc_sls.Split('-')[2];
				string m_signL = mo_sls.Split('-')[0];
				string m_starL = mo_sls.Split('-')[1];
				string m_subL = mo_sls.Split('-')[2];
				bool bL1 = false, bL2 = false, bL3 = false;
				if (a_signL == m_signL)
				{
					bL1 = true;
				}
				else
				{
					string star = getSSSL3(a_signL, mHoro);
					if (star.Split('|')[2] == m_signL) bL1 = true;
					else if (star.Split('|')[1] == m_signL) bL1 = true;
					else if (star.Split('|')[0] == m_signL) bL1 = true;
					star = getSSSL3(m_signL, mHoro);
					if (star.Split('|')[2] == a_signL) bL1 = true;
					else if (star.Split('|')[1] == a_signL) bL1 = true;
					else if (star.Split('|')[0] == a_signL) bL1 = true;
					else
					{
						star = string.Empty;
						foreach (var ppos in mHoro.planetsPos)
						{
							foreach (var pl in ppos.Value.Split('|'))
							{
								if (pl.Split(' ')[1].ToLower() == m_subL.Substring(0, 2))
								{
									var pos = pl.Split(' ')[0].Trim();
									//console.log('pos len=' + pos.split('.').length.toString());
									//int mins = 0;
									//if (pos.IndexOf('.') > -1 && pos.Split('.')[1] != "")
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60) + ((pos.Split('.')[1] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[1], 10));
									//else
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60);

									double dl = dmsToDec(zstart[ppos.Key] + Convert.ToInt32(pos.Split('.')[0]), Convert.ToInt32(pos.Split('.')[1]), Convert.ToInt32(pos.Split('.')[2]));
									star = calcSSSL3(dl);
									break;
								}
							}
							if (star != string.Empty) break;
						}
						if (a_signL == star.Split('|')[1] || a_signL == star.Split('|')[2]) bL1 = true;
					}
				}
				//LEVEL 2
				if (a_starL == m_starL)
				{
					bL2 = true;
				}
				else
				{
					string star = getSSSL3(a_starL, mHoro);
					if (star.Split('|')[2] == m_starL) bL2 = true;
					else if (star.Split('|')[1] == m_starL) bL2 = true;
					else if (star.Split('|')[0] == m_starL) bL2 = true;
					star = getSSSL3(m_starL, mHoro);
					if (star.Split('|')[2] == a_starL) bL2 = true;
					else if (star.Split('|')[1] == a_starL) bL2 = true;
					else if (star.Split('|')[0] == a_starL) bL2 = true;
					else
					{
						star = string.Empty;
						foreach (var ppos in mHoro.planetsPos)
						{
							foreach (var pl in ppos.Value.Split('|'))
							{
								if (pl.Split(' ')[1].ToLower() == m_subL.Substring(0, 2))
								{
									var pos = pl.Split(' ')[0].Trim();
									//console.log('pos len=' + pos.split('.').length.toString());
									//int mins = 0;
									//if (pos.IndexOf('.') > -1 && pos.Split('.')[1] != "")
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60) + ((pos.Split('.')[1] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[1], 10));
									//else
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60);

									double dl = dmsToDec(zstart[ppos.Key] + Convert.ToInt32(pos.Split('.')[0]), Convert.ToInt32(pos.Split('.')[1]), Convert.ToInt32(pos.Split('.')[2]));
									star = calcSSSL3(dl);
									break;
								}
							}
							if (star != string.Empty) break;
						}
						if (a_starL == star.Split('|')[1] || a_starL == star.Split('|')[2]) bL2 = true;
					}
				}
				//LEVEL 3
				if (a_subL == m_subL)
				{
					bL3 = true;
				}
				else
				{
					string star = getSSSL3(a_starL, mHoro);
					if (star.Split('|')[2] == m_subL) bL3 = true;
					else if (star.Split('|')[1] == m_subL) bL3 = true;
					else if (star.Split('|')[0] == m_subL) bL3 = true;
					star = getSSSL3(m_starL, mHoro);
					if (star.Split('|')[2] == a_subL) bL3 = true;
					else if (star.Split('|')[1] == a_subL) bL3 = true;
					else if (star.Split('|')[0] == a_subL) bL3 = true;
					else
					{
						star = string.Empty;
						foreach (var ppos in mHoro.planetsPos)
						{
							foreach (var pl in ppos.Value.Split('|'))
							{
								if (pl.Split(' ')[1].ToLower() == m_subL.Substring(0, 2))
								{
									var pos = pl.Split(' ')[0].Trim();
									//console.log('pos len=' + pos.split('.').length.toString());
									//int mins = 0;
									//if (pos.IndexOf('.') > -1 && pos.Split('.')[1] != "")
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60) + ((pos.Split('.')[1] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[1], 10));
									//else
									//    mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60);

									double dl = dmsToDec(zstart[ppos.Key] + Convert.ToInt32(pos.Split('.')[0]), Convert.ToInt32(pos.Split('.')[1]), Convert.ToInt32(pos.Split('.')[2]));
									star = calcSSSL3(dl);
									break;
								}
							}
							if (star != string.Empty) break;
						}
						if (a_subL == star.Split('|')[1] || a_subL == star.Split('|')[2]) bL3 = true;
					}
				}
				RecfyBirthTime rcfBT = new RecfyBirthTime();
				if (bL1 && bL2 && bL3)
				{
					rcfBT.rem = "The rectified birth time is matched with moon SSL";
					rcfBT.recfyDOB = "";
				}
				else
				{
					//check if there is a link with asc sub sub lord
					string subz = getSUBZ(asgn, aplpos);
					string ass = getSubSub(aplpos, string.Format("{0}-{1}", subz.Split('-')[1], subz.Split('-')[2]));
					if (ass == m_starL)
					{
						rcfBT.rem = "The rectified birth time sublord is matched with moon SSL";
						rcfBT.recfyDOB = "";
					}
					else
					{
						string msubz = getSUBZ(msgn, mplpos);
						string mss = getSubSub(mplpos, string.Format("{0}-{1}", msubz.Split('-')[1], msubz.Split('-')[2]));
						string star = string.Empty;
						if (m_starL == ass || m_subL == ass || mss == ass)
						{
							rcfBT.rem = "The rectified birth time sublord is matched with moon SSL";
							rcfBT.recfyDOB = "";
						}
						else
						{
							star = string.Empty;
							string mssgn = string.Empty;
							double msplpos = 0L;
							foreach (var ppos in mHoro.planetsPos)
							{
								foreach (var pl in ppos.Value.Split('|'))
								{
									if (pl.Split(' ')[1].ToLower() == m_starL.Substring(0, 2))
									{
										var pos = pl.Split(' ')[0].Trim();
										//console.log('pos len=' + pos.split('.').length.toString());
										//int mins = 0;
										//if (pos.IndexOf('.') > -1 && pos.Split('.')[1] != "")
										//	mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60) + ((pos.Split('.')[1] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[1], 10));
										//else
										//	mins = (zstart[ppos.Key] + ((pos.Split('.')[0] == "0") ? 0 : Convert.ToInt32(pos.Split('.')[0], 10)) * 60);
										msplpos = dmsToDec(zstart[ppos.Key] + Convert.ToInt32(pos.Split('.')[0]), Convert.ToInt32(pos.Split('.')[1]), Convert.ToInt32(pos.Split('.')[2]));
										star = calcSSSL3(msplpos);
										mssgn = ppos.Key;
										break;
									}
								}
								if (star != string.Empty) break;
							}
							//string mssubz = getSUBZ(mssgn, msplpos);
							string msss = getSubSub(msplpos, string.Format("{0}-{1}", star.Split('|')[1], star.Split('|')[2]));
							if (ass == star.Split('|')[1] || ass == star.Split('|')[2] || ass == msss) bL3 = true;
							rcfBT.rem = "Birth Time Rectification is required as Ruling Planets did not agree";
							rcfBT.recfyDOB = "RECTIFY";
						}
					}
				}
				return new JsonResult(rcfBT);
			}
			catch (Exception eX)
			{
				RecfyBirthTime rcfBT = new RecfyBirthTime();
				rcfBT.rem = "An exception has occurred, please report this error to help desk.";
				rcfBT.recfyDOB = string.Format("ERROR:{0}", eX.Message);
				return new JsonResult(rcfBT);
			}
		}
		[HttpGet("GetPlan")]
		public async Task<Plan> GetPlan(string uuid)
		{
			_logger.LogInformation("GetPlan");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var astUsers = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
				var filter = Builders<Plan>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = astUsers.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = astUsers.Find<Plan>(filter).FirstOrDefault();
						if (plan.credits == 0)
						{
							//double cdy = (DateTime.Now - plan._id.CreationTime).TotalDays;
							//if (cdy < 2) plan.credits = 1;
							plan.credits = 1;
						}

						//if (plan.name != "com.mypubz.eportal.astrologer" && plan.credits < 2)
						//{
						//    try
						//    {
						//        var trzc = db.GetCollection<Trendz>("Trendz");
						//        var trz = new Trendz
						//        {
						//            uuid = uuid,
						//            credits = plan.credits,
						//            date = DateTime.Now.ToShortDateString()
						//        };
						//        await trzc.InsertOneAsync(trz);
						//    }
						//    catch
						//    {
						//    }
						//}
						return plan;
					}
					else
					{
						var plan = new Plan
						{
							uuid = uuid,
							name = "com.mypubz.eportal.dob",
							credits = 1,
							dobs = "",
							rating = 0
						};
						await astUsers.InsertOneAsync(plan);
						return plan;
					}
				}
				catch (Exception eX)
				{
					var plan = new Plan
					{
						uuid = uuid,
						name = eX.Message,
						credits = 5,
						dobs = "",
						rating = 0
					};
					return plan;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var plan = new Plan
				{
					uuid = uuid,
					name = err,
					credits = 5,
					dobs = "",
					rating = 0
				};
				return plan;
			}
		}
		[HttpGet("AddDOB")]
		public async Task<Plan> AddDOB(string uuid, string dob)
		{
			_logger.LogInformation("AddDOB");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
				var filter = Builders<Plan>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = dbPlan.Find<Plan>(filter).FirstOrDefault();
						string dobs = (plan.dobs == string.Empty) ? dob : string.Format("{0}|{1}", plan.dobs, dob);
						var update = Builders<Plan>.Update.Set("dobs", dobs);
						int crds = (plan.credits > 0) ? plan.credits - 1 : plan.credits;
						update = update.Set("credits", crds);
						plan = await dbPlan.FindOneAndUpdateAsync<Plan>(filter, update);
						return plan;
					}
					else
					{
						var plan = new Plan
						{
							uuid = uuid,
							name = "entry not found",
							credits = -1,
							dobs = "",
							rating = 0
						};
						return plan;
					}
				}
				catch (Exception eX)
				{
					var plan = new Plan
					{
						uuid = uuid,
						name = eX.Message,
						credits = -1,
						dobs = "",
						rating = 0
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Plan
				{
					uuid = uuid,
					name = eX.Message,
					credits = -1,
					dobs = "",
					rating = 0
				};
				return plan;
			}
		}
		[HttpGet("RemDOB")]
		public async Task<Plan> RemDOB(string uuid, string dob)
		{
			_logger.LogInformation("RemDOB");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
				var filter = Builders<Plan>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = dbPlan.Find<Plan>(filter).FirstOrDefault();
						string dobs = string.Empty;
						foreach (var d in plan.dobs.Split('|')) if (d != dob) dobs += string.Format("{0}|", d);
						dobs = (dobs.Length > 0) ? dobs.Remove(dobs.Length - 1).Trim() : dobs;
						var update = Builders<Plan>.Update.Set("dobs", dobs);
						plan = await dbPlan.FindOneAndUpdateAsync<Plan>(filter, update);
						plan.dobs = dobs;
						var arch = new Arch
						{
							uuid = uuid,
							dob = dob
						};
						var dbArch = await Task.Run(() => { return db.GetCollection<Arch>("Arch"); });
						await dbArch.InsertOneAsync(arch);
						return plan;
					}
					else
					{
						var plan = new Plan
						{
							uuid = uuid,
							name = "entry not found",
							credits = -1,
							dobs = "",
							rating = 0
						};
						return plan;
					}
				}
				catch (Exception eX)
				{
					var plan = new Plan
					{
						uuid = uuid,
						name = eX.Message,
						credits = -1,
						dobs = "",
						rating = 0
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Plan
				{
					uuid = uuid,
					name = eX.Message,
					credits = -1,
					dobs = "",
					rating = 0
				};
				return plan;
			}
		}
		[HttpGet("SetPlan")]
		public async Task<Plan> SetPlan(string uuid, string name)
		{
			_logger.LogInformation("SetPlan");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
				var filter = Builders<Plan>.Filter.Eq("uuid", uuid);
				var update = Builders<Plan>.Update.Set("name", name);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = await dbPlan.FindOneAndUpdateAsync<Plan>(filter, update);
						if (name == "com.mypubz.eportal.astrologer")
						{
							var dbQuo = await Task.Run(() => { return db.GetCollection<Quota>("Quota"); });
							var quo = new Quota
							{
								uuid = uuid,
								qta = 10
							};
							await dbQuo.InsertOneAsync(quo);
						}
						//var dbOfr = db.GetCollection<Offer>("Offer");
						//var filter2 = Builders<Offer>.Filter.Eq("uuid", uuid);
						//long cnt2 = dbOfr.CountDocuments(filter2);
						//if (cnt2 > 0L)
						//{
						//    var update2 = Builders<Offer>.Update.Set("avail", false);
						//    await dbOfr.FindOneAndUpdateAsync<Offer>(filter2, update2);
						//}
						return plan;
					}
					else
					{
						var plan = new Plan
						{
							uuid = uuid,
							name = name,
							credits = -1,
							dobs = "",
							rating = 0
						};
						await dbPlan.InsertOneAsync(plan);
						return plan;
					}
				}
				catch (Exception eX)
				{
					var plan = new Plan
					{
						uuid = uuid,
						name = eX.Message,
						credits = -1,
						dobs = "",
						rating = 0
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Plan
				{
					uuid = uuid,
					name = eX.Message,
					credits = -1,
					dobs = "",
					rating = 0
				};
				return plan;
			}
		}
		[HttpPost("UpdatePlan")]
		public async Task<Plan> UpdatePlan([FromBody] Plan pln)
		{
			_logger.LogInformation("SetPlan");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
				var filter = Builders<Plan>.Filter.Eq("uuid", pln.uuid);
				var update = Builders<Plan>.Update.Set("name", pln.name);
				update = update.Set("dobs", pln.dobs);
				update = update.Set("credits", pln.credits);
				update = update.Set("rating", pln.rating);
				update = update.Set("review", pln.review);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = await dbPlan.FindOneAndUpdateAsync<Plan>(filter, update);
						return plan;
					}
					else
					{
						var plan = new Plan
						{
							uuid = pln.uuid,
							name = pln.name,
							credits = -1,
							dobs = "",
							rating = 0
						};
						return plan;
					}
				}
				catch (Exception eX)
				{
					var plan = new Plan
					{
						uuid = pln.uuid,
						name = eX.Message,
						credits = -1,
						dobs = "",
						rating = 0
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Plan
				{
					uuid = pln.uuid,
					name = eX.Message,
					credits = -1,
					dobs = "",
					rating = 0
				};
				return plan;
			}
		}
		[HttpGet("AddCredits")]
		public async Task<Plan> AddCredits(string uuid, int credits)
		{
			_logger.LogInformation("AddCredits");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
				var filter = Builders<Plan>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = dbPlan.Find<Plan>(filter).FirstOrDefault();
						var update = Builders<Plan>.Update.Set("credits", (plan.credits == -1) ? credits : plan.credits + credits);
						var pln = await dbPlan.FindOneAndUpdateAsync<Plan>(filter, update);
						return pln;

					}
					else
					{//this should not happen
						var plan = new Plan
						{
							uuid = uuid,
							name = "entry not found",
							credits = -1,
							dobs = "",
							rating = 0
						};
						return plan;
					}
				}
				catch
				{
					var plan = new Plan
					{
						uuid = uuid,
						name = "exception",
						credits = -1,
						dobs = "",
						rating = 0
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Plan
				{
					uuid = uuid,
					name = eX.Message,
					credits = -1,
					dobs = "",
					rating = 0
				};
				return plan;
			}
		}
		[HttpGet("AddRating")]
		public async Task<Plan> AddRating(string uuid, int rating)
		{
			_logger.LogInformation("AddRating");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
				var filter = Builders<Plan>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = dbPlan.Find<Plan>(filter).FirstOrDefault();
						var update = Builders<Plan>.Update.Set("rating", rating);
						var pln = await dbPlan.FindOneAndUpdateAsync<Plan>(filter, update);
						pln.rating = rating;
						return pln;

					}
					else
					{//this should not happen
						var plan = new Plan
						{
							uuid = uuid,
							name = "entry not found",
							credits = -1,
							dobs = "",
							rating = 0
						};
						return plan;
					}
				}
				catch
				{
					var plan = new Plan
					{
						uuid = uuid,
						name = "exception",
						credits = -1,
						dobs = "",
						rating = 0
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Plan
				{
					uuid = uuid,
					name = eX.Message,
					credits = -1,
					dobs = "",
					rating = 0
				};
				return plan;
			}
		}
		[HttpGet("AppRating")]
		public async Task<IActionResult> AppRating(string pid)
		{
			_logger.LogInformation("Rating");
			try
			{
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Rating>("Rating"); });
				var q = from doc in dbPlan.AsQueryable()
						where doc.pid == pid
						group doc by (Rating)null into gr
						select new
						{
							tot_ratings = gr.Count(),
							rating = (double)gr.Average(x => x.rating)
						};
				return new JsonResult(q.First());

			}
			catch (Exception eX)
			{
				return new JsonResult(string.Format("error:{0}", eX.Message));
			}

		}

		[HttpPost("UserRating")]
		public async Task<Rating> UserRating([FromBody] Rating rating)
		{
			_logger.LogInformation("UserRating");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Rating>("Rating"); });
				var filter1 = Builders<Rating>.Filter.Eq("uuid", rating.uuid);
				var filter2 = Builders<Rating>.Filter.Eq("pid", rating.pid);
				var tickResp = dbPlan.FindAsync(filter1 & filter2);
				Rating tres = tickResp.Result.FirstOrDefault();
				if (tres != null)
				{
					var update = Builders<Rating>.Update.Set("rating", rating.rating);
					update = update.Set("avatar", rating.avatar);
					var pln = await dbPlan.FindOneAndUpdateAsync<Rating>(filter1 & filter2, update);
					return pln;
				}
				else
				{
					var plan = new Rating
					{
						uuid = rating.uuid,
						name = rating.name,
						avatar = rating.avatar,
						pid = rating.pid,
						rating = rating.rating,
						review = rating.review,
					};
					await dbPlan.InsertOneAsync(plan);
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Rating
				{
					uuid = rating.uuid,
					pid = rating.pid,
					rating = rating.rating,
					review = eX.Message
				};
				return plan;
			}
		}
		[HttpPost("UserReview")]
		public async Task<Rating> UserReview([FromBody] Rating rating)
		{
			_logger.LogInformation("UserReview");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Rating>("Rating"); });
				var filter1 = Builders<Rating>.Filter.Eq("uuid", rating.uuid);
				var filter2 = Builders<Rating>.Filter.Eq("pid", rating.pid);
				var tickResp = dbPlan.FindAsync(filter1 & filter2);
				Rating tres = tickResp.Result.FirstOrDefault();
				if (tres != null)
				{
					var update = Builders<Rating>.Update.Set("review", rating.review);
					update = update.Set("rating", rating.rating);
					var pln = await dbPlan.FindOneAndUpdateAsync<Rating>(filter1 & filter2, update);
					return pln;
				}
				else
				{
					var plan = new Rating
					{
						uuid = rating.uuid,
						name = rating.name,
						avatar = rating.avatar,
						pid = rating.pid,
						rating = rating.rating,
						review = rating.review,
					};
					await dbPlan.InsertOneAsync(plan);
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Rating
				{
					uuid = rating.uuid,
					pid = rating.pid,
					rating = rating.rating,
					review = eX.Message
				};
				return plan;
			}
		}
		[HttpGet("UserReviews")]
		public async Task<List<Rating>> UserReviews(string pid)
		{
			_logger.LogInformation("UserReviews");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Rating>("Rating"); });
				var filter = Builders<Rating>.Filter.Eq("pid", pid);
				return await dbPlan.Find(filter).ToListAsync<Rating>();
			}
			catch (Exception eX)
			{
				var plan = new Rating
				{
					uuid = "",
					pid = pid,
					rating = 0,
					review = eX.Message
				};
				List<Rating> lst = new List<Rating>();
				lst.Add(plan);
				return lst;
			}
		}
		[HttpGet("GetAllReviews")]
		public async Task<List<Rating>> GetAllReviews()
		{
			_logger.LogInformation("UserReviews");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Rating>("Rating"); });
				return await dbPlan.Find(_ => true).ToListAsync();
			}
			catch (Exception eX)
			{
				var plan = new Rating
				{
					uuid = "",
					pid = "",
					rating = 0,
					review = eX.Message
				};
				List<Rating> lst = new List<Rating>();
				lst.Add(plan);
				return lst;
			}
		}
		[HttpGet("GetAstroTalks")]
		public async Task<List<AstroTalk>> GetAstroTalks(string aid, string uid)
		{
			_logger.LogInformation("AstroTalk");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<AstroTalk>("AstroTalk"); });
				//return await dbPlan.Find(_ => true).ToListAsync();
				var f1 = Builders<AstroTalk>.Filter.Eq("aid", aid);
				var f2 = Builders<AstroTalk>.Filter.Eq("uid", uid);
				return await dbPlan.Find(f1 & f2).ToListAsync();
			}
			catch (Exception eX)
			{
				var plan = new AstroTalk
				{
					uuid = "",
					aid = eX.Message
				};
				List<AstroTalk> lst = new List<AstroTalk>();
				lst.Add(plan);
				return lst;
			}
		}
		[HttpGet("GetAllAstroTalks")]
		public async Task<List<AstroTalk>> GetAllAstroTalks(string aid, string uid)
		{
			_logger.LogInformation("AstroTalk");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<AstroTalk>("AstroTalk"); });
				return await dbPlan.Find(_ => true).ToListAsync();
			}
			catch (Exception eX)
			{
				var plan = new AstroTalk
				{
					uuid = "",
					aid = eX.Message
				};
				List<AstroTalk> lst = new List<AstroTalk>();
				lst.Add(plan);
				return lst;
			}
		}
		[HttpGet("AddReview")]
		public async Task<Plan> AddReview(string uuid, string review)
		{
			_logger.LogInformation("AddReview");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
				var filter = Builders<Plan>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = dbPlan.Find<Plan>(filter).FirstOrDefault();
						var update = Builders<Plan>.Update.Set("review", review);
						var pln = await dbPlan.FindOneAndUpdateAsync<Plan>(filter, update);
						pln.review = review;
						return pln;

					}
					else
					{//this should not happen
						var plan = new Plan
						{
							uuid = uuid,
							name = "entry not found",
							credits = -1,
							dobs = "",
							rating = 0,
							review = ""
						};
						return plan;
					}
				}
				catch
				{
					var plan = new Plan
					{
						uuid = uuid,
						name = "exception",
						credits = -1,
						dobs = "",
						rating = 0,
						review = ""
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var plan = new Plan
				{
					uuid = uuid,
					name = eX.Message,
					credits = -1,
					dobs = "",
					rating = 0,
					review = ""
				};
				return plan;
			}
		}
		[HttpPost("AddAstrologer")]
		public async Task<Astrologer> AddAstrolger([FromBody] Astrologer ast)
		{
			_logger.LogInformation("AddAstrologer");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Astrologer>("Astrologer"); });
				try
				{
					await dbTick.InsertOneAsync(ast);
					return ast;
				}
				catch (Exception eX)
				{
					ast.status = eX.Message;
					return ast;
				}
			}
			catch (Exception eX)
			{
				ast.status = eX.Message;
				return ast;
			}
		}
		[HttpPost("AddAstroBio")]
		public async Task<AstroBio> AddAstroBio([FromBody] AstroBio ab)
		{
			try
			{
				var db = client.GetDatabase("myypub");
				var dbBio = await Task.Run(() => { return db.GetCollection<AstroBio>("AstroBio"); });
				try
				{
					await dbBio.InsertOneAsync(ab);
					return ab;
				}
				catch (Exception eX)
				{
					ab.bio = eX.Message;
					return ab;
				}
			}
			catch (Exception eX)
			{
				ab.bio = eX.Message;
				return ab;
			}
		}

		[HttpGet("AddReport")]
		public async Task<Report> AddReport(string uuid, string dobs, string chtyp, string aynm, string lan, string eml, string mob)
		{
			_logger.LogInformation("AddReport");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Report>("Report"); });
				try
				{
					List<Report> lst = new List<Report>();
					foreach (var dob in dobs.Trim('|').Split('|'))
					{
						Guid guid = Guid.NewGuid();
						var tick = new Report
						{
							uuid = uuid,
							guid = guid.ToString(),
							dob = dob,
							chtyp = chtyp,
							aynm = aynm,
							lan = lan,
							eml = eml,
							mob = mob,
							status = "new",
							reqdt = DateTime.Now.ToString("MM/dd/yyyy H:mm"),
							lnk = ""
						};
						lst.Add(tick);
					}
					await dbTick.InsertManyAsync(lst);
					var rep = new Report
					{
						uuid = uuid,
						guid = "",
						status = "OK"
					};
					return rep;
				}
				catch (Exception eX)
				{
					var tick = new Report
					{
						uuid = uuid,
						guid = "",
						status = "E",
						dob = eX.Message
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new Report
				{
					uuid = uuid,
					guid = "",
					status = "E",
					dob = eX.Message
				};
				return tick;
			}
		}

		[HttpGet("UpdateReport")]
		public async Task<Report> UpdateReport(string uuid, string guid, string lnk)
		{
			_logger.LogInformation("UpdateReport");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Report>("Report"); });
				var filter = Builders<Report>.Filter.Eq("guid", guid);
				var update = Builders<Report>.Update.Set("lnk", lnk);
				update = update.Set("status", "C");
				try
				{
					long cnt = dbTick.CountDocuments(filter);
					if (cnt > 0L)
					{
						await dbTick.FindOneAndUpdateAsync<Report>(filter, update);
					}
					var rep = new Report
					{
						uuid = uuid,
						guid = "",
						status = "OK"
					};
					return rep;
				}
				catch (Exception eX)
				{
					var tick = new Report
					{
						uuid = uuid,
						guid = "",
						status = "E",
						dob = eX.Message
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new Report
				{
					uuid = uuid,
					guid = "",
					status = "E",
					dob = eX.Message
				};
				return tick;
			}
		}
		[HttpGet("ResetReport")]
		public async Task<Report> ResetReport(string uuid, string eml)
		{
			_logger.LogInformation("ResetReport");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Report>("Report"); });
				var filter = Builders<Report>.Filter.Eq("eml", eml);
				var update = Builders<Report>.Update.Set("status", "new");
				update = update.Set("lnk", "");
				try
				{
					long cnt = dbTick.CountDocuments(filter);
					if (cnt > 0L)
					{
						dbTick.UpdateMany(filter, update);
					}
					var rep = new Report
					{
						uuid = uuid,
						guid = "",
						status = "OK"
					};
					return rep;
				}
				catch (Exception eX)
				{
					var tick = new Report
					{
						uuid = uuid,
						guid = "",
						status = "E",
						dob = eX.Message
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new Report
				{
					uuid = uuid,
					guid = "",
					status = "E",
					dob = eX.Message
				};
				return tick;
			}
		}
		[HttpGet("UpdateAstrologer")]
		public async Task<Astrologer> UpdateAstrologer(string uuid, string uid, string mob)
		{
			_logger.LogInformation("UpdateAstrologer");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Astrologer>("Astrologer"); });
				var filter = Builders<Astrologer>.Filter.Eq("uid", uid);
				var update = Builders<Astrologer>.Update.Set("mob", mob);
				try
				{
					long cnt = dbTick.CountDocuments(filter);
					if (cnt > 0L)
					{
						await dbTick.FindOneAndUpdateAsync<Astrologer>(filter, update);
					}
					var rep = new Astrologer
					{
						uuid = uuid,
						uid = uid
					};
					return rep;
				}
				catch (Exception eX)
				{
					var tick = new Astrologer
					{
						uuid = uuid,
						uid = "",
						name = eX.Message
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new Astrologer
				{
					uuid = uuid,
					uid = "",
					name = eX.Message
				};
				return tick;
			}
		}
		[HttpGet("UpdateAstro")]
		public async Task<Astrologer> UpdateAstro(string uuid, string uid, string name)
		{
			_logger.LogInformation("UpdateAstro");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Astrologer>("Astrologer"); });
				var filter = Builders<Astrologer>.Filter.Eq("uid", uid);
				var update = Builders<Astrologer>.Update.Set("name", name);
				try
				{
					long cnt = dbTick.CountDocuments(filter);
					if (cnt > 0L)
					{
						await dbTick.FindOneAndUpdateAsync<Astrologer>(filter, update);
					}
					var rep = new Astrologer
					{
						uuid = uuid,
						uid = uid
					};
					return rep;
				}
				catch (Exception eX)
				{
					var tick = new Astrologer
					{
						uuid = uuid,
						uid = "",
						name = eX.Message
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new Astrologer
				{
					uuid = uuid,
					uid = "",
					name = eX.Message
				};
				return tick;
			}
		}
		[HttpGet("AddTicket")]
		public async Task<Ticket> AddTicket(string uuid, string cat, string sub, string msg)
		{
			_logger.LogInformation("AddTicket");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Ticket>("Ticket"); });
				var filter = Builders<Ticket>.Filter.Eq("uuid", uuid);
				try
				{
					Guid guid = Guid.NewGuid();
					var tick = new Ticket
					{
						uuid = uuid,
						guid = guid.ToString(),
						cat = cat,
						sub = sub,
						msg = msg,
						status = "O"
					};
					await dbTick.InsertOneAsync(tick);
					return tick;
				}
				catch (Exception eX)
				{
					var tick = new Ticket
					{
						uuid = uuid,
						guid = "",
						cat = cat,
						sub = "failed",
						msg = eX.Message,
						status = "X"
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new Ticket
				{
					uuid = uuid,
					guid = "",
					cat = cat,
					sub = "failed",
					msg = eX.Message,
					status = "X"
				};
				return tick;
			}
		}
		[HttpGet("AddTicketResp")]
		public async Task<TicketResp> AddTicketResp(string uuid, string guid, string resp)
		{
			_logger.LogInformation("AddTicketResp");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTickR = await Task.Run(() => { return db.GetCollection<TicketResp>("TicketResp"); });
				try
				{
					var tick = new TicketResp
					{
						uuid = uuid,
						guid = guid,
						resp = resp,
						status = "R"
					};
					await dbTickR.InsertOneAsync(tick);
					var dbTick = db.GetCollection<Ticket>("Ticket");
					var filter = Builders<Ticket>.Filter.Eq("guid", guid);
					var update = Builders<Ticket>.Update.Set("status", "R");
					var t = await dbTick.FindOneAndUpdateAsync<Ticket>(filter, update);
					return tick;
				}
				catch (Exception eX)
				{
					var tick = new TicketResp
					{
						uuid = uuid,
						guid = "",
						resp = eX.Message,
						status = "X"
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new TicketResp
				{
					uuid = uuid,
					guid = "",
					resp = eX.Message,
					status = "X"
				};
				return tick;
			}
		}
		[HttpPost("Msg2Astros")]
		public async Task<TicketResp> Msg2Astros([FromBody] Ticket tkt)
		{
			_logger.LogInformation("Msg2Astros");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTickR = await Task.Run(() => { return db.GetCollection<TicketResp>("TicketResp"); });
				var astros = await GetAllAstrologers();
				try
				{
					foreach (var ast in astros)
					{
						var tick = new TicketResp
						{
							uuid = ast.uuid,
							guid = "",
							resp = string.Format("Dear {0}, {1}", ast.name, tkt.msg),
							status = "R"
						};
						await dbTickR.InsertOneAsync(tick);
					}
					var tik = new TicketResp
					{
						uuid = "",
						guid = "",
						resp = "",
						status = "Success"
					};
					return tik;
				}
				catch (Exception eX)
				{
					var tick = new TicketResp
					{
						uuid = "",
						guid = "",
						resp = eX.Message,
						status = "X"
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new TicketResp
				{
					uuid = "",
					guid = "",
					resp = eX.Message,
					status = "X"
				};
				return tick;
			}
		}
		[HttpGet("FollowTicket")]
		public async Task<TicketResp> FollowTicket(string uuid, string guid, string msg)
		{
			_logger.LogInformation("FollowTicket");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Ticket>("Ticket"); });
				var filter = Builders<Ticket>.Filter.Eq("guid", guid);
				var update = Builders<Ticket>.Update.Set("msg", msg);
				update = update.Set("status", "O");
				try
				{
					long cnt = dbTick.CountDocuments(filter);
					if (cnt > 0L)
					{
						dbTick.FindOneAndUpdate<Ticket>(filter, update);
						var dbTickR = db.GetCollection<TicketResp>("TicketResp");
						var filterR = Builders<TicketResp>.Filter.Eq("guid", guid);
						var updateR = Builders<TicketResp>.Update.Set("status", "CR");
						var t = await dbTickR.FindOneAndUpdateAsync<TicketResp>(filterR, updateR);
						return t;
					}

					var tick = new TicketResp
					{
						uuid = uuid,
						guid = "",
						resp = "",
						status = "not found"
					};
					return tick;
				}
				catch (Exception eX)
				{
					var tick = new TicketResp
					{
						uuid = uuid,
						guid = "",
						resp = "",
						status = eX.Message
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new TicketResp
				{
					uuid = uuid,
					guid = "",
					resp = "",
					status = eX.Message
				};
				return tick;
			}
		}
		[HttpGet("GetTickets")]
		public async Task<List<Ticket>> GetTickets()
		{
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Ticket>("Ticket"); });
				var filter = Builders<Ticket>.Filter.Eq("status", "O");
				try
				{
					long cnt = dbTick.CountDocuments(filter);
					if (cnt > 0L)
					{
						var qTicks =
								(from e in dbTick.AsQueryable<Ticket>()
								 where e.status == "O"
								 select e).ToList();
						return qTicks;
					}
					else
					{
						List<Ticket> lst = new List<Ticket>();
						var tick = new Ticket
						{
							status = "X"
						};
						lst.Add(tick);
						return lst;
					}
				}
				catch (Exception eX)
				{
					List<Ticket> lst = new List<Ticket>();
					var tick = new Ticket
					{
						msg = eX.Message,
						status = "X"
					};
					lst.Add(tick);
					return lst;
				}
			}
			catch (Exception eX)
			{
				List<Ticket> lst = new List<Ticket>();
				var tick = new Ticket
				{
					msg = eX.Message,
					status = "X"
				};
				lst.Add(tick);
				return lst;
			}
		}
		[HttpGet("GetTicketResps")]
		public async Task<List<TicketResp>> GetTicketResps(string uuid)
		{
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<TicketResp>("TicketResp"); });
				var filter = Builders<TicketResp>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbTick.CountDocuments(filter);
					if (cnt > 0L)
					{
						var qTicks =
								(from e in dbTick.AsQueryable<TicketResp>()
								 where e.uuid == uuid
								 select e).ToList();
						return qTicks;
					}
					else
					{
						List<TicketResp> lst = new List<TicketResp>();
						var tick = new TicketResp
						{
							status = "X"
						};
						lst.Add(tick);
						return lst;
					}
				}
				catch (Exception eX)
				{
					List<TicketResp> lst = new List<TicketResp>();
					var tick = new TicketResp
					{
						resp = eX.Message,
						status = "X"
					};
					lst.Add(tick);
					return lst;
				}
			}
			catch (Exception eX)
			{
				List<TicketResp> lst = new List<TicketResp>();
				var tick = new TicketResp
				{
					resp = eX.Message,
					status = "X"
				};
				lst.Add(tick);
				return lst;
			}
		}
		[HttpGet("AddComment")]
		public async Task<Comment> AddComment(string uuid, string title, string pid, string name, string avatar, string msg)
		{
			_logger.LogInformation("AddComment");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<Comment>("Comment"); });
				try
				{
					Guid guid = Guid.NewGuid();
					var tick = new Comment
					{
						cid = guid.ToString(),
						pid = pid,
						uuid = uuid,
						title = title,
						name = name,
						avatar = avatar,
						msg = msg,
						liks = 0,
						nliks = 0,
						nrep = 0
					};
					await dbTick.InsertOneAsync(tick);
					return tick;
				}
				catch (Exception eX)
				{
					var tick = new Comment
					{
						msg = eX.Message,
					};
					return tick;
				}
			}
			catch (Exception eX)
			{
				var tick = new Comment
				{
					msg = eX.Message,
				};
				return tick;
			}
		}
		[HttpGet("GetComments")]
		public async Task<List<Comment>> GetComments(string uuid, string title, string pid)
		{
			_logger.LogInformation("GetComment");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Comment>("Comment"); });
					var filter
						= (pid != string.Empty) ? Builders<Comment>.Filter.Eq("pid", pid) : Builders<Comment>.Filter.Eq("uuid", uuid);
					if (pid == string.Empty)
					{
						filter = Builders<Comment>.Filter.Eq("title", title.Trim());
					}
					try
					{
						long cnt = dbAst.CountDocuments(filter);
						if (cnt > 0L)
						{
							var qAstUser =
									(from e in dbAst.AsQueryable<Comment>()
									 where e.pid == pid
									 select e).ToList();
							return qAstUser;
						}
						else
						{
							List<Comment> lst = new List<Comment>();
							var ast = new Comment
							{
								msg = "X"
							};
							lst.Add(ast);
							return lst;
						}
					}
					catch (Exception eX)
					{
						List<Comment> lst = new List<Comment>();
						var ast = new Comment
						{
							msg = eX.Message
						};
						lst.Add(ast);
						return lst;
					}
				}
				catch (Exception eX)
				{
					List<Comment> lst = new List<Comment>();
					var ast = new Comment
					{
						msg = eX.Message
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Comment
				{
					msg = eX.Message
				};
				List<Comment> lst = new List<Comment>();
				lst.Add(ast);
				return lst;
			}
		}
		[HttpGet("GetNotif")]
		public async Task<TicketResp> GetNotif(string uuid)
		{

			_logger.LogInformation("GetNotif");
			try
			{
				//var tick2 = new TicketResp
				//{
				//	uuid = uuid,
				//	guid = "",
				//	resp = "Dear User, The current version which you are using will not work, please update the App to latest version from Play Store. Thank you.",
				//	status = "R"
				//};
				//return tick2;
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbTick = await Task.Run(() => { return db.GetCollection<TicketResp>("TicketResp"); });
				//var tRes =
				//				(from e in dbTick.AsQueryable<TicketResp>()
				//				 where e.uuid == uuid && e.status == "R"
				//				 select e).ToList().FirstOrDefault();
				//return tRes;
				var filter1 = Builders<TicketResp>.Filter.Eq("uuid", uuid);
				var filter2 = Builders<TicketResp>.Filter.Eq("status", "R");
				var task = await dbTick.FindAsync(filter1 & filter2);
				var tRes = await task.ToListAsync();
				if (tRes != null & tRes.Count() > 0)
				{
					var update = Builders<TicketResp>.Update.Set("status", "A");
					var filter = Builders<TicketResp>.Filter.Eq("guid", tRes.FirstOrDefault().guid);
					var tick = await dbTick.FindOneAndUpdateAsync<TicketResp>(filter, update);
					return tRes.FirstOrDefault();
				}
				else
				{
					var tick2 = new TicketResp
					{
						uuid = uuid,
						guid = "",
						resp = "",
						status = "X"
					};
					return tick2;

				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var tick = new TicketResp
				{
					uuid = uuid,
					guid = "",
					resp = eX.Message,
					status = "E"
				};
				return tick;
			}
		}
		[HttpGet("GetSubscriber")]
		public async Task<Subscriber> GetSubscriber(string uuid, string eml)
		{
			_logger.LogInformation("GetSubscriber");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var astUsers = await Task.Run(() => { return db.GetCollection<Subscriber>("Subscriber"); });
				//var filter = Builders<Subscriber>.Filter.Eq("uuid", uuid);
				//var plan = await astUsers.FindAsync<Subscriber>(filter);
				if (!string.IsNullOrEmpty(uuid))
				{
					var plan =
									(from e in astUsers.AsQueryable<Subscriber>()
									 where e.uuid == uuid && e.eml == eml
									 select e).ToList().FirstOrDefault();
					if (plan == null)
					{
						var sub = new Subscriber
						{
							uuid = "-1",
							nam = "Not Found",
							mob = "",
							eml = ""
						};
						return sub;
					}
					return plan;
				}
				else
				{
					var plan =
									(from e in astUsers.AsQueryable<Subscriber>()
									 where e.eml == eml
									 select e).ToList().FirstOrDefault();
					if (plan == null)
					{
						var sub = new Subscriber
						{
							uuid = "-1",
							nam = "Not Found",
							mob = "",
							eml = ""
						};
						return sub;
					}
					return plan;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var sub = new Subscriber
				{
					uuid = "-1",
					nam = eX.Message,
					mob = "",
					eml = ""
				};
				return sub;
			}
		}

		[HttpPost("AddSubscriber")]
		public async Task<Subscriber> AddSubscriber(string uuid, string nam, string mob, string eml)
		{
			_logger.LogInformation("AddSubscriber");
			try
			{
				if (string.IsNullOrEmpty(uuid))
				{
					uuid = GetRandomHexNumber(16);
				}
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbSub = await Task.Run(() => { return db.GetCollection<Subscriber>("Subscriber"); });
				var filter = Builders<Subscriber>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbSub.CountDocuments(filter);
					if (cnt > 0L)
					{
						var sub = new Subscriber
						{
							uuid = uuid,
							nam = nam,
							mob = mob,
							eml = eml
						};
						var update = Builders<Subscriber>.Update.Set("nam", nam);
						update = update.Set("mob", mob);
						update = update.Set("eml", eml);
						sub = await dbSub.FindOneAndUpdateAsync<Subscriber>(filter, update);
						return sub;
					}
					else
					{
						var sub = new Subscriber
						{
							uuid = uuid,
							nam = nam,
							mob = mob,
							eml = eml,

						};
						await dbSub.InsertOneAsync(sub);
						await SendActivationMail(nam, eml, uuid);
						return sub;
					}
				}
				catch (Exception eX)
				{
					var sub = new Subscriber
					{
						uuid = uuid,
						nam = eX.Message,
						mob = "",
						eml = ""
					};
					return sub;
				}
			}
			catch (Exception eX)
			{
				var sub = new Subscriber
				{
					uuid = uuid,
					nam = eX.Message,
					mob = "",
					eml = ""
				};
				return sub;
			}
		}
		[HttpGet("ApplyPromo")]
		public async Task<TicketResp> ApplyPromo(string uuid, string promo)
		{
			_logger.LogInformation("ApplyPromo");
			try
			{
				if (promo == "126ASTRO")
				{
					var tick2 = new TicketResp
					{
						uuid = uuid,
						guid = "",
						resp = "",
						status = "success"
					};
					return tick2;
				}
				else
				{
					var tick2 = new TicketResp
					{
						uuid = uuid,
						guid = "",
						resp = "",
						status = "failed"
					};
					return tick2;
				}
			}
			catch (Exception eX)
			{
				var tick2 = new TicketResp
				{
					uuid = uuid,
					guid = "",
					resp = eX.Message,
					status = "error"
				};
				return tick2;
			}
		}
		private async Task<IActionResult> SendActivationMail(string nam, string eml, string ac)
		{
			try
			{
				MimeMessage message = new MimeMessage();
				MailboxAddress from = new MailboxAddress("MYPUBZ Team",
				"info@vedichoroo.com");
				message.From.Add(from);

				MailboxAddress to = new MailboxAddress(nam,
				eml);
				message.To.Add(to);

				message.Subject = "VEDICHOROO ACTIVATION";
				BodyBuilder bodyBuilder = new BodyBuilder();
				string msg = System.IO.File.ReadAllText(string.Format(@"{0}\email.html", Path.Combine(_env.ContentRootPath, @"Content")));
				bodyBuilder.HtmlBody = msg.Replace("[1]", nam).Replace("[2]", ac);
				message.Body = bodyBuilder.ToMessageBody();
				SmtpClient smtp = new SmtpClient();
				smtp.Connect("smtp.gmail.com", 587);
				smtp.Authenticate("info@vedichoroo.com", "JyRm@18S");
				smtp.Send(message);
				smtp.Disconnect(true);
				smtp.Dispose();
				return new JsonResult("Success");
			}
			catch (Exception eX)
			{
				return new JsonResult(eX.Message);
			}
		}
		[HttpGet("Birthinfo")]
		public async Task<JsonResult> Birthinfo(string dob, string tob, string latlng, string timezone)
		{
			_logger.LogInformation("BirthInfo");
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, string.Empty, 4);
				await Task.Run(() =>
				{
					mHoro.calc_planets_pos(true, astClient);
				});
				DateTime dtDOB = new DateTime(i3, (int)u2, (int)u1, (int)u4, (int)u5, (int)u6);
				Birth binf = new Birth();
				binf.dob = dtDOB.ToString("dddd, dd MMMM yyyy HH:mm:ss");
				float moonDeg = 0;
				float ascDeg = 0;
				string moonSign = string.Empty, ascSign = string.Empty;
				float sunDeg = 0;
				string sunSign = string.Empty;
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				bool bmon = false;
				bool basc = false;
				bool bsun = false;
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "AC")
									{
										ascDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										ascSign = sign;
										basc = true;
									}
									else if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										moonSign = sign;
										bmon = true;
										// break;
									}
									else if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										sunSign = sign;
										bsun = true;
										//break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								sunSign = sign;
								bsun = true;
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								moonSign = sign;
								bmon = true;
							}
							else if (pls.Split(' ')[1] == "AC")
							{
								ascDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								ascSign = sign;
								basc = true;
							}
						}
						if (bsun && bmon && basc) break;
					}
					if (bsun && bmon && basc)
					{
						Dictionary<string, string> dctRasL = new Dictionary<string, string>();
						dctRasL.Add("ar", "Mars");
						dctRasL.Add("ta", "Venus");
						dctRasL.Add("ge", "Mercury");
						dctRasL.Add("cn", "Moon");
						dctRasL.Add("le", "Sun");
						dctRasL.Add("vi", "Mercury");
						dctRasL.Add("li", "Venus");
						dctRasL.Add("sc", "Mars");
						dctRasL.Add("sa", "Jupiter");
						dctRasL.Add("cp", "Saturn");
						dctRasL.Add("aq", "Saturn");
						dctRasL.Add("pi", "Jupiter");

						binf.birth_star = calcStar(moonDeg, moonSign.ToString()).Split('|')[0];
						binf.star_lord = calcStarL(moonDeg, moonSign.ToString());
						binf.lagna_lord = dctRasL[ascSign.ToLower()];////calcStarL(Convert.ToDouble(ascDeg), ascSign.ToString());

						//binf.moon_sign = moonSign;
						string rJ = string.Format(@"{0}\o_rashis.json", astClient);
						using (StreamReader r4 = new StreamReader(rJ))
						{
							string json4 = r4.ReadToEnd();
							dynamic rashis = JsonConvert.DeserializeObject(json4);
							binf.lagna = rashis[ascSign.ToString()].ToString().Split('|')[1].ToString();
							binf.moon_sign = rashis[moonSign.ToString()].ToString().Split('|')[1].ToString();
							binf.sun_sign = rashis[sunSign.ToString()].ToString().Split('|')[1].ToString();
							//int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
						}
					}

					string tithi = calcTithi(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
					binf.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					binf.moon_phase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
					binf.yoga = calcYog(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
					binf.karana = calcKaran(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
				}
				return new JsonResult(binf);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		public Birth GetBirthInfo(Horo h)
		{
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			Birth binf = new Birth();
			try
			{
				uint u1 = Convert.ToUInt32(h.dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(h.dob.Split('|')[1]);
				int i3 = Convert.ToInt32(h.dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(h.tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(h.tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(h.tob.Split('|')[2]);
				DateTime dtDOB = new DateTime(i3, (int)u2, (int)u1, (int)u4, (int)u5, (int)u6);
				binf.dob = dtDOB.ToString("dddd, dd MMMM yyyy HH:mm:ss");
				float moonDeg = 0;
				float ascDeg = 0;
				string moonSign = string.Empty, ascSign = string.Empty;
				float sunDeg = 0;
				string sunSign = string.Empty;
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				bool bmon = false;
				bool basc = false;
				bool bsun = false;
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (h.planetPos.ContainsKey(sign.ToString()))
						{
							string pls = h.planetPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "AC")
									{
										ascDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										ascSign = sign;
										basc = true;
									}
									else if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										moonSign = sign;
										bmon = true;
										binf.moon_deg = pl.Split(' ')[0];
										// break;
									}
									else if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										sunSign = sign;
										bsun = true;
										//break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								sunSign = sign;
								bsun = true;
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								moonSign = sign;
								binf.moon_deg = pls.Split(' ')[0];
								bmon = true;
							}
							else if (pls.Split(' ')[1] == "AC")
							{
								ascDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								ascSign = sign;
								basc = true;
							}
						}
						if (bsun && bmon && basc) break;
					}
					if (bsun && bmon && basc)
					{
						Dictionary<string, string> dctRasL = new Dictionary<string, string>();
						dctRasL.Add("ar", "Mars");
						dctRasL.Add("ta", "Venus");
						dctRasL.Add("ge", "Mercury");
						dctRasL.Add("cn", "Moon");
						dctRasL.Add("le", "Sun");
						dctRasL.Add("vi", "Mercury");
						dctRasL.Add("li", "Venus");
						dctRasL.Add("sc", "Mars");
						dctRasL.Add("sa", "Jupiter");
						dctRasL.Add("cp", "Saturn");
						dctRasL.Add("aq", "Saturn");
						dctRasL.Add("pi", "Jupiter");
						string s = calcStar(moonDeg, moonSign.ToString());
						binf.birth_star = string.Format("{0} {1} Pada", s.Split('|')[0], s.Split('|')[1]);
						//int ni = (int)Math.Round(moonDeg / nd);
						//int p = calcPada(moonDeg - (ni*nd));
						//binf.birth_star = string.Format("{0} {1} Pada", s, p);
						binf.star_lord = calcStarL(moonDeg, moonSign.ToString());
						binf.lagna_lord = dctRasL[ascSign.ToLower()];////calcStarL(Convert.ToDouble(ascDeg), ascSign.ToString());

						//binf.moon_sign = moonSign;
						string rJ = string.Format(@"{0}\o_rashis.json", astClient);
						using (StreamReader r4 = new StreamReader(rJ))
						{
							string json4 = r4.ReadToEnd();
							dynamic rashis = JsonConvert.DeserializeObject(json4);
							binf.lagna = rashis[ascSign.ToString()].ToString().Split('|')[1].ToString();
							binf.moon_sign = rashis[moonSign.ToString()].ToString().Split('|')[1].ToString();
							binf.sun_sign = rashis[sunSign.ToString()].ToString().Split('|')[1].ToString();
							//int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
						}
					}
					string tithi = calcTithi(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
					binf.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					binf.moon_phase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
					binf.yoga = calcYog(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
					binf.karana = calcKaran(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
				}
			}
			catch (Exception eX)
			{
				binf.name = string.Format("ERROR:{0}", eX.Message);
			}
			return binf;
		}
		[HttpGet("BirthinfoEx")]
		public async Task<JsonResult> BirthinfoEx(string dob, string tob, string latlng, string timezone, int ayanid)
		{
			_logger.LogInformation("BirthInfoEx");
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				await Task.Run(() =>
				{
					mHoro.calc_planets_pos(true, astClient);
				});
				DateTime dtDOB = new DateTime(i3, (int)u2, (int)u1, (int)u4, (int)u5, (int)u6);
				Birth binf = new Birth();
				binf.dob = dtDOB.ToString("dddd, dd MMMM yyyy HH:mm:ss");
				float moonDeg = 0;
				float ascDeg = 0;
				string moonSign = string.Empty, ascSign = string.Empty;
				float sunDeg = 0;
				string sunSign = string.Empty;
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				bool bmon = false;
				bool basc = false;
				bool bsun = false;
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "AC")
									{
										ascDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										ascSign = sign;
										basc = true;
									}
									else if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										moonSign = sign;
										bmon = true;
										binf.moon_deg = pl.Split(' ')[0];
										// break;
									}
									else if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (float)dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										sunSign = sign;
										bsun = true;
										//break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								sunSign = sign;
								bsun = true;
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								moonSign = sign;
								binf.moon_deg = pls.Split(' ')[0];
								bmon = true;
							}
							else if (pls.Split(' ')[1] == "AC")
							{
								ascDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								ascSign = sign;
								basc = true;
							}
						}
						if (bsun && bmon && basc) break;
					}
					if (bsun && bmon && basc)
					{
						Dictionary<string, string> dctRasL = new Dictionary<string, string>();
						dctRasL.Add("ar", "Mars");
						dctRasL.Add("ta", "Venus");
						dctRasL.Add("ge", "Mercury");
						dctRasL.Add("cn", "Moon");
						dctRasL.Add("le", "Sun");
						dctRasL.Add("vi", "Mercury");
						dctRasL.Add("li", "Venus");
						dctRasL.Add("sc", "Mars");
						dctRasL.Add("sa", "Jupiter");
						dctRasL.Add("cp", "Saturn");
						dctRasL.Add("aq", "Saturn");
						dctRasL.Add("pi", "Jupiter");
						string s = calcStar(moonDeg, moonSign.ToString());
						binf.birth_star = string.Format("{0} {1} Pada", s.Split('|')[0], s.Split('|')[1]);
						//int ni = (int)Math.Round(moonDeg / nd);
						//int p = calcPada(moonDeg - (ni*nd));
						//binf.birth_star = string.Format("{0} {1} Pada", s, p);
						binf.star_lord = calcStarL(moonDeg, moonSign.ToString());
						binf.lagna_lord = dctRasL[ascSign.ToLower()];////calcStarL(Convert.ToDouble(ascDeg), ascSign.ToString());

						//binf.moon_sign = moonSign;
						string rJ = string.Format(@"{0}\o_rashis.json", astClient);
						using (StreamReader r4 = new StreamReader(rJ))
						{
							string json4 = r4.ReadToEnd();
							dynamic rashis = JsonConvert.DeserializeObject(json4);
							binf.lagna = rashis[ascSign.ToString()].ToString().Split('|')[1].ToString();
							binf.moon_sign = rashis[moonSign.ToString()].ToString().Split('|')[1].ToString();
							binf.sun_sign = rashis[sunSign.ToString()].ToString().Split('|')[1].ToString();
							//int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
						}
					}

					string tithi = calcTithi(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
					binf.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					binf.moon_phase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
					binf.yoga = calcYog(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
					binf.karana = calcKaran(binf.moon_sign, moonDeg, binf.sun_sign, sunDeg);
				}
				return new JsonResult(binf);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetAstrologer")]
		public async Task<Astrologer> GetAstrologer(string uuid)
		{
			_logger.LogInformation("GetAstrologer");
			try
			{
				//Task.Run(() =>
				//{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Astrologer>("Astrologer"); });
					var qAstUser =
									(from e in dbAst.AsQueryable<Astrologer>()
									 where e.uuid == uuid
									 select e).ToList().FirstOrDefault();
					if (qAstUser != null)
					{
						return qAstUser;
					}
					else
					{
						dbAst = db.GetCollection<Astrologer>("HobbyAstro");
						qAstUser =
										(from e in dbAst.AsQueryable<Astrologer>()
										 where e.uuid == uuid
										 select e).ToList().FirstOrDefault();
						if (qAstUser != null)
						{
							return qAstUser;
						}
						else
						{
							var ast = new Astrologer
							{
								tagline = "This feature is currently available only for our subscribed Astrologers",
								status = "X"
							};
							return ast;
						}
					}

				}
				catch (Exception eX)
				{
					var ast = new Astrologer
					{
						tagline = eX.Message,
						status = "E"
					};
					return ast;
				}
				//});

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Astrologer
				{
					tagline = eX.Message,
					status = "E"
				};
				return ast;
			}
		}
		[HttpGet("GetProfile")]
		public async Task<Profile> GetProfile(string uuid)
		{
			_logger.LogInformation("GetProfile");
			try
			{
				//Task.Run(() =>
				//{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Profile>("Profile"); });
					var filter = Builders<Profile>.Filter.Eq("uuid", uuid);
					var qAstUser = dbAst.Find<Profile>(filter).FirstOrDefault();

					//var qAstUser =
					//				(from e in dbAst.AsQueryable<Profile>()
					//				 where e.uuid == uuid
					//				 select e).ToList().FirstOrDefault();
					if (qAstUser != null)
					{
						return qAstUser;
					}
					else
					{
						var ast = new Profile
						{
							status = "X"
						};
						return ast;
					}

				}
				catch (Exception eX)
				{
					var ast = new Profile
					{
						dob = eX.Message,
						status = "E"
					};
					return ast;
				}
				//});

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Profile
				{
					dob = eX.Message,
					status = "E"
				};
				return ast;
			}
		}
		[HttpPost("AstroStatus")]
		public async Task<Astrologer> AstroStatus([FromBody] Astrologer ast)
		{
			try
			{
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Astrologer>("Astrologer"); });
				var filter = Builders<Astrologer>.Filter.Eq("uuid", ast.uuid);
				long cnt = dbPlan.CountDocuments(filter);
				if (cnt > 0L)
				{
					var update = Builders<Astrologer>.Update.Set("status", ast.status);
					var sta = await dbPlan.FindOneAndUpdateAsync<Astrologer>(filter, update);
					return sta;
				}
				else
				{
					var plan = new Astrologer
					{
						uuid = ast.uuid,
						status = "Record not found"
					};
					return plan;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var plan = new Astrologer
				{
					uuid = ast.uuid,
					status = err
				};
				return plan;

			}
		}
		[HttpPost("ProfileBanner")]
		public async Task<AstroBio> ProfileBanner([FromBody] AstroBioParams abParms)
		{
			try
			{
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Astrologer>("Astrologer"); });
				var dbBio = await Task.Run(() => { return db.GetCollection<AstroBio>("AstroBio"); });
				var filter = Builders<Astrologer>.Filter.Eq("uuid", abParms.uuid);
				long cnt = dbPlan.CountDocuments(filter);
				if (cnt > 0L)
				{
					var ast = dbPlan.Find<Astrologer>(filter).FirstOrDefault();
					var filter2 = Builders<AstroBio>.Filter.Eq("uid", ast.uid);
					cnt = dbBio.CountDocuments(filter2);
					if (cnt > 0L)
					{
						if (!String.IsNullOrEmpty(abParms.banner))
						{
							var update = Builders<AstroBio>.Update.Set("banner", abParms.banner);
							var bio = await dbBio.FindOneAndUpdateAsync<AstroBio>(filter2, update);
							return bio;
						}
						else
						{
							var plan = new AstroBio
							{
								uid = ast.uid,
								banner = "AstroBio: banner cannot be empty or null"
							};
							return plan;
						}
					}
					else
					{
						var plan = new AstroBio
						{
							uid = abParms.uuid,
							banner = "AstroBio: Record Not Found"
						};
						return plan;
					}
				}
				else
				{
					var plan = new AstroBio
					{
						uid = abParms.uuid,
						banner = "Astrologer: Record Not Found"
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var plan = new AstroBio
				{
					uid = abParms.uuid,
					banner = err
				};
				return plan;
			}
		}
		[HttpPost("ProfileBio")]
		public async Task<AstroBio> ProfileBio([FromBody] AstroBioParams abParms)
		{
			try
			{
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Astrologer>("Astrologer"); });
				var dbBio = await Task.Run(() => { return db.GetCollection<AstroBio>("AstroBio"); });
				var filter = Builders<Astrologer>.Filter.Eq("uuid", abParms.uuid);
				long cnt = dbPlan.CountDocuments(filter);
				if (cnt > 0L)
				{
					var ast = dbPlan.Find<Astrologer>(filter).FirstOrDefault();
					var filter2 = Builders<AstroBio>.Filter.Eq("uid", ast.uid);
					cnt = dbBio.CountDocuments(filter2);
					if (cnt > 0L)
					{
						if (!String.IsNullOrEmpty(abParms.bio))
						{
							var update = Builders<AstroBio>.Update.Set("bio", abParms.bio);
							var bio = await dbBio.FindOneAndUpdateAsync<AstroBio>(filter2, update);
							return bio;
						}
						else
						{
							var plan = new AstroBio
							{
								uid = ast.uid,
								banner = "AstroBio: bio cannot be empty or null"
							};
							return plan;
						}
					}
					else
					{
						var plan = new AstroBio
						{
							uid = abParms.uuid,
							banner = "AstroBio: Record Not Found"
						};
						return plan;
					}
				}
				else
				{
					var plan = new AstroBio
					{
						uid = abParms.uuid,
						banner = "Astrologer: Record Not Found"
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var plan = new AstroBio
				{
					uid = abParms.uuid,
					banner = err
				};
				return plan;
			}
		}
		[HttpGet("SetProfile")]
		public async Task<Profile> SetProfile(string uuid, string avatar = "", string dob = "")
		{
			_logger.LogInformation("SetProfile");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Profile>("Profile"); });
				var filter = Builders<Profile>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = dbPlan.Find<Profile>(filter).FirstOrDefault();
						if (!String.IsNullOrEmpty(dob) && !String.IsNullOrEmpty(avatar))
						{
							var update = Builders<Profile>.Update.Set("dob", dob);
							update = update.Set("avatar", avatar);
							plan = await dbPlan.FindOneAndUpdateAsync<Profile>(filter, update);
						}
						else if (!String.IsNullOrEmpty(avatar))
						{
							var update = Builders<Profile>.Update.Set("avatar", avatar);
							plan = await dbPlan.FindOneAndUpdateAsync<Profile>(filter, update);
						}
						else if (!String.IsNullOrEmpty(dob))
						{
							var update = Builders<Profile>.Update.Set("dob", dob);
							plan = await dbPlan.FindOneAndUpdateAsync<Profile>(filter, update);
						}
						return plan;
					}
					else
					{
						var plan = new Profile();
						plan.uuid = uuid;
						plan.status = "C";
						if (!String.IsNullOrEmpty(dob) && !String.IsNullOrEmpty(avatar))
						{
							plan.dob = dob;
							plan.avatar = avatar;
						}
						else if (!String.IsNullOrEmpty(avatar))
						{
							plan.avatar = avatar;
						}
						else if (!String.IsNullOrEmpty(dob))
						{
							plan.dob = dob;
						}
						await dbPlan.InsertOneAsync(plan);
						return plan;
					}
				}
				catch (Exception eX)
				{
					var st = new StackTrace(eX, true);
					// Get the top stack frame
					var frame = st.GetFrame(st.FrameCount - 1);
					// Get the line number from the stack frame
					var line = frame.GetFileLineNumber();
					string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
					var plan = new Profile
					{
						uuid = uuid,
						dob = err,
						status = "E"
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var plan = new Profile
				{
					uuid = uuid,
					dob = err,
					status = "E"
				};
				return plan;
			}
		}

		[HttpGet("IsAdmin")]
		public async Task<Admin> IsAdmin(string uuid)
		{
			_logger.LogInformation("IsAdmin");
			try
			{
				//Task.Run(() =>
				//{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Admin>("Admin"); });
					var qAstUser =
									(from e in dbAst.AsQueryable<Admin>()
									 where e.uuid == uuid
									 select e).ToList().FirstOrDefault();
					if (qAstUser != null)
					{
						return qAstUser;
					}
					else
					{
						var ast = new Admin
						{
							uuid = "",
							status = "N"
						};
						return ast;
					}
				}
				catch (Exception eX)
				{
					var ast = new Admin
					{
						uuid = "",
						tagline = eX.Message,
						status = "E"
					};
					return ast;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Admin
				{
					uuid = "",
					tagline = eX.Message,
					status = "E"
				};
				return ast;
			}
		}
		[HttpGet("AstroBio")]
		public async Task<IActionResult> AstroBio(string uid)
		{
			_logger.LogInformation("AstroBio");
			try
			{
				//Task.Run(() =>
				//{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<AstroBio>("AstroBio"); });
					var qAstUser =
									(from e in dbAst.AsQueryable<AstroBio>()
									 where e.uid == uid
									 select e).ToList().FirstOrDefault();
					if (qAstUser != null)
					{
						return new JsonResult(qAstUser);
					}
					else
					{
						var ast = new AstroBio
						{
							uid = uid,
							bio = "Not Available"
						};
						return new JsonResult(ast);
					}

				}
				catch (Exception eX)
				{
					var ast = new AstroBio
					{
						uid = uid,
						bio = eX.Message
					};
					return new JsonResult(ast);
				}
				//});

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new AstroBio
				{
					uid = uid,
					bio = eX.Message
				};
				return new JsonResult(ast);
			}
		}
		[HttpGet("Shadbala")]
		public async Task<IActionResult> Shadbala(string dob, string tob, string latlng, string timezone, double tzofset, int ayanid)
		{
			_logger.LogInformation("Shadbala");
			try
			{
				Horo horo = null;
				Task<ActionResult> tA = GetcuspsEx2(dob, tob, latlng, timezone, tzofset, ayanid);
				JsonResult jRes = (JsonResult)await tA;
				horo = (Horo)jRes.Value;
				Task<IActionResult> tB = ShadbalaEx(dob, tob, latlng, timezone, horo);
				JsonResult jRes2 = (JsonResult)await tB;
				return jRes2;
			}
			catch (Exception eX)
			{
				Shadbala sdb = new Shadbala();
				sdb.uchBala[eX.Message] = -1;
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				return new JsonResult(sdb);

			}
		}

		public async Task<IActionResult> ShadbalaEx(string dob, string tob, string latlng, string timezone, Horo horo)
		{
			Shadbala sdb = new Shadbala();
			try
			{
				string asg = string.Empty, ssg = string.Empty, msg = string.Empty, jsg = string.Empty, mesg = string.Empty, masg = string.Empty, vsg = string.Empty, sasg = string.Empty;
				double sup = 0.0, mop = 0.0, jup = 0.0, mep = 0.0, map = 0.0, vep = 0.0, sap = 0.0;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				//SUN
				string astClient = Path.Combine(_env.ContentRootPath, @"Content/astroclient");
				foreach (var pls in horo.planetPos)
				{
					foreach (var pl in pls.Value.Split('|'))
					{
						double d = Convert.ToDouble(dmsToDec(Convert.ToInt16(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt16(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt16(pl.Split(' ')[0].Split('.')[1])));
						if (pl.Split(' ')[1] == "AC")
						{
							asg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Su")
						{
							ssg = pls.Key;
							sup = d;
						}
						else if (pl.Split(' ')[1] == "Mo")
						{
							msg = pls.Key;
							mop = d;
						}
						else if (pl.Split(' ')[1] == "Ju")
						{
							jsg = pls.Key;
							jup = d;
						}
						else if (pl.Split(' ')[1] == "Me")
						{
							mesg = pls.Key;
							mep = d;
						}
						else if (pl.Split(' ')[1] == "Ma")
						{
							masg = pls.Key;
							map = d;
						}
						else if (pl.Split(' ')[1] == "Ve")
						{
							vsg = pls.Key;
							vep = d;
						}
						else if (pl.Split(' ')[1] == "Sa")
						{
							sasg = pls.Key;
							sap = d;
						}
					}
				}
				string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
					}
					if (horo.planetPos.ContainsKey(ras[r1]))
					{
						foreach (string pl in horo.planetPos[ras[r1]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) { hou11 = ras[r1]; r1 = -1; }
				}
				string rJ = string.Format(@"{0}\exalt.json", astClient);
				dynamic plo;
				using (StreamReader r = new StreamReader(rJ))
				{
					string json = r.ReadToEnd();
					plo = JsonConvert.DeserializeObject(json);

				}
				//SUN
				Task<double> t1 = calcUnchabala("Su", sup, ssg, plo);
				//MOON
				Task<double> t2 = calcUnchabala("Mo", mop, msg, plo);
				//JUPITER
				Task<double> t3 = calcUnchabala("Ju", jup, jsg, plo);
				//VENUS
				Task<double> t4 = calcUnchabala("Ve", vep, vsg, plo);
				//MERCURY
				Task<double> t5 = calcUnchabala("Me", mep, mesg, plo);
				//MARS
				Task<double> t6 = calcUnchabala("Ma", map, masg, plo);
				//SATURN
				Task<double> t7 = calcUnchabala("Sa", sap, sasg, plo);

				double d1 = await t1;
				double d2 = await t2;
				double d3 = await t3;
				double d4 = await t4;
				double d5 = await t5;
				double d6 = await t6;
				double d7 = await t7;
				sdb.uchBala = new Dictionary<string, double>();
				sdb.uchBala.Add("Su", Math.Round(d1));
				sdb.uchBala.Add("Mo", Math.Round(d2));
				sdb.uchBala.Add("Ju", Math.Round(d3));
				sdb.uchBala.Add("Ve", Math.Round(d4));
				sdb.uchBala.Add("Me", Math.Round(d5));
				sdb.uchBala.Add("Ma", Math.Round(d6));
				sdb.uchBala.Add("Sa", Math.Round(d7));
				int[] divs = { 1, 2, 3, 7, 9, 11, 60 };
				sdb.sptvBala = new Dictionary<string, double>();
				Parallel.ForEach(divs, async (d) =>
				{
					Task<double> tSu = calcSapvbala("Su", ssg, horo.planetPos, plo["Su"].ToString(), d);
					Task<double> tMo = calcSapvbala("Mo", msg, horo.planetPos, plo["Mo"].ToString(), d);
					Task<double> tJu = calcSapvbala("Ju", jsg, horo.planetPos, plo["Ju"].ToString(), d);
					Task<double> tVe = calcSapvbala("Ve", vsg, horo.planetPos, plo["Ve"].ToString(), d);
					Task<double> tMe = calcSapvbala("Me", mesg, horo.planetPos, plo["Me"].ToString(), d);
					Task<double> tMa = calcSapvbala("Ma", masg, horo.planetPos, plo["Ma"].ToString(), d);
					Task<double> tSa = calcSapvbala("Sa", sasg, horo.planetPos, plo["Sa"].ToString(), d);

					double[] vrp = await Task.WhenAll(tSu, tMo, tJu, tVe, tMe, tMa, tSa);
					lock (sdb)
					{
						if (sdb.sptvBala.ContainsKey("Su"))
						{
							sdb.sptvBala["Su"] += Math.Round(vrp[0]);
						}
						else
						{
							sdb.sptvBala.Add("Su", Math.Round(vrp[0]));
						}
						if (sdb.sptvBala.ContainsKey("Mo"))
						{
							sdb.sptvBala["Mo"] += Math.Round(vrp[1]);
						}
						else
						{
							sdb.sptvBala.Add("Mo", Math.Round(vrp[1]));
						}
						if (sdb.sptvBala.ContainsKey("Ju"))
						{
							sdb.sptvBala["Ju"] += Math.Round(vrp[2]);
						}
						else
						{
							sdb.sptvBala.Add("Ju", Math.Round(vrp[2]));
						}
						if (sdb.sptvBala.ContainsKey("Ve"))
						{
							sdb.sptvBala["Ve"] += Math.Round(vrp[3]);
						}
						else
						{
							sdb.sptvBala.Add("Ve", Math.Round(vrp[3]));
						}
						if (sdb.sptvBala.ContainsKey("Me"))
						{
							sdb.sptvBala["Me"] += Math.Round(vrp[4]);
						}
						else
						{
							sdb.sptvBala.Add("Me", Math.Round(vrp[4]));
						}
						if (sdb.sptvBala.ContainsKey("Ma"))
						{
							sdb.sptvBala["Ma"] += Math.Round(vrp[5]);
						}
						else
						{
							sdb.sptvBala.Add("Ma", Math.Round(vrp[5]));
						}
						if (sdb.sptvBala.ContainsKey("Sa"))
						{
							sdb.sptvBala["Sa"] += Math.Round(vrp[6]);
						}
						else
						{
							sdb.sptvBala.Add("Sa", (int)Math.Round(vrp[6]));
						}
					}

				});
				int[] divs2 = { 1, 9 };
				sdb.ojayBala = new Dictionary<string, double>();
				Parallel.ForEach(divs2, async (d) =>
				{
					Task<double> tSu = calcOjhabala("Su", ssg, asg, horo.planetPos, d);
					Task<double> tMo = calcOjhabala("Mo", msg, asg, horo.planetPos, d);
					Task<double> tJu = calcOjhabala("Ju", jsg, asg, horo.planetPos, d);
					Task<double> tVe = calcOjhabala("Ve", vsg, asg, horo.planetPos, d);
					Task<double> tMe = calcOjhabala("Me", mesg, asg, horo.planetPos, d);
					Task<double> tMa = calcOjhabala("Ma", masg, asg, horo.planetPos, d);
					Task<double> tSa = calcOjhabala("Sa", sasg, asg, horo.planetPos, d);

					double[] vrp = await Task.WhenAll(tSu, tMo, tJu, tVe, tMe, tMa, tSa);
					lock (sdb)
					{
						if (sdb.ojayBala.ContainsKey("Su"))
						{
							sdb.ojayBala["Su"] += Math.Round(vrp[0]);
						}
						else
						{
							sdb.ojayBala.Add("Su", Math.Round(vrp[0]));
						}
						if (sdb.ojayBala.ContainsKey("Mo"))
						{
							sdb.ojayBala["Mo"] += Math.Round(vrp[1]);
						}
						else
						{
							sdb.ojayBala.Add("Mo", Math.Round(vrp[1]));
						}
						if (sdb.ojayBala.ContainsKey("Ju"))
						{
							sdb.ojayBala["Ju"] += Math.Round(vrp[2]);
						}
						else
						{
							sdb.ojayBala.Add("Ju", Math.Round(vrp[2]));
						}
						if (sdb.ojayBala.ContainsKey("Ve"))
						{
							sdb.ojayBala["Ve"] += Math.Round(vrp[3]);
						}
						else
						{
							sdb.ojayBala.Add("Ve", Math.Round(vrp[3]));
						}
						if (sdb.ojayBala.ContainsKey("Me"))
						{
							sdb.ojayBala["Me"] += Math.Round(vrp[4]);
						}
						else
						{
							sdb.ojayBala.Add("Me", Math.Round(vrp[4]));
						}
						if (sdb.ojayBala.ContainsKey("Ma"))
						{
							sdb.ojayBala["Ma"] += Math.Round(vrp[5]);
						}
						else
						{
							sdb.ojayBala.Add("Ma", Math.Round(vrp[5]));
						}
						if (sdb.ojayBala.ContainsKey("Sa"))
						{
							sdb.ojayBala["Sa"] += Math.Round(vrp[6]);
						}
						else
						{
							sdb.ojayBala.Add("Sa", Math.Round(vrp[6]));
						}
					}

				});
				Task<double> t8 = calcKenbala("Su", ssg, asg);
				//MOON
				Task<double> t9 = calcKenbala("Mo", msg, asg);
				//JUPITER
				Task<double> t10 = calcKenbala("Ju", jsg, asg);
				//VENUS
				Task<double> t11 = calcKenbala("Ve", vsg, asg);
				//MERCURY
				Task<double> t12 = calcKenbala("Me", mesg, asg);
				//MARS
				Task<double> t13 = calcKenbala("Ma", masg, asg);
				//SATURN
				Task<double> t14 = calcKenbala("Sa", sasg, asg);

				double d8 = await t8;
				double d9 = await t9;
				double d10 = await t10;
				double d11 = await t11;
				double d12 = await t12;
				double d13 = await t13;
				double d14 = await t14;
				sdb.kenBala = new Dictionary<string, double>();
				sdb.kenBala.Add("Su", Math.Round(d8));
				sdb.kenBala.Add("Mo", Math.Round(d9));
				sdb.kenBala.Add("Ju", Math.Round(d10));
				sdb.kenBala.Add("Ve", Math.Round(d11));
				sdb.kenBala.Add("Me", Math.Round(d12));
				sdb.kenBala.Add("Ma", Math.Round(d13));
				sdb.kenBala.Add("Sa", Math.Round(d14));

				string[] lrds = { "Su", "Mo", "Ju", "Ve", "Me", "Ma", "Sa" };
				double[] lpo = { sup, mop, jup, vep, mep, map, sap };
				int i = 0;
				Task<double>[] tk = new Task<double>[7];
				foreach (var lord in lrds)
				{
					tk[i] = calcDrekbala(lord, lpo[i]);
					i++;
				}
				Task.WaitAll(tk);
				sdb.drekBala = new Dictionary<string, double>();
				i = 0;
				foreach (var l in lrds)
					sdb.drekBala.Add(l, Math.Round(tk[i++].Result));
				i = 0;
				string[] kh = { hou10, hou4, asc_h, hou4, asc_h, hou10, hou7 };
				string[] lh = { ssg, msg, jsg, vsg, mesg, masg, sasg };
				//Parallel.ForEach(lrds, (lord, state) =>
				foreach (var keh in kh)
				{
					tk[i] = calcDikbala(lh[i], keh);
					i++;
				}
				Task.WaitAll(tk);
				sdb.dikBala = new Dictionary<string, double>();
				i = 0;
				foreach (var l in lrds)
					sdb.dikBala.Add(l, Math.Round(tk[i++].Result));
				DateTime dtDob = new DateTime(Convert.ToInt32(dob.Split('|')[2]), Convert.ToInt32(dob.Split('|')[1]), Convert.ToInt32(dob.Split('|')[0]), Convert.ToInt32(tob.Split('|')[0]), Convert.ToInt32(tob.Split('|')[1]), Convert.ToInt32(tob.Split('|')[2]));
				Sunrise sR = new Sunrise();
				int jD = sR.getJD(Convert.ToInt32(dob.Split('|')[0]), Convert.ToInt32(dob.Split('|')[1]), Convert.ToInt32(dob.Split('|')[2]));
				double dlat = Convert.ToDouble(latlng.Split('|')[0]);
				double dlng = Convert.ToDouble(latlng.Split('|')[1]);
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(TZConvert.IanaToWindows(timezone));
				TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
				double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
				string rise = sR.calcSunriseSet(true, jD, dlat, dlng, tzofset, false);
				string set = sR.calcSunriseSet(false, jD, dlat, dlng, tzofset, false);
				string rise2 = sR.calcSunriseSet(true, jD + 1, dlat, dlng, tzofset, false);
				rise = rise.Split(' ')[0];
				set = set.Split(' ')[0];
				rise2 = rise2.Split(' ')[0];
				DateTime dt1 = new DateTime(Convert.ToInt32(dob.Split('|')[2]), Convert.ToInt32(dob.Split('|')[1]), Convert.ToInt32(dob.Split('|')[0]), Convert.ToInt32(rise.Split(':')[0]), Convert.ToInt32(rise.Split(':')[1]), 0);
				DateTime dt2 = dt1.AddDays(1);// new DateTime(Convert.ToInt32(dob.Split('|')[2]), Convert.ToInt32(dob.Split('|')[1]), Convert.ToInt32(dob.Split('|')[0])+1, Convert.ToInt32(rise2.Split(':')[0]), Convert.ToInt32(rise2.Split(':')[1]), 0);
				DateTime dt3 = new DateTime(Convert.ToInt32(dob.Split('|')[2]), Convert.ToInt32(dob.Split('|')[1]), Convert.ToInt32(dob.Split('|')[0]), Convert.ToInt32(set.Split(':')[0]), Convert.ToInt32(set.Split(':')[1]), 0);
				TimeSpan ts = dt2.Subtract(dt1);
				TimeSpan ts2 = dt3.Subtract(dt1);
				DateTime mday = dt1.AddHours(ts2.TotalHours / 2);
				DateTime mngt = mday.AddHours(ts.TotalHours / 2);
				i = 0;
				//Parallel.ForEach(lrds, (lord, state) =>
				foreach (var lord in lrds)
				{
					tk[i] = calcNatbala(lord, dtDob, dt1, dt3, mday, mngt);
					i++;
				}
				Task.WaitAll(tk);
				sdb.natoBala = new Dictionary<string, double>();
				i = 0;
				foreach (var l in lrds)
					sdb.natoBala.Add(l, Math.Round(tk[i++].Result));
				i = 0;
				foreach (var lord in lrds)
				{
					tk[i] = calcTribala(lord, dtDob, dt1, dt3, mday, mngt);
					i++;
				}
				Task.WaitAll(tk);
				sdb.triBala = new Dictionary<string, double>();
				i = 0;
				foreach (var l in lrds)
					sdb.triBala.Add(l, Math.Round(tk[i++].Result));
				i = 0;
				int tid = 0;
				switch (horo.tithi)
				{
					case "Prathama":
						tid = 1;
						break;
					case "Dwitiya":
						tid = 2;
						break;
					case "Tritiya":
						tid = 3;
						break;
					case "Chaturthi":
						tid = 4;
						break;
					case "Panchami":
						tid = 5;
						break;
					case "Shashthi":
						tid = 6;
						break;
					case "Sapthami":
						tid = 7;
						break;
					case "Asthami":
						tid = 8;
						break;
					case "Navami":
						tid = 9;
						break;
					case "Dasami":
						tid = 10;
						break;
					case "Ekadashi":
						tid = 11;
						break;
					case "Dwadashi":
						tid = 12;
						break;
					case "Trayodashi":
						tid = 13;
						break;
					case "Chaturdashi":
						tid = 14;
						break;
					case "Purnima":
						tid = 15;
						break;
				};

				foreach (var lord in lrds)
				{
					tk[i] = calcPakbala(lord, horo.tithi, tid, horo.moonPhase);
					i++;
				}
				Task.WaitAll(tk);
				sdb.pakBala = new Dictionary<string, double>();
				i = 0;
				foreach (var l in lrds)
					sdb.pakBala.Add(l, Math.Round(tk[i++].Result));

				Int64 days_since_1Jan1860 = 714404108573;
				DateTime dt1Jan1860 = new DateTime(1860, 1, 1, 0, 0, 0);
				ts = dtDob.Subtract(dt1Jan1860);
				i = 0;
				foreach (var lord in lrds)
				{
					tk[i] = calcVmdhbala(lord, dtDob, dt1, dt2, days_since_1Jan1860 + (long)ts.TotalDays);
					i++;
				}
				Task.WaitAll(tk);
				sdb.hvmaBala = new Dictionary<string, double>();
				i = 0;
				foreach (var l in lrds)
					sdb.hvmaBala.Add(l, Math.Round(tk[i++].Result));
				i = 0;
				foreach (var lord in lrds)
				{
					tk[i] = calcAyanbala(lord, horo.planetDecl[lord]);
					i++;
				}
				Task.WaitAll(tk);
				sdb.ayanBala = new Dictionary<string, double>();
				i = 0;
				foreach (var l in lrds)
					sdb.ayanBala.Add(l, Math.Round(tk[i++].Result));
				i = 0;
				foreach (var lord in lrds)
				{
					if (lord != "Su" && lord != "Mo")
					{
						tk[i] = calcChestbala(lord, horo.planetSped[lord]);
						i++;
					}
				}
				Task.WaitAll(tk);
				sdb.chestBala = new Dictionary<string, double>();
				i = 0;
				sdb.chestBala.Add("Su", sdb.ayanBala["Su"]);
				sdb.chestBala.Add("Mo", sdb.pakBala["Mo"]);
				foreach (var l in lrds)
				{
					if (l != "Su" && l != "Mo")
					{
						sdb.chestBala.Add(l, Math.Round(tk[i++].Result));
					}
				}
				i = 0;
				double[] lnb = { 60, 51.4, 34, 42.8, 25.7, 17, 8.7 };
				sdb.naiskBala = new Dictionary<string, double>();
				foreach (var l in lrds)
				{
					sdb.naiskBala.Add(l, lnb[i]);
					i++;
				}
				rJ = string.Format(@"{0}\drgbala.json", astClient);
				string dro;
				using (StreamReader r = new StreamReader(rJ))
				{
					dro = r.ReadToEnd();
				}
				i = 0;
				foreach (var lord in lrds)
				{
					tk[i] = calcDrgbala(lord, lpo[i], lh[i], horo, dro);
					i++;
				}
				Task.WaitAll(tk);
				sdb.drgBala = new Dictionary<string, double>();
				i = 0;
				foreach (var l in lrds)
					sdb.drgBala.Add(l, Math.Round(tk[i++].Result));

				return new JsonResult(sdb);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				sdb.uchBala[err] = -1;
				return new JsonResult(sdb);
			}
		}
		async public Task<double> calcUnchabala(string lord, double pos, string sign, dynamic plo)
		{
			Dictionary<string, int> zods = new Dictionary<string, int>();
			zods["ar"] = 0;
			zods["ta"] = 30;
			zods["ge"] = 60;
			zods["cn"] = 90;
			zods["le"] = 120;
			zods["vi"] = 150;
			zods["li"] = 180;
			zods["sc"] = 210;
			zods["sa"] = 240;
			zods["cp"] = 270;
			zods["aq"] = 300;
			zods["pi"] = 330;

			string json = plo[lord].ToString();
			dynamic pls = JsonConvert.DeserializeObject(json);
			double ed = Convert.ToDouble(pls["ex"].ToString().Split(',')[1]) + zods[pls["ex"].ToString().Split(',')[0]];
			double cd = pos + zods[sign];
			double vpas = Math.Abs((180 - Math.Abs(ed - cd))) / 3;
			return vpas;
		}
		public async Task<double> calcDikbala(string sign, string asn)
		{
			int h = 1;
			if (sign != asn)
			{
				int h1 = calcHno(asn, sign);
				int h2 = calcHno(sign, asn);
				h = Math.Min(h1, h2);
			}
			return (180 - (h - 1) * 30) / 3;
		}

		async public Task<double> calcNatbala(string lord, DateTime dob, DateTime srise, DateTime sset, DateTime mday, DateTime mngt)
		{
			double vpas = 0.0;
			TimeSpan ts = srise.Subtract(mngt);
			if (lord == "Su" || lord == "Ju" || lord == "Ve")
			{
				if (dob > sset) vpas = 0;
				else
				{
					TimeSpan ts2 = sset.Subtract(srise);
					//double mdv = ts2.TotalHours/2;
					int vp1 = (int)Math.Round(60 / ts2.TotalHours);
					if (dob > mday)
					{
						TimeSpan ts1 = dob.Subtract(mday);
						vpas = (60 - Math.Round(ts1.TotalHours) * vp1);
					}
					else
					{
						TimeSpan ts1 = mday.Subtract(dob);
						vpas = (60 - Math.Round(ts1.TotalHours) * vp1);
					}
				}
			}
			else if (lord == "Mo" || lord == "Ma" || lord == "Sa")
			{
				TimeSpan ts2 = mngt.Subtract(srise);
				//double mdv = ts2.TotalHours;
				int vp1 = (int)Math.Round(60 / ts2.TotalHours);
				if (dob > mngt)
				{
					TimeSpan ts1 = dob.Subtract(mngt);
					vpas = (60 - Math.Round(ts1.TotalHours) * vp1);
				}
				else
				{
					TimeSpan ts1 = mngt.Subtract(dob);
					vpas = (60 - Math.Round(ts1.TotalHours) * vp1);
				}
			}
			else if (lord == "Me")
			{
				vpas = 60;
			}
			return vpas;
		}

		async public Task<double> calcTribala(string lord, DateTime dob, DateTime srise, DateTime sset, DateTime mday, DateTime mngt)
		{
			if (lord == "Ju") return 60;
			double vpas = 0.0;
			int dh = (int)Math.Round(mday.Subtract(srise).TotalHours);
			int nh = (int)Math.Round(mngt.Subtract(sset).TotalHours);
			int dp = (int)Math.Round((double)(dh / 3));
			int np = (int)Math.Round((double)(nh / 3));
			if (lord == "Me" || lord == "Su" || lord == "Sa")
			{
				if (dob > sset) vpas = 0;
				else
				{
					if (lord == "Me")
					{
						if (dob >= srise && dob < srise.AddHours(dp)) vpas = 60;
						else vpas = 30;
					}
					else if (lord == "Su")
					{
						if (dob >= srise && dob < srise.AddHours(dp * 2)) vpas = 60;
						else vpas = 30;
					}
					else if (lord == "Sa")
					{
						if (dob >= srise && dob < srise.AddHours(dp * 3)) vpas = 60;
						else vpas = 30;
					}
				}
			}
			else if (lord == "Mo" || lord == "Ve" || lord == "Ma")
			{
				if (dob < sset) vpas = 0;
				else
				{
					if (lord == "Mo")
					{
						if (dob >= sset && dob < sset.AddHours(np)) vpas = 60;
						else vpas = 30;
					}
					else if (lord == "Ve")
					{
						if (dob >= sset && dob < sset.AddHours(np * 2)) vpas = 60;
						else vpas = 30;
					}
					else if (lord == "Ma")
					{
						if (dob >= sset && dob < sset.AddHours(np * 3)) vpas = 60;
						else vpas = 30;
					}
				}
			}
			return vpas;
		}
		async public Task<double> calcPakbala(string lord, string tithi, int tid, string mph)
		{
			double vpas = 0.0;
			int vp1 = 4;// (int)Math.Round((double)(60 / 15));

			if (lord == "Mo" || lord == "Me" || lord == "Ju" || lord == "Ve")
			{
				if (mph == "waxing") vpas = tid * vp1;
			}
			else
			{
				if (mph == "waning") vpas = tid * vp1;
			}
			return vpas;
		}
		async public Task<double> calcSapvbala(string lord, string sign, Dictionary<string, string> ppos, string plo, int ndiv)// ing sign, dynamic plo, int lp, int slp)
		{
			double vpas = 0.0;
			//string json = plo[lord].ToString();
			dynamic pls = JsonConvert.DeserializeObject(plo);
			if (ndiv == 1)
			{
				if (sign == pls["mt"].ToString().Split(',')[0]) vpas += 45;
				if (pls["os"].ToString().Contains(sign)) vpas += 30;
			}
			string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
			string sl = string.Empty;
			foreach (var r in ras)
			{
				if (r.Contains(sign)) sl = r.Split('|')[2];
			}
			if (ndiv != 1)
			{
				JsonResult jOb = (JsonResult)CalcDivChart(ppos, ndiv);
				ppos = (Dictionary<string, string>)(jOb.Value);
			}
			string sls = string.Empty;
			sign = string.Empty;
			bool tf = false;
			if (lord != sl)
			{
				foreach (var pls2 in ppos)
				{
					foreach (var pl in pls2.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == sl)
						{
							sls = pls2.Key;
						}
						else if (pl.Split(' ')[1] == lord)
						{
							sign = pls2.Key;
						}
						if (sls != string.Empty && sign != string.Empty) break;
					}
					if (sls != string.Empty && sign != string.Empty) break;
				}
				int lp = calcHno(sign, sls);
				int slp = calcHno(sls, sign);
				if (lp == 2 || lp == 3 || lp == 4 || lp == 10 || lp == 11 || lp == 12)
				{
					tf = true;
				}
				else if (slp == 2 || slp == 3 || slp == 4 || slp == 10 || slp == 11 || slp == 12)
				{
					tf = true;
				}
			}
			//int rp = Math.Abs(lp - slp);
			int nf = 0;
			Parallel.ForEach(ras, (r, state1) =>
			{
				string[] frs = pls["fr"].ToString().Split(',');
				Parallel.ForEach(frs, (f, state2) =>
				{
					if (r.Contains(f))
					{
						nf = 1;
						state2.Break();
					}
				});
				if (nf == 1) state1.Break();
			});
			if (nf == 0)
			{
				Parallel.ForEach(ras, (r, state1) =>
				{
					string[] ers = pls["en"].ToString().Split(',');
					Parallel.ForEach(ers, (e, state2) =>
					{
						if (r.Contains(e))
						{
							nf = 2;
							state2.Break();
						}
					});
					if (nf == 2) state1.Break();
				});

			}
			if (tf && nf == 1) vpas += 22.5;
			else if (tf && nf == 0) vpas += 15;
			else if (!tf && nf == 1) vpas += 15;
			else if (tf && nf == 2) vpas += 7.5;
			else if (!tf && nf == 0) vpas += 3.75;
			else if (!tf && nf == 2) vpas += 1.875;

			return vpas;

		}

		async public Task<double> calcOjhabala(string lord, string sign, string asn, Dictionary<string, string> ppos, int ndiv)
		{
			double vpas = 0.0;
			if (ndiv == 1)
			{
				int hno = calcHno(asn, sign);
				if (((hno % 2) == 0) && (lord == "Mo" || lord == "Ve")) vpas += 15;
				else if (((hno % 2) != 0) && (lord != "Mo" && lord != "Ve")) vpas += 15;
			}
			else
			{
				string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				JsonResult jOb = (JsonResult)CalcDivChart(ppos, ndiv);
				ppos = (Dictionary<string, string>)(jOb.Value);
				asn = string.Empty;
				sign = string.Empty;
				Parallel.For(0, 12, (r1, state) =>
				{
					if (ppos.ContainsKey(ras[r1]))
					{
						foreach (string pl in ppos[ras[r1]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asn = ras[r1];
							}
							else if (pl.Split(' ')[1] == lord)
							{
								sign = ras[r1];
							}
							if (asn != string.Empty && sign != string.Empty) break;
						}
					}
					if (asn != string.Empty && sign != string.Empty) state.Break();
				});
				int hno = calcHno(asn, sign);
				if (((hno % 2) == 0) && (lord == "Mo" || lord == "Ve")) vpas += 15;
				else if (((hno % 2) != 0) && (lord != "Mo" && lord != "Ve")) vpas += 15;
			}
			return vpas;
		}
		async public Task<double> calcKenbala(string lord, string sign, string asn)
		{
			double vpas = 0.0;
			int hno = calcHno(asn, sign);
			if (hno == 1 || hno == 4 || hno == 7 || hno == 10) vpas = 60;
			else if (hno == 2 || hno == 5 || hno == 8 || hno == 11) vpas = 30;
			else if (hno == 12 || hno == 3 || hno == 6 || hno == 9) vpas = 15;
			return vpas;
		}

		async public Task<double> calcDrekbala(string lord, double pos)
		{
			double vrps = 0.0;
			switch (lord)
			{
				case "Su":
				case "Ma":
				case "Ju":
					if (pos >= 0.0 && pos < 10.0) vrps = 15;
					break;
				case "Mo":
				case "Ve":
					if (pos >= 10.0 && pos < 20.0) vrps = 15;
					break;
				case "Sa":
				case "Me":
					if (pos >= 20.0 && pos < 30.0) vrps = 15;
					break;
				default:
					break;
			}
			return vrps;
		}
		async public Task<double> calcVmdhbala(string lord, DateTime dob, DateTime srise1, DateTime srise2, Int64 doc)
		{
			try
			{
				double vpas = 0.0;
				string[] dL = { "Su", "Mo", "Ma", "Me", "Ju", "Ve", "Sa" };
				long lr = 0;
				long q = Math.DivRem(doc, 60, out lr);
				q = Math.DivRem(((q * 3) + 1), 7, out lr);
				if (lord == dL[lr]) vpas += 15;
				q = Math.DivRem(doc, 30, out lr);
				long q2 = Math.DivRem((long)((q * 2) + 1), 7, out lr);
				if (lord == dL[lr]) vpas += 30;
				q = Math.DivRem(doc, 7, out lr);
				if (lord == dL[lr]) vpas += 45;
				TimeSpan ts = srise2.Subtract(srise1);
				int hora = (int)Math.Round(ts.TotalHours / 24);
				int bh = (int)Math.Round((double)(dob.Hour + dob.Minute / (double)60));
				//int tik = 1;
				//while (hora * tik++ < bh) ;
				//lr = hora * (tik - 1);
				Math.DivRem(lr, 7, out lr);
				if (lord == dL[lr]) vpas += 60;
				return vpas;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				return -1;
			}
		}
		async public Task<double> calcAyanbala(string lord, string decl)
		{
			double vpas = 0.0;
			//const string MY_ODEGREE_STRIN = "°";
			int deg = Convert.ToInt32(decl.Split('°')[0]);
			int min = Convert.ToInt32(decl.Split('°')[1].Split('\'')[0]);
			int sec = Convert.ToInt32(decl.Split('°')[1].Split('\'')[1].Split('.')[0]);
			double ddec = dmsToDec(deg, min, sec);
			if (lord == "Me")
			{
				vpas = (23.27 + Math.Abs(ddec)) * 1.2793;
			}
			else if (lord == "Mo" || lord == "Sa")
			{
				vpas = (ddec < 0) ? 23.27 + (Math.Abs(ddec) * 1.2793) : 23.27 - (Math.Abs(ddec) * 1.2793);
			}
			else if (lord == "Su" || lord == "Ma" || lord == "Ju" || lord == "Ve")
			{
				vpas = (ddec > 0) ? 23.27 + (Math.Abs(ddec) * 1.2793) : 23.27 - (Math.Abs(ddec) * 1.2793);
			}
			return vpas;
		}

		async public Task<double> calcChestbala(string lord, string sped)
		{
			double vpas = 0.0;
			int deg = Convert.ToInt32(sped.Split('°')[0]);
			int min = Convert.ToInt32(sped.Split('°')[1].Split('\'')[0]);
			int sec = Convert.ToInt32(sped.Split('°')[1].Split('\'')[1].Split('.')[0]);
			double ddec = dmsToDec(deg, min, sec);
			//double rx = 0.0;
			if (ddec < 0) vpas = 60;
			else
			{
				switch (lord)
				{
					case "Ma":
						if (ddec > dmsToDec(0, 40, 0)) vpas = 45;
						else if (ddec < dmsToDec(0, 30, 0)) vpas = 30;
						else if (ddec > dmsToDec(0, 37, 0)) vpas = 7.5;
						else vpas = 15;
						break;
					case "Ju":
						if (ddec > dmsToDec(0, 10, 0)) vpas = 45;
						else if (ddec < dmsToDec(0, 5, 0)) vpas = 30;
						else if (ddec > dmsToDec(0, 4, 52)) vpas = 7.5;
						else vpas = 15;
						break;
					case "Me":
						if (ddec > dmsToDec(1, 30, 0)) vpas = 45;
						else if (ddec < dmsToDec(1, 0, 0)) vpas = 30;
						else if (ddec > dmsToDec(0, 59, 8)) vpas = 7.5;
						else vpas = 15;
						break;
					case "Ve":
						if (ddec > dmsToDec(1, 10, 0)) vpas = 45;
						else if (ddec < dmsToDec(0, 50, 0)) vpas = 30;
						else if (ddec > dmsToDec(0, 59, 8)) vpas = 7.5;
						else vpas = 15;
						break;
					case "Sa":
						if (ddec > dmsToDec(0, 5, 0)) vpas = 45;
						else if (ddec < dmsToDec(0, 2, 0)) vpas = 30;
						else if (ddec > dmsToDec(0, 2, 1)) vpas = 7.5;
						else vpas = 15;
						break;
					default:
						break;
				}
			}
			return vpas;
		}
		async public Task<double> calcNiskbala(string lord, double lvp)
		{
			return (8.571 * lvp);
		}
		async public Task<double> calcDrgbala(string lord, double pos, string sign, Horo horo, string dro)
		{
			try
			{
				dynamic plo = JsonConvert.DeserializeObject(dro);
				double vpas = 0.0;
				Dictionary<string, int> zods = new Dictionary<string, int>();
				zods["ar"] = 0;
				zods["ta"] = 30;
				zods["ge"] = 60;
				zods["cn"] = 90;
				zods["le"] = 120;
				zods["vi"] = 150;
				zods["li"] = 180;
				zods["sc"] = 210;
				zods["sa"] = 240;
				zods["cp"] = 270;
				zods["aq"] = 300;
				zods["pi"] = 330;
				JsonResult jO = (JsonResult)GetAspectsEx(horo, sign);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				double zp = zods[sign] + pos;
				foreach (var a in dctAsp)
				{
					if (a.Key == 1) continue;
					foreach (var b in a.Value.Split('|'))
					{
						double p = zods[b.Split(' ')[1].Split('&')[1]] + dmsToDec(Convert.ToInt16(b.Split(' ')[0].Split('.')[0]), Convert.ToInt16(b.Split(' ')[0].Split('.')[1]), Convert.ToInt16(b.Split(' ')[0].Split('.')[2]));

						double ld = Math.Abs(zp - p);
						for (int zs = 0; zs < 360; zs += 30)
						{
							if (ld >= zs && ld < zs + 30)
							{
								int z = (int)Math.Round(ld - zs);
								if (z == 0) z++;
								string json = plo[z.ToString()].ToString();
								dynamic pls = JsonConvert.DeserializeObject(json);
								vpas += Convert.ToDouble(pls[string.Format("{0}-{1}", zs, zs + 30)]);
							}
						}
					}
				}
				return vpas;
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				return 0F;
			}
		}

		async public Task<Dictionary<string, string>> calcGrahyudh(Horo horo)
		{
			Dictionary<string, string> dctYud = new Dictionary<string, string>();

			return dctYud;
		}
		[HttpGet("AstrologerStatus")]
		public ActionResult AstrologerStatus(string uuid, string status)
		{
			_logger.LogInformation("AstrologerStatus");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbAst = db.GetCollection<Astrologer>("Astrologer");
				var filter = Builders<Astrologer>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbAst.Count(filter);
					if (cnt > 0L)
					{
						var update = Builders<Astrologer>.Update.Set("status", status);
						dbAst.FindOneAndUpdate<Astrologer>(filter, update);
					}
					else
					{
						dbAst = db.GetCollection<Astrologer>("HobbyAstro");
						filter = Builders<Astrologer>.Filter.Eq("uuid", uuid);
						cnt = dbAst.Count(filter);
						if (cnt > 0L)
						{
							var update = Builders<Astrologer>.Update.Set("status", status);
							dbAst.FindOneAndUpdate<Astrologer>(filter, update);
						}
					}

					return new JsonResult("success");
				}
				catch (Exception eX)
				{
					var ast = new Astrologer
					{
						uuid = uuid,
						tagline = eX.Message,
						status = "E"
					};
					return new JsonResult(ast);
				}
			}
			catch (Exception eX)
			{
				var ast = new Astrologer
				{
					uuid = uuid,
					tagline = eX.Message,
					status = "E"
				};
				return new JsonResult(ast);
			}
		}
		[HttpGet("AstrologerTagline")]
		public ActionResult AstrologerTagline(string uuid, string tagline)
		{
			_logger.LogInformation("AstrologerTagline");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbAst = db.GetCollection<Astrologer>("Astrologer");
				var filter = Builders<Astrologer>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbAst.CountDocuments(filter);
					if (cnt > 0L)
					{
						var update = Builders<Astrologer>.Update.Set("tagline", tagline);
						dbAst.FindOneAndUpdate<Astrologer>(filter, update);
					}
					else
					{
						dbAst = db.GetCollection<Astrologer>("HobbyAstro");
						filter = Builders<Astrologer>.Filter.Eq("uuid", uuid);
						cnt = dbAst.CountDocuments(filter);
						if (cnt > 0L)
						{
							var update = Builders<Astrologer>.Update.Set("tagline", tagline);
							dbAst.FindOneAndUpdate<Astrologer>(filter, update);
						}
					}

					return new JsonResult("success");
				}
				catch (Exception eX)
				{
					var ast = new Astrologer
					{
						uuid = uuid,
						tagline = eX.Message,
						status = "E"
					};
					return new JsonResult(ast);
				}
			}
			catch (Exception eX)
			{
				var ast = new Astrologer
				{
					uuid = uuid,
					tagline = eX.Message,
					status = "E"
				};
				return new JsonResult(ast);
			}
		}
		[HttpGet("AstrologerAvatar")]
		public ActionResult AstrologerAvatar(string uuid, string avatar)
		{
			_logger.LogInformation("AstrologerAvatar");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbAst = db.GetCollection<Astrologer>("Astrologer");
				var filter = Builders<Astrologer>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = dbAst.Count(filter);
					if (cnt > 0L)
					{
						var update = Builders<Astrologer>.Update.Set("avatar", avatar);
						dbAst.FindOneAndUpdate<Astrologer>(filter, update);
					}
					else
					{
						dbAst = db.GetCollection<Astrologer>("HobbyAstro");
						filter = Builders<Astrologer>.Filter.Eq("uuid", uuid);
						cnt = dbAst.Count(filter);
						if (cnt > 0L)
						{
							var update = Builders<Astrologer>.Update.Set("avatar", avatar);
							dbAst.FindOneAndUpdate<Astrologer>(filter, update);
						}
					}

					return new JsonResult("success");
				}
				catch (Exception eX)
				{
					var ast = new Astrologer
					{
						uuid = uuid,
						tagline = eX.Message,
						status = "E"
					};
					return new JsonResult(ast);
				}
			}
			catch (Exception eX)
			{
				var ast = new Astrologer
				{
					uuid = uuid,
					tagline = eX.Message,
					status = "E"
				};
				return new JsonResult(ast);
			}
		}
		[HttpGet("GetAllAstrologers")]
		public async Task<List<Astrologer>> GetAllAstrologers()
		{
			_logger.LogInformation("GetAllAstrologers");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Astrologer>("Astrologer"); });
					var dbRat = await Task.Run(() => { return db.GetCollection<Rating>("Rating"); });

					var qAst =
									from e in dbAst.AsQueryable<Astrologer>()
									join o in dbRat.AsQueryable<Rating>() on e.uid equals o.pid into jo
									select new Astrologer()
									{
										uuid = e.uuid,
										uid = e.uid,
										mob = e.mob,
										name = e.name,
										tagline = e.tagline,
										avatar = e.avatar,
										status = e.status,
										rating = (double)jo.Average(s => s.rating),
										tot_ratings = jo.Count()
									};
					return qAst.ToList();
					//                 select e).ToList();
					//List < Astrologer > qAstUser = await dbAst.Find(_ => true).ToListAsync();
					//if (qAstUser != null)
					//               {
					//                   RndList.Shuffle<Astrologer>(ref qAstUser);
					//	var fidx = qAstUser.FindIndex(x => x.uid == "sankethsharma");
					//	var fitm = qAstUser[fidx];
					//	qAstUser[fidx] = qAstUser[0];
					//	qAstUser[0] = fitm;
					//	return qAstUser;
					//               }
					//               else
					//               {
					//	List<Astrologer> lst = new List<Astrologer>();
					//                   var ast = new Astrologer
					//                   {
					//                       status = "X"
					//                   };
					//                   lst.Add(ast);
					//	return lst;
					//               }
				}
				catch (Exception eX)
				{
					List<Astrologer> lst = new List<Astrologer>();
					var ast = new Astrologer
					{
						tagline = eX.Message,
						status = "E"
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Astrologer
				{
					tagline = eX.Message,
					status = "E"
				};
				List<Astrologer> lst = new List<Astrologer>();
				lst.Add(ast);
				return lst;
			}
		}
		[HttpGet("VedicStories")]
		public async Task<List<Blog>> VedicStories()
		{
			_logger.LogInformation("VedicStories");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Blog>("Blog"); });
					return await dbAst.Find(_ => true).ToListAsync();
				}
				catch (Exception eX)
				{
					List<Blog> lst = new List<Blog>();
					var ast = new Blog
					{
						title = eX.Message,
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Blog
				{
					title = eX.Message,
					story = "E"
				};
				List<Blog> lst = new List<Blog>();
				lst.Add(ast);
				return lst;
			}
		}
		[HttpPost("BookPuja")]
		public async Task<PujaBooking> BookPuja([FromBody] PujaBooking pujaBooking)
		{
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPB = await Task.Run(() => { return db.GetCollection<PujaBooking>("PujaBooking"); });
				await dbPB.InsertOneAsync(pujaBooking);
				return pujaBooking;

			}
			catch (Exception eX)
			{
				var pb = new PujaBooking
				{
					name = eX.Message
				};
				return pb;
			}
		}
		[HttpGet("GetPujas")]
		public async Task<List<Puja>> GetPujas()
		{
			_logger.LogInformation("GetPujas");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Puja>("Puja"); });
					List<Puja> qAstUser = await dbAst.Find(_ => true).ToListAsync();
					if (qAstUser != null)
					{
						return qAstUser;
					}
					else
					{
						List<Puja> lst = new List<Puja>();
						var ast = new Puja
						{
							name = "X"
						};
						lst.Add(ast);
						return lst;
					}
				}
				catch (Exception eX)
				{
					List<Puja> lst = new List<Puja>();
					var ast = new Puja
					{
						name = eX.Message,
						desc = "E"
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Puja
				{
					name = eX.Message,
					desc = "E"
				};
				List<Puja> lst = new List<Puja>();
				lst.Add(ast);
				return lst;
			}
		}
		[HttpGet("GetAllReports")]
		public async Task<List<Report>> GetAllReports()
		{
			_logger.LogInformation("GetAllReports");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Report>("Report"); });
					var qAstUser =
									(from e in dbAst.AsQueryable<Report>()
									 where e.status == "new"
									 select e).ToList();
					if (qAstUser != null)
					{
						return qAstUser;
					}
					else
					{
						List<Report> lst = new List<Report>();
						var ast = new Report
						{
							status = "X"
						};
						lst.Add(ast);
						return lst;
					}
				}
				catch (Exception eX)
				{
					List<Report> lst = new List<Report>();
					var ast = new Report
					{
						dob = eX.Message,
						status = "E"
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Report
				{
					dob = eX.Message,
					status = "E"
				};
				List<Report> lst = new List<Report>();
				lst.Add(ast);
				return lst;
			}
		}

		[HttpGet("GetReports")]
		public async Task<List<Report>> GetReports(string uuid)
		{
			_logger.LogInformation("GetReports");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Report>("Report"); });
					var filter = Builders<Report>.Filter.Eq("uuid", uuid);
					try
					{
						long cnt = dbAst.CountDocuments(filter);
						if (cnt > 0L)
						{
							var qAstUser =
									(from e in dbAst.AsQueryable<Report>()
									 where e.uuid == uuid
									 select e).ToList();
							return qAstUser;
						}
						else
						{
							List<Report> lst = new List<Report>();
							var ast = new Report
							{
								status = "X"
							};
							lst.Add(ast);
							return lst;
						}
					}
					catch (Exception eX)
					{
						List<Report> lst = new List<Report>();
						var ast = new Report
						{
							dob = eX.Message,
							status = "E"
						};
						lst.Add(ast);
						return lst;
					}
				}
				catch (Exception eX)
				{
					List<Report> lst = new List<Report>();
					var ast = new Report
					{
						dob = eX.Message,
						status = "E"
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Report
				{
					dob = eX.Message,
					status = "E"
				};
				List<Report> lst = new List<Report>();
				lst.Add(ast);
				return lst;
			}
		}
		[HttpGet("GetAllAgents")]
		public async Task<List<Agent>> GetAllAgents()
		{
			_logger.LogInformation("GetAllAgents");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = await Task.Run(() => { return db.GetCollection<Agent>("Agent"); });
					var qAstUser =
									(from e in dbAst.AsQueryable<Agent>()
									 select e).ToList();
					if (qAstUser != null)
					{
						return qAstUser;
					}
					else
					{
						List<Agent> lst = new List<Agent>();
						var ast = new Agent
						{
							status = "X"
						};
						lst.Add(ast);
						return lst;
					}
				}
				catch (Exception eX)
				{
					List<Agent> lst = new List<Agent>();
					var ast = new Agent
					{
						tagline = eX.Message,
						status = "E"
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Agent
				{
					tagline = eX.Message,
					status = "E"
				};
				List<Agent> lst = new List<Agent>();
				lst.Add(ast);
				return lst;
			}
		}

		[HttpGet("PrashnaJyotish")]
		[ResponseCache(NoStore = true, Duration = 0)]
		public ActionResult PrashnaJyotish(string dob, string tob, string latlng, string timezone, int znum)
		{
			try
			{
				_logger.LogInformation("PrashnaJyotish");
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				Dictionary<string, string> dlord = new Dictionary<string, string>();
				dlord["SUNDAY"] = "SUN";
				dlord["MONDAY"] = "MOON";
				dlord["TUESDAY"] = "MARS";
				dlord["WEDNESDAY"] = "MERCURY";
				dlord["THURSDAY"] = "JUPITER";
				dlord["FRIDAY"] = "VENUS";
				dlord["SATURDAY"] = "SATURN";
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				int ayanid = 3;
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
				DateTime dtDOB = new DateTime(i3, (int)u2, (int)u1, (int)u4, (int)u5, (int)u6);
				string zdb = dtDOB.ToString("dddd, dd MMMM yyyy HH:mm:ss");
				string rlord = dlord[zdb.Split(',')[0].ToUpper()];
				string zssl = getSSSL(znum);
				string asc_sls = string.Empty;
				string mo_sls = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC")
						{
							string[] pdg = pl.Split(' ')[0].Split('.');
							//string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
							double plpos = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2]));// Convert.ToDouble(p);
							asc_sls = getSUBZ(ppos.Key, plpos);
						}
						else if (pl.Split(' ')[1] == "Mo")
						{
							string[] pdg = pl.Split(' ')[0].Split('.');
							//string p = string.Format("{0}.{1}", pdg[0], pdg[1]);
							double plpos = zstart[ppos.Key] + dmsToDec(Convert.ToInt32(pdg[0]), Convert.ToInt32(pdg[1]), Convert.ToInt32(pdg[2]));//Convert.ToDouble(p);
							mo_sls = getSUBZ(ppos.Key, plpos);
						}
						if (asc_sls != string.Empty && mo_sls != string.Empty) break;
					}
					if (asc_sls != string.Empty && mo_sls != string.Empty) break;
				}
				Prashna pras = new Prashna();
				pras.znum = znum;
				pras.ascSSSL = asc_sls;
				pras.moSSSL = mo_sls;
				pras.dayL = rlord;
				pras.praSSSL = zssl;
				pras.interr = "";
				bool basc = false;
				bool bmo = false;
				foreach (var asc in asc_sls.Split(','))
				{
					if (zssl.Split('|')[2] == asc.Split('-')[2])
					{
						pras.answer = "YES";
						basc = true;
					}
				}
				foreach (var mo in mo_sls.Split(','))
				{
					if (zssl.Split('|')[2] == mo.Split('-')[2])
					{
						pras.answer = "YES";
						basc = true;
					}
				}
				if (bmo && basc)
					pras.remarks = string.Format("The sublord {0} of your selected number {1} has matched with Ruling Planet Moon's sublord, hence your question in context will be fulfilled", zssl.Split('|')[2], znum);
				else if (basc)
					pras.remarks = string.Format("The sublord {0} of your selected number {1} has matched with Ruling Planet Ascendant sublord, hence your question in context will be fulfilled", zssl.Split('|')[2], znum);
				else if (bmo)
					pras.remarks = string.Format("The sublord {0} of your selected number {1} has matched with Ruling Planet Moon's sublord, hence your question in context will be fulfilled", zssl.Split('|')[2], znum);
				else
				{
					pras.remarks = string.Format("The sublord {0} of your selected number {1} did not match with Ruling Planet sublord, hence your question in context may not be not fulfilled at the moment", zssl.Split('|')[2], znum);
					pras.answer = "NO";
				}

				return new JsonResult(pras);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				Prashna pras = new Prashna();
				pras.interr = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				return new JsonResult(pras);

			}
		}
		public string getSSSL(int znum)
		{
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				using (StreamReader r3 = new StreamReader(string.Format(@"{0}\sublords.json", astClient)))
				{
					string json = r3.ReadToEnd();
					List<SubLord> sublords = JsonConvert.DeserializeObject<List<SubLord>>(json);
					string subz = string.Empty;
					int n = 0;
					foreach (var item in sublords)
					{
						n++;
						if (n == znum) return item.sign + '|' + item.star + '|' + item.sub;
					}
					return "ERROR";
				}
			}
			catch (Exception eX)
			{
				return eX.Message;
			}
		}
		[HttpGet("GetTransPreds")]
		public ActionResult GetTransPreds(string dob, string tob)
		{
			_logger.LogInformation("GetTransPreds");
			try
			{
				string latlng = "17.23|78.29";
				string timezone = "India Standard Time";
				//DBLog(string.Format("GetTransPreds-{0}", dob));
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				//string sF = string.Format(@"{0}\ayan-kp.json", astClient);
				//string ayan = string.Empty;
				//using (StreamReader r = new StreamReader(sF))
				//{
				//    string jsa = r.ReadToEnd();
				//    dynamic ayans = JsonConvert.DeserializeObject(jsa);
				//    ayan = ayans[dob.Split('|')[2]].ToString();
				//}
				// JsonResult json1 = (JsonResult)BirthstarEx(dob, tob, ayan);
				JsonResult json1 = (JsonResult)GetBirthstar(dob, tob, latlng, "Asia/Calcutta", 4);
				BirthStar cStar = (BirthStar)json1.Value;
				Dictionary<string, string> dctPreds = new Dictionary<string, string>();
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				DateTime today = DateTime.Now;
				DateTime eday = DateTime.Now.AddDays(30);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				while (today <= eday)
				{
					//string tday = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
					//calcStar(tday);
					//JsonResult json1 = (JsonResult)Birthstar(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|0", today.Hour, today.Minute));
					Horoscope mHoro = new Horoscope();
					uint u1 = Convert.ToUInt32(today.Day);
					uint u2 = Convert.ToUInt32(today.Month);
					int i3 = Convert.ToInt32(today.Year);
					uint u4 = 5;//Convert.ToUInt32(today.Hour);
					uint u5 = 0;//Convert.ToUInt32(today.Minute);
					uint u6 = 0;
					double u7 = Convert.ToDouble(latlng.Split('|')[0]);
					double u8 = Convert.ToDouble(latlng.Split('|')[1]);
					mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, timezone, false, string.Empty);
					mHoro.calc_planets_pos(true, astClient);
					int rpos = 0;
					foreach (string sign in signs)
					{
						rpos++;
						if (mHoro.planetsPos.ContainsKey(sign))
						{
							var pls = mHoro.planetsPos[sign].Split('|');
							//var ePls = '';
							//var mnode = '';
							for (var k = 0; k < pls.Length; k++)
							{
								if (pls[k].Split(' ')[1] == "MEAN_NODE")
								{
									var kpos = rpos + 6;
									if (kpos > 12) kpos = (kpos - 12);
									//var mn = i + 11;
									//if (mn > 15) mn -= 15;
									if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
									{
										var eP = mHoro.planetsPos[signs[kpos - 1]];
										mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									else
									{
										mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									// plPos[sign] = ePls;
									mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								}

							}
							pls = mHoro.planetsPos[sign].Split('|');
							for (var k = 0; k < pls.Length; k++)
							{
								string retro = "D";
								string pl = pls[k].Split(' ')[1];
								if (mHoro.retroPls.Contains(pl)) retro = "R";
								if (dctPls.ContainsKey(pls[k].Split(' ')[1]))
								{
									if (dctPls[pls[k].Split(' ')[1]].IndexOf(sign) < 0)
										dctPls[pls[k].Split(' ')[1]] += string.Format("|{0}-{1}-{2}", sign, String.Format(ci, "{0:MMM dd}", today), retro);
								}
								else
									dctPls[pls[k].Split(' ')[1]] = string.Format("{0}-{1}-{2}", sign, String.Format(ci, "{0:MMM dd}", today), retro);
							}
						}
					}
					today = today.AddDays(1);
				}
				string rJ = string.Format(@"{0}\signs_short.json", astClient);
				string rJ2 = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r3 = new StreamReader(rJ2))
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json3 = r3.ReadToEnd();
					string json4 = r4.ReadToEnd();
					dynamic rashis_short = JsonConvert.DeserializeObject(json4);
					dynamic rashis = JsonConvert.DeserializeObject(json3);
					foreach (var pred in dctPls)
					{
						string pras = pred.Value;
						string spred = string.Empty;
						int toks = 0;
						foreach (var ras in pras.Split('|'))
						{
							int pos = GetPosFMon(rashis_short[cStar.birthSign.ToLower()].ToString(), ras.Split('-')[0]);
							if (pred.Key == "Su" || pred.Key == "Mo" || pred.Key == "Ve" || pred.Key == "Ju" || pred.Key == "Sa" || pred.Key == "Me" || pred.Key == "Ma" || pred.Key == "Ra" || pred.Key == "Ke")
							{
								string pky = string.Format(@"{0}\{1}.json", astClient, (pred.Key == "Ra") ? "Ma" : (pred.Key == "Ke") ? "Sa" : pred.Key);
								using (StreamReader r5 = new StreamReader(pky))
								{
									string json5 = r5.ReadToEnd();
									dynamic plpreds = JsonConvert.DeserializeObject(json5);
									if (toks > 0)
									{
										if (ras.Split('-')[2] == "D")
											spred += string.Format("\nOn {0} {1} moves to {2} which is {3} house, during this time {4}", ras.Split('-')[1], dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
										else
											spred += string.Format("\nOn {0} {1} turns retrograde & moves to {2} which is {3} house, during this time {4}", ras.Split('-')[1], dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
									}
									else
									{
										spred = string.Format("{0} is transiting in {1} which is {2} house, during this time {3}", dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
									}
								}
								toks++;
							}
						}
						if (toks > 0)
							dctPreds[dctPlNames[pred.Key]] = spred;
					}
				}
				return new JsonResult(dctPreds);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetBirthstar")]
		public ActionResult GetBirthstar(string dob, string tob, string latlng, string timezone, int ayanid)
		{
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				_logger.LogInformation("GetBirthstar");
				//string latlng = "17.23|78.29";
				//string timezone = "India Standard Time";
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				mHoro.calc_planets_pos(true, astClient);
				BirthStar bStar = new BirthStar();
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bmon = false;
							double moonDeg = 0.0;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = dmsToDec(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]));
										bStar.birthSignDeg = pl.Split(' ')[0];
										bmon = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));
								bStar.birthSignDeg = pls.Split(' ')[0];
								bmon = true;
							}
							if (bmon)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
									string nJ = string.Format(@"{0}\nakshatras.json", astClient);
									using (StreamReader r2 = new StreamReader(nJ))
									{
										string json2 = r2.ReadToEnd();
										List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
										foreach (var nak in nakshatras)
										{
											string[] snak = nak.location.start.Split(',')[0].Split('.');
											double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
											string[] enak = nak.location.end.Split(',')[0].Split('.');
											double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
											if (nak.location.start.Split(',')[1] == sign.ToString() && nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1 && moonDeg <= nakd2)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.start.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg >= nakd1)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.end.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg <= nakd2)
												{
													bStar.birthStar = nak.name;
													bStar.birthSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
										}
									}
								}
								break;
							}
						}
					}
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bsun = false;
							float sunDeg = 0;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bStar.sunDeg = pl.Split(' ')[0];
										bsun = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bStar.sunDeg = pls.Split(' ')[0];
								bsun = true;
							}
							if (bsun)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									bStar.sunSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								}
								break;
							}
						}
					}
				}

				return new JsonResult(bStar);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetBirthstarEx")]
		public async Task<BirthStar> GetBirthstarEx(string dob, string tob, string latlng, string timezone, int dstofset, int ayanid)
		{
			_logger.LogInformation("GetBirthstarEx");
			try
			{
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				string ayan = string.Empty;
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
				double ofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					ayan = Ayanmsa.CalcEx(d, m, y, ofset, (AYANMSAS)ayanid);
				}
				return await GetBStarEx(dob, tob, latlng, timezone, dstofset, ayan, ayanid);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				BirthStar cStar = new BirthStar();
				cStar.birthSign = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				return cStar;
			}
		}
		public int GetPosFMon(string bsign, string psign)
		{
			bsign = bsign.ToLower();
			psign = psign.ToLower();
			int pos = 0;
			string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
			for (int i = 0; i < 12; i++)
			{
				if (pos > 0) pos++;
				if (signs[i] == bsign)
				{
					pos++;
				}
				if (pos > 0 && signs[i] == psign) break;
				if (i == 11) i = -1;
			}
			return pos;
		}
		[HttpGet("GetMoonPhase")]
		public ActionResult GetMoonPhase(string dob, string tob, string latlng, string timezone)
		{
			_logger.LogInformation("GetMoonPhase");
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				mHoro.init_data(u1, u2, i3, u4, u5, u6, u7, u8, TZConvert.IanaToWindows(timezone), false, string.Empty);
				mHoro.calc_planets_pos(false, astClient);
				mHoro.calc_houses();
				Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				horo.housePos = mHoro.housePos;
				horo.ascPos = mHoro.ascPos;
				float moonDeg = 0;
				string moonSign = string.Empty;
				float sunDeg = 0;
				string sunSign = string.Empty;
				string sF = string.Format(@"{0}\o_short_signs.json", astClient);
				using (StreamReader r = new StreamReader(sF))
				{
					string json = r.ReadToEnd();
					dynamic signs = JsonConvert.DeserializeObject(json);
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bmon = false;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Mo")
									{
										moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));//(Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bmon = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Mo")
							{
								moonDeg = (float)dmsToDec(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]), Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]));//(Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bmon = true;
							}
							if (bmon)
							{
								moonSign = calcStar(moonDeg, sign.ToString()).Split('|')[0];
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									int rashi_num = Convert.ToInt32(rashis[sign.ToString()].ToString().Split('|')[0]);
									string nJ = string.Format(@"{0}\nakshatras.json", astClient);
									using (StreamReader r2 = new StreamReader(nJ))
									{
										string json2 = r2.ReadToEnd();
										List<Star> nakshatras = JsonConvert.DeserializeObject<List<Star>>(json2);
										foreach (var nak in nakshatras)
										{
											string[] snak = nak.location.start.Split(',')[0].Split('.');
											double nakd1 = dmsToDec(Convert.ToInt32(snak[0]), Convert.ToInt32(snak[1]), 0);
											string[] enak = nak.location.end.Split(',')[0].Split('.');
											double nakd2 = dmsToDec(Convert.ToInt32(enak[0]), Convert.ToInt32(enak[1]), 0);
											if (nak.location.start.Split(',')[1] == sign.ToString() && nak.location.end.Split(',')[1] == sign.ToString())
											{
												if (moonDeg >= nakd1 && moonDeg <= nakd2)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.start.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg >= nakd1)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
											else if (nak.location.end.Split(',')[1] == sign.ToString().ToLower())
											{
												if (moonDeg <= nakd2)
												{
													horo.birthStar = nak.name;
													moonSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
													break;
												}
											}
										}
									}
								}
								break;
							}
						}
					}
					foreach (var sign in signs)
					{
						if (mHoro.planetsPos.ContainsKey(sign.ToString()))
						{
							bool bsun = false;
							string pls = mHoro.planetsPos[sign.ToString()].ToString();
							if (pls.Contains('|') == true)
							{
								foreach (string pl in pls.Split('|'))
								{
									if (pl.Split(' ')[1] == "Su")
									{
										sunDeg = (Convert.ToInt32(pl.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pl.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pl.Split(' ')[0].Split('.')[2]) / 3600);
										bsun = true;
										break;
									}
								}
							}
							else if (pls.Split(' ')[1] == "Su")
							{
								sunDeg = (Convert.ToInt32(pls.Split(' ')[0].Split('.')[0]) + Convert.ToInt32(pls.Split(' ')[0].Split('.')[1]) / 60 + Convert.ToInt32(pls.Split(' ')[0].Split('.')[2]) / 3600);
								bsun = true;
							}
							if (bsun)
							{
								string rJ = string.Format(@"{0}\o_rashis.json", astClient);
								using (StreamReader r4 = new StreamReader(rJ))
								{
									string json4 = r4.ReadToEnd();
									dynamic rashis = JsonConvert.DeserializeObject(json4);
									sunSign = rashis[sign.ToString()].ToString().Split('|')[1].ToString();
								}
								break;
							}
						}
					}
					string tithi = calcTithi(moonSign, moonDeg, sunSign, sunDeg);
					horo.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
					horo.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
					horo.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
					horo.yoga = calcYog(moonSign, moonDeg, sunSign, sunDeg);
					horo.karana = calcKaran(moonSign, moonDeg, sunSign, sunDeg);
				}
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				for (int i = 0; i < zod_nam.Count(); i++)
				{
					if (horo.planetPos.ContainsKey(zod_nam[i]))
					{
						var ppos = horo.planetPos[zod_nam[i]];
						foreach (var pl in ppos.Split('|'))
						{
							string[] pld = pl.Split(' ')[0].Split('.');
							if (dctPls.ContainsKey(zod_nam[i]))
							{
								dctPls[zod_nam[i]] = string.Format("{0}|{1}.{2} {3}", dctPls[zod_nam[i]], pld[0], pld[1], pl.Split(' ')[1]);
							}
							else
							{
								dctPls[zod_nam[i]] = string.Format("{0}.{1} {2}", pld[0], pld[1], pl.Split(' ')[1]);
							}
						}
					}
				}
				horo.planetPos = dctPls;
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetMoonPhaseEx")]
		public async Task<ActionResult> GetMoonPhaseEx(string dob, string tob, string latlng, string timezone, int ayanid)
		{
			_logger.LogInformation("GetMoonPhaseEx");
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
				double ofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					ayan = Ayanmsa.CalcEx(d, m, y, ofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, 0, ayan, ayanid, true);
				BirthStar cStar = await GetBStarEx3(mHoro);
				double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
				double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
				string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
				Horo horo = new Horo();
				horo.birthStar = cStar.birthStar;
				horo.planetPos = mHoro.planetsPos;
				horo.housePos = mHoro.housePos;
				horo.ascPos = mHoro.ascPos;
				horo.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
				horo.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
				horo.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
				horo.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
				horo.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
				Sunrise sR = new Sunrise();
				int jD = sR.getJD(Convert.ToInt32(dob.Split('|')[0]), Convert.ToInt32(dob.Split('|')[1]), Convert.ToInt32(dob.Split('|')[2]));
				double dlat = Convert.ToDouble(latlng.Split('|')[0]);
				double dlng = Convert.ToDouble(latlng.Split('|')[1]);
				horo.sunrise = sR.calcSunriseSet(true, jD, dlat, dlng, ofset, false);
				horo.sunset = sR.calcSunriseSet(false, jD, dlat, dlng, ofset, false);
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetMoonPhaseEx2")]
		public async Task<ActionResult> GetMoonPhaseEx2(string dob, string tob, string latlng, string timezone, int dstofset, int ayanid)
		{
			_logger.LogInformation("GetMoonPhaseEx2");
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
				double ofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					ayan = Ayanmsa.CalcEx(d, m, y, ofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, false);
				BirthStar cStar = await GetBStarEx(dob, tob, latlng, timezone, dstofset, ayan, ayanid);
				double bsd = Convert.ToInt32(cStar.birthSignDeg.Split('.')[0]) + Convert.ToInt32(cStar.birthSignDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.birthSignDeg.Split('.')[2]) / 3600;
				double sud = Convert.ToInt32(cStar.sunDeg.Split('.')[0]) + Convert.ToInt32(cStar.sunDeg.Split('.')[1]) / 60 + Convert.ToInt32(cStar.sunDeg.Split('.')[2]) / 3600;
				string tithi = calcTithi(cStar.birthSign, bsd, cStar.sunSign, sud);
				Horo horo = new Horo();
				horo.birthStar = cStar.birthStar;
				horo.planetPos = mHoro.planetsPos;
				horo.housePos = mHoro.housePos;
				horo.ascPos = mHoro.ascPos;
				horo.tithi = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[0] : tithi;
				horo.moonPhase = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[1] : "";
				horo.tithiRem = (tithi.IndexOf('|') > -1) ? tithi.Split('|')[2] : "";
				horo.yoga = calcYog(cStar.birthSign, bsd, cStar.sunSign, sud);
				horo.karana = calcKaran(cStar.birthSign, bsd, cStar.sunSign, sud);
				Sunrise sR = new Sunrise();
				int jD = sR.getJD(Convert.ToInt32(dob.Split('|')[0]), Convert.ToInt32(dob.Split('|')[1]), Convert.ToInt32(dob.Split('|')[2]));
				double dlat = Convert.ToDouble(latlng.Split('|')[0]);
				double dlng = Convert.ToDouble(latlng.Split('|')[1]);
				horo.sunrise = sR.calcSunriseSet(true, jD, dlat, dlng, ofset, (dstofset > 0) ? true : false);
				horo.sunset = sR.calcSunriseSet(false, jD, dlat, dlng, ofset, (dstofset > 0) ? true : false);
				return new JsonResult(horo);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpPost("AnalyzeD30")]
		public async Task<ActionResult> AnalyzeD30([FromBody] ReportParams rParms)
		{
			_logger.LogInformation("AnalyzeD30");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				string tz = TZConvert.IanaToWindows(rParms.timezone);
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				int d = Convert.ToInt32(rParms.dob.Split('|')[0]);
				int m = Convert.ToInt32(rParms.dob.Split('|')[1]);
				int y = Convert.ToInt32(rParms.dob.Split('|')[2]);
				int hour = Convert.ToInt32(rParms.tob.Split('|')[0]);
				int min = Convert.ToInt32(rParms.tob.Split('|')[1]);
				int sec = Convert.ToInt32(rParms.tob.Split('|')[2]);
				double lat = Convert.ToDouble(rParms.latlng.Split('|')[0]);
				double lng = Convert.ToDouble(rParms.latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)rParms.ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)rParms.ayanid != AYANMSAS.LAHIRI))
				{
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)rParms.ayanid);
				}
				int dof = rParms.dstofset ?? 0;
				double tof = rParms.tzofset ?? dof;
				Horoscope mHoro = await getHoroscope(y, m, d, hour, min, sec, lat, lng, tz, (int)tof, ayan, rParms.ayanid, true);

				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 30);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);


			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}

		[HttpGet("AnalyzeDasamsa")]
		public async Task<ActionResult> AnalyzeDasamsa(string dob, string tob, string latlng, string timezone, string lang, int ayanid)
		{
			_logger.LogInformation("AnalyzeDasamsa");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 10);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				PlanetHouse pH = dctPlHou[hou10.Split('|')[2]];
				//pH = dctDPlHou[pH.houselord];
				PlanetStrength rLS = checkStrength(pH); //10th rashi lord
				rsn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				ksn = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty;
				string houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								asc_h = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				string cdas = string.Empty;
				if (plPos.ContainsKey(houT10.Split('|')[0]))
				{
					foreach (string pl in plPos[houT10.Split('|')[0]].Split('|'))
					{
						if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{  //consider only true  
							cdas += dctPlNames[pl.Split(' ')[1]] + ",";
						}
					}
				}

				string desc = string.Format("You can expect good career prospects during");
				if (cdas.Length > 0)
				{
					desc += string.Format(" {0} dasha which occupied 10th house and during {1} dasha who is 10th house lord in Dasamsa chart", cdas.TrimEnd(','), dctPlNames[houT10.Split('|')[2]]);
				}
				else
				{
					desc += string.Format(" dasha of 10th house lord {0}", dctPlNames[houT10.Split('|')[2]]);
				}
				dctYogs["10LDAS"] = desc;
				cdas = string.Empty;
				foreach (var ph in dctDPlHou)
				{
					if (dctDPlHou[ph.Key].lordship == "KEN" || dctDPlHou[ph.Key].lordship == "BOTH")
					{
						cdas += dctDPlHou[ph.Key].name + ",";
					}
				}
				if (cdas != string.Empty)
				{
					desc = string.Format("In your D-10 chart {0} in angular house, A significant career milestone can be seen during its dasha/bhukthi indicated below provided if TRANSIT of this planet also agrees", cdas.TrimEnd(','));
					string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
					string rJ = string.Format(@"{0}\o_rashis.json", astClient);
					double mpos = dctPlHou["Mo"].pos;
					BirthStar bS = calcBirthStar(mpos, dctPlHou["Mo"].sign);
					using (StreamReader r4 = new StreamReader(rJ))
					{
						string json4 = r4.ReadToEnd();
						dynamic rashis = JsonConvert.DeserializeObject(json4);
						int msi = Convert.ToInt32(rashis[dctPlHou["Mo"].sign].ToString().Split('|')[0]);
						int nsi = Convert.ToInt32(rashis[bS.startSign].ToString().Split('|')[0]);
						JsonResult oV = (JsonResult)await CalcVim(string.Format("{0}-{1}-{2}T{3}", dob.Split('|')[2], dob.Split('|')[1], dob.Split('|')[0], tob.Replace('|', ':')), bS.ruler, mpos, Convert.ToDouble(bS.startDeg), msi, nsi, lang);
						Dictionary<string, Dasha> vDas = (Dictionary<string, Dasha>)oV.Value;
						string dasl = string.Empty, bhul = string.Empty;
						foreach (var vim in vDas)
						{
							Dasha das = vim.Value;
							int n = 0;
							if (das.lord.Split('-').Count() > 2) continue;
							bhul = string.Empty;
							foreach (var lrd in das.lord.Split('-'))
							{
								n++;
								if (n < 3)
								{
									if (das.lord.Split('-').Count() == 1)
									{
										if (cdas.IndexOf(lrd) != -1)
										{
											//if (dasl.IndexOf(lrd) == -1)
											// {
											desc += string.Format("<span style=\"font-weight:bold\">{0} {1}</span><br/>", das.lord, das.per);
											dasl += lrd + "|";
											//}
										}
									}
									else if (das.lord.Split('-').Count() == 2 && n == 2)
									{
										if (cdas.IndexOf(lrd) != -1)
										{
											if (bhul.IndexOf(lrd) == -1)
											{
												desc += string.Format("<span style=\"font-weight:bold\">{0} {1}</span><br/>", das.lord, das.per);
												bhul += lrd + "|";
											}
										}
									}
								}
							}
						}
					}
					dctYogs["CMS"] = desc;
				}
				pH = dctDPlHou[houT10.Split('|')[2]];
				// pH = dctDPlHou[pH.houselord];
				PlanetStrength dLS = checkStrength(pH); //10th D-10 lord
				string stren = string.Empty;
				bool strong = false;
				switch (dLS)
				{
					case PlanetStrength.EXALTED:
						stren = "Exalted";
						strong = true;
						break;
					case PlanetStrength.MOOLTRIKONA:
						stren = "Mooltrikona";
						strong = true;
						break;
					case PlanetStrength.OWN:
						strong = true;
						stren = "Own";
						break;
					case PlanetStrength.FRIEND:
						strong = true;
						stren = "Friendly";
						break;
					case PlanetStrength.DEBILIATED:
						stren = "Debiliated";
						strong = false;
						break;
				}
				bool wellplaced = false;
				string place = string.Empty;
				if (pH.lordship == "KEN" || pH.lordship == "TRI" || pH.lordship == "BOTH")
				{
					wellplaced = true;
					if (pH.lordship == "TRI") { place = "Quadrant"; } else { place = "Angular"; }
				}
				if (strong && wellplaced)
				{
					dctYogs["10LSWP"] = string.Format("In your D-10 chart 10th lord {0} is in {1} sign & wellplaced in {2} which ensures good career.", pH.name, stren, place);
				}
				pH = dctDPlHou[asc_h.Split('|')[2]];
				// pH = dctDPlHou[pH.houselord];
				Horo horo = new Horo();
				horo.planetPos = plPos;
				JsonResult jO = (JsonResult)GetAspects(horo, asc_h.Split('|')[0]);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben = false;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (isBEN(lrd))
						{
							isben = true;
						}

						//int ben = isBenefic(asc_h.Split('|')[0], lrd);
						//switch (ben)
						//{
						//    case 1:
						//        isben = true;
						//        break;
						//    case 2:
						//        break;
						//    case 0:
						//        break;
						//    default:
						//        break;
						//}
					}
				}
				if (isben)
					dctYogs["ASCHS"] = string.Format("In your D-10 chart Ascendant house is aspected by benefic planet which is good.");
				jO = (JsonResult)GetAspects(horo, houT10.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isTben = false;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (isBEN(lrd))
						{
							isTben = true;
						}

						//int ben = isBenefic(asc_h.Split('|')[0], lrd);
						//switch (ben)
						//{
						//    case 1:
						//        isTben = true;
						//        break;
						//    case 2:
						//        break;
						//    case 0:
						//        break;
						//    default:
						//        break;
						//}
					}
				}
				if (isTben)
					dctYogs["10HS"] = string.Format("In your D-10 chart 10th house is aspected by benefic planet which is good.");
				PlanetStrength pS = checkStrength(dctDPlHou["Su"]);
				if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.FRIEND)
				{
					if (dctDPlHou["Su"].mhno == 3 || dctDPlHou["Su"].mhno == 6 || dctDPlHou["Su"].mhno == 10 || dctDPlHou["Su"].mhno == 11)
					{
						//powerful sun in upachaya house
						dctYogs["PSUPA"] = string.Format("In your D-10 chart powerful sun in upachaya house which is good");
						JsonResult jR = (JsonResult)GetAspects(horo, dctPlHou["Su"].sign);
						Dictionary<int, string> dAs = (Dictionary<int, string>)jR.Value;
						bool bJ = false;
						foreach (var asp in dAs)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (lrd == "Ju") { bJ = true; break; }
							}
							if (bJ) break;
						}
						if (bJ)
						{
							dctYogs["PSUPAJUP"] = string.Format("In your D-10 chart powerful sun in upachaya and aspected by jupiter, native is likely to get recognition & eminence in career.");
						}
					}
					if (dctDPlHou["Su"].mhno == 1 || dctDPlHou["Su"].mhno == 4 || dctDPlHou["Su"].mhno == 7 || dctDPlHou["Su"].mhno == 10)
					{
						//powerful sun in angle house
						dctYogs["PSANG"] = string.Format("In your D-10 chart powerful sun in Angular house which gives high status, high income, administrative power, far sihtedness.");
					}
				}
				//PlanetHouse lagH = dctPlHou[hou10.Split('|')[2]];
				PlanetHouse lagTH = dctDPlHou[hou10.Split('|')[2]];
				pS = checkStrength(lagTH);
				if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.FRIEND)
				{
					//10th lord of D1 is strong in D10
					dctYogs["10D1SD10"] = string.Format("The 10th Lord {0} in your Rashi Chart is strong in D-10 chart, which ensures status and smooth career with many sources of income.", lagTH.name);
				}
				PlanetHouse sH = dctDPlHou["Sa"];
				pS = checkStrength(sH);
				if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.FRIEND)
				{
					if (sH.lordship == "KEN" || sH.lordship == "TRI" || sH.lordship == "BOTH")
					{
						//strong and well placed saturn
						dctYogs["SSWP"] = string.Format("In your D-10 chart saturn is strong & well placed which gives support from subordinates, workers, political career, gains from underground mining, iron & steel etc.");
					}
				}
				PlanetHouse mH = dctDPlHou["Mo"];
				pS = checkStrength(mH);
				if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.FRIEND)
				{
					//strong moon
					dctYogs["SM"] = string.Format("In your D-10 chart Moon is strong which gives zeal to work.");
				}


			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("AnalyzeDasamsaEx")]
		public async Task<ActionResult> AnalyzeDasamsaEx(string dob, string tob, string latlng, string timezone, double tzofset, int ayanid, string lang)
		{
			_logger.LogInformation("AnalyzeDasamsaEx");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				#region DICT
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);

				#endregion
				#region D10_CALC
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double ofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, ofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, (int)tzofset, ayan, ayanid, false);
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 10);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				PlanetHouse pH = dctPlHou[hou10.Split('|')[2]];
				//pH = dctDPlHou[pH.houselord];
				PlanetStrength rLS = checkStrength(pH); //10th rashi lord
				rsn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				ksn = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty;
				string houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								asc_h = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				string cdas = string.Empty;
				if (plPos.ContainsKey(houT10.Split('|')[0]))
				{
					foreach (string pl in plPos[houT10.Split('|')[0]].Split('|'))
					{
						if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{  //consider only true  
							cdas += dctAst[pl.Split(' ')[1]] + ",";
						}
					}
				}
				#endregion
				string desc = string.Empty;
				if (cdas.Length > 0)
				{
					desc = dctAsto["crul-1"].Replace("[0]", cdas.TrimEnd(',')).Replace("[1]", dctAst[houT10.Split('|')[2]]);
				}
				else
				{
					desc = dctAsto["crul-2"].Replace("[0]", dctAst[houT10.Split('|')[2]]);
				}
				dctYogs["ca-1"] = desc;
				cdas = string.Empty;
				foreach (var ph in dctDPlHou)
				{
					if (dctDPlHou[ph.Key].lordship == "KEN" || dctDPlHou[ph.Key].lordship == "BOTH")
					{
						cdas += dctDPlHou[ph.Key].name + ",";
					}
				}
				if (cdas != string.Empty)
				{
					desc = dctAsto["crul-3"].Replace("[0]", cdas.TrimEnd(','));
					dctYogs["ca-2"] = desc;
				}
				pH = dctDPlHou[houT10.Split('|')[2]];
				PlanetStrength dLS = checkStrength(pH); //10th D-10 lord
				string stren = string.Empty;
				bool strong = false;
				switch (dLS)
				{
					case PlanetStrength.EXALTED:
						stren = "Exalted";
						strong = true;
						break;
					case PlanetStrength.MOOLTRIKONA:
						stren = "Mooltrikona";
						strong = true;
						break;
					case PlanetStrength.OWN:
						strong = true;
						stren = "Own";
						break;
					case PlanetStrength.FRIEND:
						strong = true;
						stren = "Friendly";
						break;
					case PlanetStrength.DEBILIATED:
						stren = "Debiliated";
						strong = false;
						break;
				}
				bool wellplaced = false;
				string place = string.Empty;
				if (pH.lordship == "KEN" || pH.lordship == "TRI" || pH.lordship == "BOTH")
				{
					wellplaced = true;
					if (pH.lordship == "TRI") { place = "Quadrant"; } else { place = "Angular"; }
				}
				if (strong && wellplaced)
				{
					dctYogs["ca-3"] = dctAsto["crul-4"].Replace("[0]", pH.name).Replace("[1]", stren).Replace("[2]", place);
				}
				pH = dctDPlHou[asc_h.Split('|')[2]];
				Horo horo = new Horo();
				horo.planetPos = plPos;
				JsonResult jO = (JsonResult)GetAspects(horo, asc_h.Split('|')[0]);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben = false;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (isBEN(lrd))
						{
							isben = true;
						}

					}
				}
				if (isben)
					dctYogs["ca-4"] = dctAsto["crul-5"];
				jO = (JsonResult)GetAspects(horo, houT10.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isTben = false;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (isBEN(lrd))
						{
							isTben = true;
						}
					}
				}
				if (isTben)
					dctYogs["crul-5"] = dctAsto["crul-6"];
				PlanetStrength pS = checkStrength(dctDPlHou["Su"]);
				if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.FRIEND)
				{
					if (dctDPlHou["Su"].mhno == 3 || dctDPlHou["Su"].mhno == 6 || dctDPlHou["Su"].mhno == 10 || dctDPlHou["Su"].mhno == 11)
					{
						//powerful sun in upachaya house
						dctYogs["crul-6"] = dctAsto["crul-7"];
						JsonResult jR = (JsonResult)GetAspects(horo, dctPlHou["Su"].sign);
						Dictionary<int, string> dAs = (Dictionary<int, string>)jR.Value;
						bool bJ = false;
						foreach (var asp in dAs)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (lrd == "Ju") { bJ = true; break; }
							}
							if (bJ) break;
						}
						if (bJ)
						{
							dctYogs["ca-7"] = dctAsto["crul-8"];
						}
					}
					if (dctDPlHou["Su"].mhno == 1 || dctDPlHou["Su"].mhno == 4 || dctDPlHou["Su"].mhno == 7 || dctDPlHou["Su"].mhno == 10)
					{
						//powerful sun in angle house
						dctYogs["ca-8"] = dctAsto["crul-9"];
					}
				}
				//PlanetHouse lagH = dctPlHou[hou10.Split('|')[2]];
				PlanetHouse lagTH = dctDPlHou[hou10.Split('|')[2]];
				pS = checkStrength(lagTH);
				if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.FRIEND)
				{
					//10th lord of D1 is strong in D10
					dctYogs["ca-9"] = dctAsto["crul-10"].Replace("[0]", lagTH.name);
				}
				PlanetHouse sH = dctDPlHou["Sa"];
				pS = checkStrength(sH);
				if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.FRIEND)
				{
					if (sH.lordship == "KEN" || sH.lordship == "TRI" || sH.lordship == "BOTH")
					{
						//strong and well placed saturn
						dctYogs["ca-10"] = dctAsto["crul-11"];
					}
				}
				PlanetHouse mH = dctDPlHou["Mo"];
				pS = checkStrength(mH);
				if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.FRIEND)
				{
					//strong moon
					dctYogs["ca-11"] = dctAsto["crul-12"];
				}


			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("AnalyzeD3")]
		public async Task<ActionResult> AnalyzeD3(string dob, string tob, string latlng, string timezone, int dstofset, int ayanid, string lang)
		{
			_logger.LogInformation("AnalyzeD3");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				#region DICT
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);

				#endregion
				#region D3_CALC
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double ofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, ofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, false);
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 3);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty, tasc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou3 = string.Empty, hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 3) hou3 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				rsn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				ksn = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty;
				string houT3 = string.Empty, houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT11 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								tasc_h = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 3) houT3 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 11) houT11 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				string cdas = string.Empty;
				if (plPos.ContainsKey(houT10.Split('|')[0]))
				{
					foreach (string pl in plPos[houT10.Split('|')[0]].Split('|'))
					{
						if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{  //consider only true  
							cdas += dctAst[pl.Split(' ')[1]] + ",";
						}
					}
				}
				#endregion
				//relationship with younger coborn
				Dictionary<string, string> dctFriends = new Dictionary<string, string>();
				dctFriends.Add("Su", "Mo|Ma|Ju");
				dctFriends.Add("Mo", "Su|Me");
				dctFriends.Add("Ma", "Su|Mo|Ju");
				dctFriends.Add("Me", "Su|Ve");
				dctFriends.Add("Ju", "Su|Mo|Ma");
				dctFriends.Add("Ve", "Sa|Me");
				dctFriends.Add("Sa", "Me|Ve");
				dctFriends.Add("Ra", "Ve|Sa");
				dctFriends.Add("Ke", "Ve|Sa");
				Dictionary<string, string> dctEnemies = new Dictionary<string, string>();
				dctEnemies.Add("Su", "Ve|Sa|Ra|Ke");
				dctEnemies.Add("Mo", "Ra|Ke");
				dctEnemies.Add("Ma", "Me|Ra|Ke");
				dctEnemies.Add("Me", "Me");
				dctEnemies.Add("Ju", "Me|Ve");
				dctEnemies.Add("Ve", "Su|Mo");
				dctEnemies.Add("Sa", "Su|Mo|Ma");
				dctEnemies.Add("Ra", "Su|Mo|Ma");
				dctEnemies.Add("Ke", "Su|Mo|Ma");
				string a = tasc_h.Split('|')[2];
				string b = houT3.Split('|')[2];
				string c = houT11.Split('|')[2];
				if (dctFriends[a].Contains(b) || dctFriends[b].Contains(a))
				{
					dctYogs["1"] = dctAsto["d3-r4"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[b]).Replace("[2]", dctAst["friendly"]);
				}
				else if (dctEnemies[a].Contains(b) || dctEnemies[b].Contains(a))
				{
					dctYogs["1"] = dctAsto["d3-r4"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[b]).Replace("[2]", dctAst["enemy"]);
				}
				else
				{
					dctYogs["1"] = dctAsto["d3-r4"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[b]).Replace("[2]", dctAst["neutral"]);
				}
				if (dctFriends[a].Contains(c) || dctFriends[c].Contains(a))
				{
					dctYogs["2"] = dctAsto["d3-r5"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[c]).Replace("[2]", dctAst["friendly"]);
				}
				else if (dctEnemies[a].Contains(c) || dctEnemies[c].Contains(a))
				{
					dctYogs["2"] = dctAsto["d3-r5"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[c]).Replace("[2]", dctAst["enemy"]);
				}
				else
				{
					dctYogs["2"] = dctAsto["d3-r5"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[c]).Replace("[2]", dctAst["neutral"]);
				}
				//check 3rd lord & mars
				PlanetStrength ps3 = checkStrength(dctDPlHou[houT3.Split('|')[2]]);
				if ((dctDPlHou[houT3.Split('|')[2]].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
				{
					//well placed
					if (houT3.Split('|')[2] != "Ma")
					{
						ps3 = checkStrength(dctDPlHou["Ma"]);
						if ((dctDPlHou["Ma"].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
						{
							dctYogs["3"] = dctAsto["d3-r7"].Replace("[0]", dctAst[houT3.Split('|')[2]]);
						}
					}
					else
					{
						dctYogs["3"] = dctAsto["d3-r7"].Replace("[0]", dctAst[houT3.Split('|')[2]]);
					}
					ps3 = checkStrength(dctPlHou[houT3.Split('|')[2]]);
					if ((dctPlHou[houT3.Split('|')[2]].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
					{
						Horo horo = new Horo();
						horo.planetPos = plPos;
						JsonResult jO = (JsonResult)GetAspects(horo, houT3.Split('|')[0]);
						Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
						bool isben = false;
						foreach (var asp in dctAsp)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (isBEN(lrd))
								{
									isben = true;
									break;
								}
							}
							if (isben) break;
						}
						if (isben)
							dctYogs["4"] = dctAsto["d3-r9"].Replace("[0]", dctAst[houT3.Split('|')[2]]);
					}
				}
				//check 11th lord & mars
				ps3 = checkStrength(dctDPlHou[houT11.Split('|')[2]]);
				if ((dctDPlHou[houT11.Split('|')[2]].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
				{
					//well placed
					if (houT3.Split('|')[2] != "Ju")
					{
						ps3 = checkStrength(dctDPlHou["Ju"]);
						if ((dctDPlHou["Ma"].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
						{
							dctYogs["5"] = dctAsto["d3-r8"].Replace("[0]", dctAst[houT11.Split('|')[2]]);
						}
					}
					else
					{
						dctYogs["5"] = dctAsto["d3-r8"].Replace("[0]", dctAst[houT11.Split('|')[2]]);
					}
					ps3 = checkStrength(dctPlHou[houT11.Split('|')[2]]);
					if ((dctPlHou[houT11.Split('|')[2]].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
					{
						Horo horo = new Horo();
						horo.planetPos = plPos;
						JsonResult jO = (JsonResult)GetAspects(horo, houT11.Split('|')[0]);
						Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
						bool isben = false;
						foreach (var asp in dctAsp)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (isBEN(lrd))
								{
									isben = true;
									break;
								}
							}
							if (isben) break;
						}
						if (isben)
							dctYogs["6"] = dctAsto["d3-r10"].Replace("[0]", dctAst[houT3.Split('|')[2]]);
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		public async Task<Dictionary<string, string>> AnalyzeD3Ex(PlParams prms)
		{
			_logger.LogInformation("AnalyzeD3Ex");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				#region DICT
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (prms.lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);

				#endregion
				#region D3_CALC
				JsonResult jOb = (JsonResult)CalcDivChart(prms.mHoro.planetsPos, 3);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				rsn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "Ra")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				int r1 = 0;
				int r2 = 0;
				bool asc = false;
				ksn = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				//plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty, tasc_h = string.Empty;
				string houT3 = string.Empty, houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT11 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								tasc_h = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 3) houT3 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 11) houT11 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				string mon_h = string.Empty, sun_h = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								//fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								//msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								//dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				string cdas = string.Empty;
				if (plPos.ContainsKey(houT10.Split('|')[0]))
				{
					foreach (string pl in plPos[houT10.Split('|')[0]].Split('|'))
					{
						if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{  //consider only true  
							cdas += dctAst[pl.Split(' ')[1]] + ",";
						}
					}
				}
				#endregion
				//relationship with younger coborn
				Dictionary<string, string> dctFriends = new Dictionary<string, string>();
				dctFriends.Add("Su", "Mo|Ma|Ju");
				dctFriends.Add("Mo", "Su|Me");
				dctFriends.Add("Ma", "Su|Mo|Ju");
				dctFriends.Add("Me", "Su|Ve");
				dctFriends.Add("Ju", "Su|Mo|Ma");
				dctFriends.Add("Ve", "Sa|Me");
				dctFriends.Add("Sa", "Me|Ve");
				dctFriends.Add("Ra", "Ve|Sa");
				dctFriends.Add("Ke", "Ve|Sa");
				Dictionary<string, string> dctEnemies = new Dictionary<string, string>();
				dctEnemies.Add("Su", "Ve|Sa|Ra|Ke");
				dctEnemies.Add("Mo", "Ra|Ke");
				dctEnemies.Add("Ma", "Me|Ra|Ke");
				dctEnemies.Add("Me", "Me");
				dctEnemies.Add("Ju", "Me|Ve");
				dctEnemies.Add("Ve", "Su|Mo");
				dctEnemies.Add("Sa", "Su|Mo|Ma");
				dctEnemies.Add("Ra", "Su|Mo|Ma");
				dctEnemies.Add("Ke", "Su|Mo|Ma");
				string a = tasc_h.Split('|')[2];
				string b = houT3.Split('|')[2];
				string c = houT11.Split('|')[2];
				if (dctFriends[a].Contains(b) || dctFriends[b].Contains(a))
				{
					dctYogs["1"] = dctAsto["d3-r4"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[b]).Replace("[2]", dctAst["friendly"]);
				}
				else if (dctEnemies[a].Contains(b) || dctEnemies[b].Contains(a))
				{
					dctYogs["1"] = dctAsto["d3-r4"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[b]).Replace("[2]", dctAst["enemy"]);
				}
				else
				{
					dctYogs["1"] = dctAsto["d3-r4"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[b]).Replace("[2]", dctAst["neutral"]);
				}
				if (dctFriends[a].Contains(c) || dctFriends[c].Contains(a))
				{
					dctYogs["2"] = dctAsto["d3-r5"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[c]).Replace("[2]", dctAst["friendly"]);
				}
				else if (dctEnemies[a].Contains(c) || dctEnemies[c].Contains(a))
				{
					dctYogs["2"] = dctAsto["d3-r5"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[c]).Replace("[2]", dctAst["enemy"]);
				}
				else
				{
					dctYogs["2"] = dctAsto["d3-r5"].Replace("[0]", dctAst[a]).Replace("[1]", dctAst[c]).Replace("[2]", dctAst["neutral"]);
				}
				//check 3rd lord & mars
				PlanetStrength ps3 = checkStrength(dctDPlHou[houT3.Split('|')[2]]);
				if ((dctDPlHou[houT3.Split('|')[2]].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
				{
					//well placed
					if (houT3.Split('|')[2] != "Ma")
					{
						ps3 = checkStrength(dctDPlHou["Ma"]);
						if ((dctDPlHou["Ma"].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
						{
							dctYogs["3"] = dctAsto["d3-r7"].Replace("[0]", dctAst[houT3.Split('|')[2]]);
						}
					}
					else
					{
						dctYogs["3"] = dctAsto["d3-r7"].Replace("[0]", dctAst[houT3.Split('|')[2]]);
					}
					ps3 = checkStrength(prms.dctPlHou[houT3.Split('|')[2]]);
					if ((prms.dctPlHou[houT3.Split('|')[2]].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
					{
						Horo horo = new Horo();
						horo.planetPos = plPos;
						JsonResult jO = (JsonResult)GetAspects(horo, houT3.Split('|')[0]);
						Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
						bool isben = false;
						foreach (var asp in dctAsp)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (isBEN(lrd))
								{
									isben = true;
									break;
								}
							}
							if (isben) break;
						}
						if (isben)
							dctYogs["4"] = dctAsto["d3-r9"].Replace("[0]", dctAst[houT3.Split('|')[2]]);
					}
				}
				//check 11th lord & mars
				ps3 = checkStrength(dctDPlHou[houT11.Split('|')[2]]);
				if ((dctDPlHou[houT11.Split('|')[2]].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
				{
					//well placed
					if (houT3.Split('|')[2] != "Ju")
					{
						ps3 = checkStrength(dctDPlHou["Ju"]);
						if ((dctDPlHou["Ma"].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
						{
							dctYogs["5"] = dctAsto["d3-r8"].Replace("[0]", dctAst[houT11.Split('|')[2]]);
						}
					}
					else
					{
						dctYogs["5"] = dctAsto["d3-r8"].Replace("[0]", dctAst[houT11.Split('|')[2]]);
					}
					ps3 = checkStrength(prms.dctPlHou[houT11.Split('|')[2]]);
					if ((prms.dctPlHou[houT11.Split('|')[2]].lordship != string.Empty) || ps3 == PlanetStrength.EXALTED || ps3 == PlanetStrength.MOOLTRIKONA || ps3 == PlanetStrength.OWN)
					{
						Horo horo = new Horo();
						horo.planetPos = plPos;
						JsonResult jO = (JsonResult)GetAspects(horo, houT11.Split('|')[0]);
						Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
						bool isben = false;
						foreach (var asp in dctAsp)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (isBEN(lrd))
								{
									isben = true;
									break;
								}
							}
							if (isben) break;
						}
						if (isben)
							dctYogs["6"] = dctAsto["d3-r10"].Replace("[0]", dctAst[houT3.Split('|')[2]]);
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return dctYogs;
		}
		[HttpGet("AnalyzeD7")]
		public async Task<ActionResult> AnalyzeD7(string dob, string tob, string gen, string latlng, string timezone, int dstofset, int ayanid, string lang)
		{
			_logger.LogInformation("AnalyzeD7");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				#region DICT
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);

				#endregion
				#region D3_CALC
				//string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras = { "ar|M|Ma|1|O|F", "ta|F|Ve|2|E|E", "ge|D|Me|3|O|A", "cn|M|Mo|4|E|W", "le|F|Su|5|O|F", "vi|D|Me|6|E|E", "li|M|Ve|7|O|A", "sc|F|Ma|8|E|W", "sa|D|Ju|9|O|F", "cp|M|Sa|10|E|E", "aq|F|Sa|11|O|A", "pi|D|Ju|12|E|W" };
				string[] ras1 = { "ar|M|Ma|1|O|F", "ta|F|Ve|2|E|E", "ge|D|Me|3|O|A", "cn|M|Mo|4|E|W", "le|F|Su|5|O|F", "vi|D|Me|6|E|E", "li|M|Ve|7|O|A", "sc|F|Ma|8|E|W", "sa|D|Ju|9|O|F", "cp|M|Sa|10|E|E", "aq|F|Sa|11|O|A", "pi|D|Ju|12|E|W" };
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double ofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, ofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, false);
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 7);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty, tasc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou3 = string.Empty, hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 3) hou3 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[6]),
									mhno = Convert.ToInt32(ra.Split('|')[7]),
									shno = Convert.ToInt32(ra.Split('|')[8]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				rsn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				ksn = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty;
				string houT3 = string.Empty, houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT11 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								tasc_h = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 3) houT3 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 11) houT11 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[6]),
									mhno = Convert.ToInt32(ra.Split('|')[7]),
									shno = Convert.ToInt32(ra.Split('|')[8]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				string cdas = string.Empty;
				if (plPos.ContainsKey(houT10.Split('|')[0]))
				{
					foreach (string pl in plPos[houT10.Split('|')[0]].Split('|'))
					{
						if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{  //consider only true  
							cdas += dctAst[pl.Split(' ')[1]] + ",";
						}
					}
				}
				#endregion
				string malePls = "SuMaJuRa";
				string femalePls = "MoVeKe";
				string maleSgns = "arcnlelisapi";
				string femaleSgns = "tagevisccpaq";
				bool mc = false, fc = false;
				if (malePls.Contains(hou5.Split('|')[2]) && maleSgns.Contains(hou5.Split('|')[0]))
				{
					mc = true;
				}
				else if (femalePls.Contains(hou5.Split('|')[2]) && femaleSgns.Contains(hou5.Split('|')[0]))
				{
					fc = true;
				}
				else if (malePls.Contains(hou5.Split('|')[2]) || maleSgns.Contains(hou5.Split('|')[0]))
				{
					mc = true;
				}
				else if (femalePls.Contains(hou5.Split('|')[2]) || femaleSgns.Contains(hou5.Split('|')[0]))
				{
					fc = true;
				}
				if (mc || fc)
				{
					dctYogs["1"] = dctAsto["d7-r1"].Replace("[0]", (mc == true) ? dctAst["male"] : dctAst["female"]);
				}
				mc = false;
				fc = false;
				if (malePls.Contains(hou7.Split('|')[2]) && maleSgns.Contains(hou7.Split('|')[0]))
				{
					mc = true;
				}
				else if (femalePls.Contains(hou7.Split('|')[2]) && femaleSgns.Contains(hou7.Split('|')[0]))
				{
					fc = true;
				}
				else if (malePls.Contains(hou7.Split('|')[2]) || maleSgns.Contains(hou7.Split('|')[0]))
				{
					mc = true;
				}
				else if (femalePls.Contains(hou7.Split('|')[2]) || femaleSgns.Contains(hou7.Split('|')[0]))
				{
					fc = true;
				}
				if (mc || fc)
				{
					dctYogs["2"] = dctAsto["d7-r2"].Replace("[0]", (mc == true) ? dctAst["male"] : dctAst["female"]);
				}
				Horo horo = new Horo();
				bool isben = true;
				Dictionary<int, string> dctAsp;
				JsonResult jO;
				if (gen == "F")
				{
					bool deb = false, eny = false;
					PlanetStrength ps = checkStrength(dctDPlHou["Mo"]);
					if (ps == PlanetStrength.DEBILIATED)
					{
						deb = true;
					}
					else if (ps == PlanetStrength.ENEMY)
					{
						eny = true;
					}
					horo.planetPos = plPos;
					jO = (JsonResult)GetAspects(horo, dctDPlHou["Mo"].sign);
					dctAsp = (Dictionary<int, string>)(jO.Value);
					foreach (var asp in dctAsp)
					{
						foreach (var lrd in asp.Value.Split('|'))
						{
							if (!isBEN(lrd))
							{
								isben = false;
								break;
							}
						}
						if (!isben) break;
					}

					if (deb || eny || !isben)
					{
						string[] rasas = {
							"Kshar(pungent alkali)",
							"Kshir(milk)",
							"Dahi(curd/yogurt)",
							"Ajyam(ghee)",
							"Ikshu Rasa(Sugarcane juice)",
							"Madya(wine)",
							"Suddha jala(pure water)" };
						string rasa = string.Empty;
						double dsec = (double)(30) / (double)7;
						double secp = 0;
						double n = 1;
						ArrayList divs = new ArrayList();
						while ((secp = dsec * n) <= 30)
						{
							divs.Add(secp);
							n++;
						}
						n = 0L;
						bool brs = false;
						for (int dp = 0; dp < divs.Count; dp++)
						{
							if (dctPlHou["Mo"].pos >= n && dctPlHou["Mo"].pos < (double)divs[dp])
							{
								brs = true;
								foreach (var r in ras)
								{
									if (r.Split('|')[0] == dctPlHou["Mo"].sign)
									{
										if (r.Split('|')[4] == "O") rasa = rasas[dp];
										else rasa = rasas[6 - dp];
										break;
									}
								}
							}
							if (brs) break;
							n = (double)divs[dp];
						}
						dctYogs["3"] = dctAsto["d7-r3"].Replace("[0]", rasa);
					}
				}
				horo.planetPos = plPos;
				jO = (JsonResult)GetAspects(horo, tasc_h.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				isben = false;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (isBEN(lrd))
						{
							isben = true;
							break;
						}
					}
					if (isben) break;
				}
				if (isben)
					dctYogs["4"] = (tasc_h.Split('|')[4] == "O") ? dctAsto["d7-r4"].Replace("[0]", dctAst["odd"]).Replace("[1]", dctAst["son"]) : dctAsto["d7-r4"].Replace("[0]", dctAst["even"]).Replace("[1]", dctAst["daughter"]);
				string dpprj = string.Format("{0}|{1}|{2}|{3}", hou5.Split('|')[2], hou9.Split('|')[2], houT5.Split('|')[2], houT5.Split('|')[2]);
				if (!dpprj.Contains("Ju")) dpprj += "|Ju";
				string wdpprj = string.Empty;
				foreach (var s in dpprj.Split('|'))
				{
					if (!wdpprj.Contains(dctAst[s])) wdpprj += dctAst[s] + ",";
				}
				dctYogs["5"] = dctAsto["d7-r5"].Replace("[0]", wdpprj.TrimEnd(','));
				bool bmo = false, sben = false;
				foreach (var p in dctDPlHou)
				{
					if (p.Value.hno == 1)
					{
						if (p.Key == "Mo") bmo = true;
						else if (isBEN(p.Key)) sben = true;
					}
				}
				if (bmo || sben)
				{
					dctYogs["6"] = dctAsto["d7-r6"];
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		public async Task<Dictionary<string, string>> AnalyzeD7Ex(PlParams prms)
		{
			_logger.LogInformation("AnalyzeD7Ex");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				#region DICT
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (prms.lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);

				#endregion
				#region D3_CALC
				//string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras = { "ar|M|Ma|1|O|F", "ta|F|Ve|2|E|E", "ge|D|Me|3|O|A", "cn|M|Mo|4|E|W", "le|F|Su|5|O|F", "vi|D|Me|6|E|E", "li|M|Ve|7|O|A", "sc|F|Ma|8|E|W", "sa|D|Ju|9|O|F", "cp|M|Sa|10|E|E", "aq|F|Sa|11|O|A", "pi|D|Ju|12|E|W" };
				string[] ras1 = { "ar|M|Ma|1|O|F", "ta|F|Ve|2|E|E", "ge|D|Me|3|O|A", "cn|M|Mo|4|E|W", "le|F|Su|5|O|F", "vi|D|Me|6|E|E", "li|M|Ve|7|O|A", "sc|F|Ma|8|E|W", "sa|D|Ju|9|O|F", "cp|M|Sa|10|E|E", "aq|F|Sa|11|O|A", "pi|D|Ju|12|E|W" };
				JsonResult jOb = (JsonResult)CalcDivChart(prms.mHoro.planetsPos, 7);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty, tasc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou3 = string.Empty, hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (prms.mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in prms.mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 3) hou3 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "Ra")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				ksn = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				//plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty;
				string houT3 = string.Empty, houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT11 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								tasc_h = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 3) houT3 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 11) houT11 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[6]),
									mhno = Convert.ToInt32(ra.Split('|')[7]),
									shno = Convert.ToInt32(ra.Split('|')[8]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				string cdas = string.Empty;
				if (plPos.ContainsKey(houT10.Split('|')[0]))
				{
					foreach (string pl in plPos[houT10.Split('|')[0]].Split('|'))
					{
						if (pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{  //consider only true  
							cdas += dctAst[pl.Split(' ')[1]] + ",";
						}
					}
				}
				#endregion
				string malePls = "SuMaJuRa";
				string femalePls = "MoVeKe";
				string maleSgns = "arcnlelisapi";
				string femaleSgns = "tagevisccpaq";
				bool mc = false, fc = false;
				if (malePls.Contains(hou5.Split('|')[2]) && maleSgns.Contains(hou5.Split('|')[0]))
				{
					mc = true;
				}
				else if (femalePls.Contains(hou5.Split('|')[2]) && femaleSgns.Contains(hou5.Split('|')[0]))
				{
					fc = true;
				}
				else if (malePls.Contains(hou5.Split('|')[2]) || maleSgns.Contains(hou5.Split('|')[0]))
				{
					mc = true;
				}
				else if (femalePls.Contains(hou5.Split('|')[2]) || femaleSgns.Contains(hou5.Split('|')[0]))
				{
					fc = true;
				}
				if (mc || fc)
				{
					dctYogs["1"] = dctAsto["d7-r1"].Replace("[0]", (mc == true) ? dctAst["male"] : dctAst["female"]);
				}
				mc = false;
				fc = false;
				if (malePls.Contains(hou7.Split('|')[2]) && maleSgns.Contains(hou7.Split('|')[0]))
				{
					mc = true;
				}
				else if (femalePls.Contains(hou7.Split('|')[2]) && femaleSgns.Contains(hou7.Split('|')[0]))
				{
					fc = true;
				}
				else if (malePls.Contains(hou7.Split('|')[2]) || maleSgns.Contains(hou7.Split('|')[0]))
				{
					mc = true;
				}
				else if (femalePls.Contains(hou7.Split('|')[2]) || femaleSgns.Contains(hou7.Split('|')[0]))
				{
					fc = true;
				}
				if (mc || fc)
				{
					dctYogs["2"] = dctAsto["d7-r2"].Replace("[0]", (mc == true) ? dctAst["male"] : dctAst["female"]);
				}
				Horo horo = new Horo();
				bool isben = true;
				Dictionary<int, string> dctAsp;
				JsonResult jO;
				if (prms.gen == "F")
				{
					bool deb = false, eny = false;
					PlanetStrength ps = checkStrength(dctDPlHou["Mo"]);
					if (ps == PlanetStrength.DEBILIATED)
					{
						deb = true;
					}
					else if (ps == PlanetStrength.ENEMY)
					{
						eny = true;
					}
					horo.planetPos = plPos;
					jO = (JsonResult)GetAspects(horo, dctDPlHou["Mo"].sign);
					dctAsp = (Dictionary<int, string>)(jO.Value);
					foreach (var asp in dctAsp)
					{
						foreach (var lrd in asp.Value.Split('|'))
						{
							if (!isBEN(lrd))
							{
								isben = false;
								break;
							}
						}
						if (!isben) break;
					}

					if (deb || eny || !isben)
					{
						string[] rasas = {
							"Kshar(pungent alkali)",
							"Kshir(milk)",
							"Dahi(curd/yogurt)",
							"Ajyam(ghee)",
							"Ikshu Rasa(Sugarcane juice)",
							"Madya(wine)",
							"Suddha jala(pure water)" };
						string rasa = string.Empty;
						double dsec = (double)(30) / (double)7;
						double secp = 0;
						double n = 1;
						ArrayList divs = new ArrayList();
						while ((secp = dsec * n) <= 30)
						{
							divs.Add(secp);
							n++;
						}
						n = 0L;
						bool brs = false;
						for (int dp = 0; dp < divs.Count; dp++)
						{
							if (prms.dctPlHou["Mo"].pos >= n && prms.dctPlHou["Mo"].pos < (double)divs[dp])
							{
								brs = true;
								foreach (var r in ras)
								{
									if (r.Split('|')[0] == prms.dctPlHou["Mo"].sign)
									{
										if (r.Split('|')[4] == "O") rasa = rasas[dp];
										else rasa = rasas[6 - dp];
										break;
									}
								}
							}
							if (brs) break;
							n = (double)divs[dp];
						}
						dctYogs["3"] = dctAsto["d7-r3"].Replace("[0]", rasa);
					}
				}
				horo.planetPos = plPos;
				jO = (JsonResult)GetAspects(horo, tasc_h.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				isben = false;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (isBEN(lrd))
						{
							isben = true;
							break;
						}
					}
					if (isben) break;
				}
				if (isben)
					dctYogs["4"] = (tasc_h.Split('|')[4] == "O") ? dctAsto["d7-r4"].Replace("[0]", dctAst["odd"]).Replace("[1]", dctAst["son"]) : dctAsto["d7-r4"].Replace("[0]", dctAst["even"]).Replace("[1]", dctAst["daughter"]);
				string dpprj = string.Format("{0}|{1}|{2}|{3}", hou5.Split('|')[2], hou9.Split('|')[2], houT5.Split('|')[2], houT5.Split('|')[2]);
				if (!dpprj.Contains("Ju")) dpprj += "|Ju";
				string wdpprj = string.Empty;
				foreach (var s in dpprj.Split('|'))
				{
					if (!wdpprj.Contains(dctAst[s])) wdpprj += dctAst[s] + ",";
				}
				dctYogs["5"] = dctAsto["d7-r5"].Replace("[0]", wdpprj.TrimEnd(','));
				bool bmo = false, sben = false;
				foreach (var p in dctDPlHou)
				{
					if (p.Value.hno == 1)
					{
						if (p.Key == "Mo") bmo = true;
						else if (isBEN(p.Key)) sben = true;
					}
				}
				if (bmo || sben)
				{
					dctYogs["6"] = dctAsto["d7-r6"];
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return dctYogs;
		}
		[HttpGet("CalcDivChart")]
		public ActionResult CalcDivChart(Dictionary<string, string> plpos, int ndivs)
		{
			_logger.LogInformation("CalcDivChart");
			Dictionary<string, string> navPls = new Dictionary<string, string>();
			try
			{
				string[] sgns = { "ar|M|Ma|1|O|F", "ta|F|Ve|2|E|E", "ge|D|Me|3|O|A", "cn|M|Mo|4|E|W", "le|F|Su|5|O|F", "vi|D|Me|6|E|E", "li|M|Ve|7|O|A", "sc|F|Ma|8|E|W", "sa|D|Ju|9|O|F", "cp|M|Sa|10|E|E", "aq|F|Sa|11|O|A", "pi|D|Ju|12|E|W" };
				double sec = (double)(30) / (double)ndivs;
				double secp = 0;
				double n = 1;
				ArrayList divs = new ArrayList();
				while ((secp = sec * n) <= 30)
				{
					divs.Add(secp);
					n++;
				}
				//int ns = 0;
				foreach (var sign in sgns)
				{
					int spos = 0;
					if (plpos.ContainsKey(sign.Split('|')[0]))
					{
						foreach (string pl in plpos[sign.Split('|')[0]].Split('|'))
						{
							string[] degs = pl.Split(' ')[0].Split('.');
							double po = dmsToDec(Convert.ToInt32(degs[0]), Convert.ToInt32(degs[1]), Convert.ToInt32(degs[2]));
							n = 0.0;
							int ppos = 0;
							if (ndivs == 30)
							{
								if (sign.Split('|')[4] == "O")
								{
									if (po < 5) ppos = 1;
									else if (po >= 5 && po < 10) ppos = 11;
									else if (po >= 10 && po < 18) ppos = 9;
									else if (po >= 18 && po < 25) ppos = 3;
									else if (po < 30) ppos = 7;
								}
								else
								{
									if (po < 5) ppos = 2;
									else if (po >= 5 && po < 12) ppos = 6;
									else if (po >= 12 && po < 20) ppos = 12;
									else if (po >= 20 && po < 25) ppos = 10;
									else if (po >= 25 && po < 30) ppos = 8;
								}
							}
							else if (ndivs == 60)
							{
								int sh = (int)(po * 2);
								int rem = 0;
								int quo = Math.DivRem(sh, 12, out rem);
								rem = sh - 12 * quo;
								ppos = Convert.ToInt32(sign.Split('|')[3]) + rem;
							}
							else
							{
								for (int dp = 0; dp < divs.Count; dp++)
								{
									if (po >= n && po < (double)divs[dp])
									{
										if (ndivs == 3)
										{
											switch (dp + 1)
											{
												case 1:
													ppos = Convert.ToInt32(sign.Split('|')[3]);
													break;
												case 2:
													ppos = Convert.ToInt32(sign.Split('|')[3]) + 4; //second decetane
													break;
												case 3:
													ppos = Convert.ToInt32(sign.Split('|')[3]) + 8; //third decetane
													break;
												default:
													break;
											}
										}
										else if (ndivs == 4)
										{
											switch (dp + 1)
											{
												case 1:
													ppos = Convert.ToInt32(sign.Split('|')[3]);
													break;
												case 2:
													ppos = Convert.ToInt32(sign.Split('|')[3]) + 3; //second decetane
													break;
												case 3:
													ppos = Convert.ToInt32(sign.Split('|')[3]) + 6; //third decetane
													break;
												case 4:
													ppos = Convert.ToInt32(sign.Split('|')[3]) + 9; //third decetane
													break;
												default:
													break;
											}

										}
										else if (ndivs == 7)
										{
											if (sign.Split('|')[4] == "O")
												ppos = Convert.ToInt32(sign.Split('|')[3]) + dp;
											else
												ppos = Convert.ToInt32(sign.Split('|')[3]) + 6 + dp;
										}
										else if (ndivs == 9)
										{
											if (sign.Split('|')[5] == "F")
												ppos = 1 + dp;
											else if (sign.Split('|')[5] == "E")
												ppos = 10 + dp;
											else if (sign.Split('|')[5] == "A")
												ppos = 7 + dp;
											else
												ppos = 4 + dp;
										}
										else if (ndivs == 10)
										{
											if (sign.Split('|')[4] == "O")
												ppos = Convert.ToInt32(sign.Split('|')[3]) + dp;
											else
												ppos = Convert.ToInt32(sign.Split('|')[3]) + 8 + dp;

										}
										else if (ndivs == 12)
										{
											ppos = Convert.ToInt32(sign.Split('|')[3]) + dp;
										}
										else if (ndivs == 16 || ndivs == 45)
										{
											if (sign.Split('|')[1] == "M")
												ppos = 1 + dp;
											else if (sign.Split('|')[1] == "F")
												ppos = 5 + dp;
											else
												ppos = 9 + dp;
										}
										else if (ndivs == 20)
										{
											if (sign.Split('|')[1] == "M")
											{
												ppos = 1 + dp;
											}
											else if (sign.Split('|')[1] == "D")
											{
												ppos = 5 + dp;
											}
											else
											{
												ppos = 9 + dp;
											}
										}
										else if (ndivs == 24)
										{
											if (sign.Split('|')[4] == "O")
												ppos = 5 + dp;
											else
												ppos = 4 + dp;
										}
										else if (ndivs == 27)
										{
											if (sign.Split('|')[5] == "F")
												ppos = 1 + dp;
											else if (sign.Split('|')[5] == "E")
												ppos = 4 + dp;
											else if (sign.Split('|')[5] == "A")
												ppos = 7 + dp;
											else
												ppos = 10 + dp;

										}
										else if (ndivs == 40)
										{
											if (sign.Split('|')[4] == "O")
												ppos = 1 + dp;
											else
												ppos = 7 + dp;

										}
										else
										{
											ppos = Convert.ToInt32(sign.Split('|')[3]) + (dp + 1);
										}
										break;
									}
									n = (double)divs[dp];
								}
							}
							int sord = 0;
							int rpos = ppos;
							while (rpos > 12) rpos -= 12;
							int navp = rpos;
							if (navp < 1) navp = 12 - navp;
							switch (navp)
							{
								case 1:
									if (!navPls.ContainsKey("ar"))
										navPls["ar"] = pl;
									else
										navPls["ar"] += "|" + pl;
									break;
								case 2:
									if (!navPls.ContainsKey("ta"))
										navPls["ta"] = pl;
									else
										navPls["ta"] += "|" + pl;
									break;
								case 3:
									if (!navPls.ContainsKey("ge"))
										navPls["ge"] = pl;
									else
										navPls["ge"] += "|" + pl;
									break;
								case 4:
									if (!navPls.ContainsKey("cn"))
										navPls["cn"] = pl;
									else
										navPls["cn"] += "|" + pl;
									break;
								case 5:
									if (!navPls.ContainsKey("le"))
										navPls["le"] = pl;
									else
										navPls["le"] += "|" + pl;
									break;
								case 6:
									if (!navPls.ContainsKey("vi"))
										navPls["vi"] = pl;
									else
										navPls["vi"] += "|" + pl;
									break;
								case 7:
									if (!navPls.ContainsKey("li"))
										navPls["li"] = pl;
									else
										navPls["li"] += "|" + pl;
									break;
								case 8:
									if (!navPls.ContainsKey("sc"))
										navPls["sc"] = pl;
									else
										navPls["sc"] += "|" + pl;
									break;
								case 9:
									if (!navPls.ContainsKey("sa"))
										navPls["sa"] = pl;
									else
										navPls["sa"] += "|" + pl;
									break;
								case 10:
									if (!navPls.ContainsKey("cp"))
										navPls["cp"] = pl;
									else
										navPls["cp"] += "|" + pl;
									break;
								case 11:
									if (!navPls.ContainsKey("aq"))
										navPls["aq"] = pl;
									else
										navPls["aq"] += "|" + pl;
									break;
								case 12:
									if (!navPls.ContainsKey("pi"))
										navPls["pi"] = pl;
									else
										navPls["pi"] += "|" + pl;
									break;
								default:
									break;
							}
						}
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				navPls.Add("eX.Message", line.ToString());
			}
			return new JsonResult(navPls);
		}
		private ActionResult CalcHoraChart(Dictionary<string, string> plpos)
		{
			Dictionary<string, string> navPls = new Dictionary<string, string>();
			try
			{
				foreach (var pp in plpos)
				{
					foreach (var pln in pp.Value.Split('|'))
					{
						string code = pln.Split(' ')[1];
						if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "TRUE_NODE")
						{
							string plp = pln.Split(' ')[0];
							double po = dmsToDec(Convert.ToInt32(plp.Split('.')[0]), Convert.ToInt32(plp.Split('.')[1]), Convert.ToInt32(plp.Split('.')[2]));
							string hora_sign = string.Empty;
							switch (pp.Key)
							{
								case "ar":
								case "ge":
								case "le":
								case "li":
								case "sa":
								case "aq":
									hora_sign = (po < 15) ? "le" : "cn";
									break;
								case "ta":
								case "cn":
								case "vi":
								case "sc":
								case "cp":
								case "pi":
									hora_sign = (po < 15) ? "cn" : "le";
									break;
								default:
									break;
							}
							if (!navPls.ContainsKey(hora_sign))
							{
								navPls[hora_sign] = pln;
							}
							else
							{
								navPls[hora_sign] += "|" + pln;
							}
						}
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				navPls.Add("eX.Message", line.ToString());

			}
			return new JsonResult(navPls);
		}


		[HttpGet("GetAspects")]
		public ActionResult GetAspects(Horo horo, string sign)
		{
			_logger.LogInformation("GetAspects");
			Dictionary<int, string> dctAsp = new Dictionary<int, string>();
			try
			{
				//Dictionary<string, string> dctPlNames = new Dictionary<string,string>();
				//dctPlNames.Add("Su", "Sun");
				//dctPlNames.Add("Mo", "Moon");
				//dctPlNames.Add("Ju", "Jupiter");
				//dctPlNames.Add("Me", "Mercury");
				//dctPlNames.Add("Ve", "Venus");
				//dctPlNames.Add("Ma", "Mars");
				//dctPlNames.Add("Sa", "Saturn");
				//dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				//dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				Dictionary<string, string> aspects = new Dictionary<string, string>();
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string af = string.Format(@"{0}\aspects.json", astClient);
				string asps = string.Empty;
				using (StreamReader rdr = new StreamReader(af, Encoding.UTF8))
				{
					asps = rdr.ReadToEnd();
				}
				aspects = JsonConvert.DeserializeObject<Dictionary<string, string>>(asps);
				var seven_asp = "";
				var sign_7 = aspects[sign + "-7"];
				if (horo.planetPos.ContainsKey(sign_7))
				{
					var pls = horo.planetPos[sign_7].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						//if (pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1].ToLower() != "ra" && pls[k].Split(' ')[1].ToLower() != "ke" && pls[k].Split(' ')[1] != "AC")
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							//seven_asp += dctPlNames[pls[k].Split(' ')[1].ToLower()] + ' ';
							if (dctAsp.ContainsKey(7))
							{
								dctAsp[7] = string.Format("{0}|{1}", dctAsp[7], pls[k].Split(' ')[1]);
							}
							else
							{
								dctAsp.Add(7, pls[k].Split(' ')[1]);
							}
						}
					}
				}
				var five_asp = "";
				var sign_5 = aspects[sign + "-5"].Split('|')[1];
				if (horo.planetPos.ContainsKey(sign_5))
				{
					var pls = horo.planetPos[sign_5].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (pls[k].Split(' ')[1].ToLower() == "ju")
							{
								//five_asp += dctPlNames[pls[k].Split(' ')[1].ToLower()] + ' ';
								if (dctAsp.ContainsKey(5))
								{
									dctAsp[5] = string.Format("{0}|{1}", dctAsp[5], pls[k].Split(' ')[1]);
								}
								else
								{
									dctAsp.Add(5, pls[k].Split(' ')[1]);
								}
							}
						}
					}
				}
				var nine_asp = "";
				var sign_9 = aspects[sign + "-9"].Split('|')[1];
				if (horo.planetPos.ContainsKey(sign_9))
				{
					var pls = horo.planetPos[sign_9].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (pls[k].Split(' ')[1].ToLower() == "ju")
							{
								//nine_asp += dctPlNames[pls[k].Split(' ')[1].ToLower()] + ' ';
								if (dctAsp.ContainsKey(9))
								{
									dctAsp[9] = string.Format("{0}|{1}", dctAsp[9], pls[k].Split(' ')[1]);
								}
								else
								{
									dctAsp.Add(9, pls[k].Split(' ')[1]);
								}
							}
						}
					}
				}
				var ten_asp = "";
				var sign_10 = aspects[sign + "-10"].Split('|')[1];
				if (horo.planetPos.ContainsKey(sign_10))
				{
					var pls = horo.planetPos[sign_10].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (pls[k].Split(' ')[1].ToLower() == "sa")
							{
								//ten_asp += dctPlNames[pls[k].split(' ')[1].ToLower()] + ' ';
								if (dctAsp.ContainsKey(10))
								{
									dctAsp[10] = string.Format("{0}|{1}", dctAsp[10], pls[k].Split(' ')[1]);
								}
								else
								{
									dctAsp.Add(10, pls[k].Split(' ')[1]);
								}
							}
						}
					}
				}
				var three_asp = "";
				var sign_3 = aspects[sign + "-3"].Split('|')[1];
				if (horo.planetPos.ContainsKey(sign_3))
				{
					var pls = horo.planetPos[sign_3].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (pls[k].Split(' ')[1].ToLower() == "sa")
							{
								// three_asp += dctPlNames[pls[k].Split(' ')[1].ToLower()] + ' ';
								if (dctAsp.ContainsKey(3))
								{
									dctAsp[3] = string.Format("{0}|{1}", dctAsp[3], pls[k].Split(' ')[1]);
								}
								else
								{
									dctAsp.Add(3, pls[k].Split(' ')[1]);
								}
							}
						}
					}
				}
				if (horo.planetPos.ContainsKey(sign))
				{
					var pls = horo.planetPos[sign].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (dctAsp.ContainsKey(1))
							{
								dctAsp[1] = string.Format("{0}|{1}", dctAsp[1], pls[k].Split(' ')[1]);
							}
							else
							{
								dctAsp.Add(1, pls[k].Split(' ')[1]);
							}
						}
					}
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				dctAsp.Add(-1, string.Format("ERROR: {0},LINE:{1}", eX.Message, line));
			}
			return new JsonResult(dctAsp);
		}
		public ActionResult GetAspectsEx(Horo horo, string sign)
		{
			Dictionary<int, string> dctAsp = new Dictionary<int, string>();
			try
			{
				Dictionary<string, string> aspects = new Dictionary<string, string>();
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string af = string.Format(@"{0}\aspects.json", astClient);
				string asps = string.Empty;
				using (StreamReader rdr = new StreamReader(af, Encoding.UTF8))
				{
					asps = rdr.ReadToEnd();
				}
				aspects = JsonConvert.DeserializeObject<Dictionary<string, string>>(asps);
				var seven_asp = "";
				var sign_7 = aspects[sign + "-7"];
				if (horo.planetPos.ContainsKey(sign_7))
				{
					var pls = horo.planetPos[sign_7].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						//if (pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1].ToLower() != "ra" && pls[k].Split(' ')[1].ToLower() != "ke" && pls[k].Split(' ')[1] != "AC")
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							//seven_asp += dctPlNames[pls[k].Split(' ')[1].ToLower()] + ' ';
							if (dctAsp.ContainsKey(7))
							{
								dctAsp[7] = string.Format("{0}|{1}&{2}", dctAsp[7], pls[k], sign_7);
							}
							else
							{
								dctAsp.Add(7, string.Format("{0}&{1}", pls[k], sign_7));
							}
						}
					}
				}
				var five_asp = "";
				var sign_5 = aspects[sign + "-5"].Split('|')[1];
				if (horo.planetPos.ContainsKey(sign_5))
				{
					var pls = horo.planetPos[sign_5].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (pls[k].Split(' ')[1].ToLower() == "ju")
							{
								//five_asp += dctPlNames[pls[k].Split(' ')[1].ToLower()] + ' ';
								if (dctAsp.ContainsKey(5))
								{
									dctAsp[5] = string.Format("{0}|{1}&{2}", dctAsp[5], pls[k], sign_5);
								}
								else
								{
									dctAsp.Add(5, string.Format("{0}&{1}", pls[k], sign_5));
								}
							}
						}
					}
				}
				var nine_asp = "";
				var sign_9 = aspects[sign + "-9"].Split('|')[1];
				if (horo.planetPos.ContainsKey(sign_9))
				{
					var pls = horo.planetPos[sign_9].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (pls[k].Split(' ')[1].ToLower() == "ju")
							{
								//nine_asp += dctPlNames[pls[k].Split(' ')[1].ToLower()] + ' ';
								if (dctAsp.ContainsKey(9))
								{
									dctAsp[9] = string.Format("{0}|{1}&{2}", dctAsp[9], pls[k], sign_9);
								}
								else
								{
									dctAsp.Add(9, string.Format("{0}&{1}", pls[k], sign_9));
								}
							}
						}
					}
				}
				var ten_asp = "";
				var sign_10 = aspects[sign + "-10"].Split('|')[1];
				if (horo.planetPos.ContainsKey(sign_10))
				{
					var pls = horo.planetPos[sign_10].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (pls[k].Split(' ')[1].ToLower() == "sa")
							{
								//ten_asp += dctPlNames[pls[k].split(' ')[1].ToLower()] + ' ';
								if (dctAsp.ContainsKey(10))
								{
									dctAsp[10] = string.Format("{0}|{1}&{2}", dctAsp[10], pls[k], sign_10);
								}
								else
								{
									dctAsp.Add(10, string.Format("{0}&{1}", pls[k], sign_10));
								}
							}
						}
					}
				}
				var three_asp = "";
				var sign_3 = aspects[sign + "-3"].Split('|')[1];
				if (horo.planetPos.ContainsKey(sign_3))
				{
					var pls = horo.planetPos[sign_3].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (pls[k].Split(' ')[1].ToLower() == "sa")
							{
								// three_asp += dctPlNames[pls[k].Split(' ')[1].ToLower()] + ' ';
								if (dctAsp.ContainsKey(3))
								{
									dctAsp[3] = string.Format("{0}|{1}&{2}", dctAsp[3], pls[k], sign_3);
								}
								else
								{
									dctAsp.Add(3, string.Format("{0}&{1}", pls[k], sign_3));
								}
							}
						}
					}
				}
				if (horo.planetPos.ContainsKey(sign))
				{
					var pls = horo.planetPos[sign].Split('|');
					for (var k = 0; k < pls.Length; k++)
					{
						if (pls[k].Split(' ')[1] != "Ur" && pls[k].Split(' ')[1] != "Pl" && pls[k].Split(' ')[1] != "me" && pls[k].Split(' ')[1] != "os" && pls[k].Split(' ')[1] != "Ne" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ra" && pls[k].Split(' ')[1] != "AC" && pls[k].Split(' ')[1] != "Ke" && pls[k].Split(' ')[1] != "TRUE_NODE" && pls[k].Split(' ')[1] != "MEAN_NODE")
						{
							if (dctAsp.ContainsKey(1))
							{
								dctAsp[1] = string.Format("{0}|{1}&{2}", dctAsp[1], pls[k], sign);
							}
							else
							{
								dctAsp.Add(1, string.Format("{0}&{1}", pls[k], sign));
							}
						}
					}
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				dctAsp.Add(-1, string.Format("ERROR: {0},LINE:{1}", eX.Message, line));
			}
			return new JsonResult(dctAsp);
		}
		public bool isBEN(string lord)
		{
			if (lord == "Ju" || lord == "Mo" || lord == "Ve" || lord == "Me") return true;
			return false;
		}
		[HttpGet("AnalyzeDasamsaDasha")]
		public ActionResult AnalyzeDasamsaDasha(string mdas, string dob, string tob, string latlng, string timezone, string lang, int ayanid)
		{
			_logger.LogInformation("AnalyzeDasamsaDasha");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 10);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
							else
							{
								if (pl.Split(' ')[1] != "Mo" && pl.Split(' ')[1] != "MEAN_NODE" && pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
								}
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				PlanetHouse pH = dctPlHou[hou10.Split('|')[2]];
				//pH = dctDPlHou[pH.houselord];
				PlanetStrength rLS = checkStrength(pH); //10th rashi lord
				rsn = string.Empty;
				ksn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");

				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty;
				string houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								asc_h = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				pH = dctDPlHou[mdas];
				// pH = dctDPlHou[pH.houselord];
				PlanetStrength dLS = checkStrength(pH); //10th D-10 lord
				string stren = string.Empty;
				bool strong = false;
				switch (dLS)
				{
					case PlanetStrength.EXALTED:
						stren = "Exalted";
						strong = true;
						break;
					case PlanetStrength.MOOLTRIKONA:
						stren = "Mooltrikona";
						strong = true;
						break;
					case PlanetStrength.OWN:
						strong = true;
						stren = "Own";
						break;
					case PlanetStrength.FRIEND:
						strong = true;
						stren = "Friendly";
						break;
					case PlanetStrength.DEBILIATED:
						stren = "Debilitated";
						strong = false;
						break;
				}
				bool wellplaced = false;
				string place = string.Empty;
				if (pH.lordship == "KEN" || pH.lordship == "TRI" || pH.lordship == "BOTH")
				{
					wellplaced = true;
					if (pH.lordship == "TRI") { place = "Quadrant"; } else { place = "Angular"; }
				}
				if (strong && wellplaced)
				{
					//dctYogs["10LSWP"] = string.Format("In your D-10 chart 10th lord {0} is in {1} sign & wellplaced in {2} house which ensures good career.", pH.name, stren, place);
				}
				pH = dctPlHou[mdas];
				// pH = dctDPlHou[pH.houselord];
				PlanetStrength dLS2 = checkStrength(pH); //10th D-10 lord
				string stren2 = string.Empty;
				bool strong2 = false;
				switch (dLS)
				{
					case PlanetStrength.EXALTED:
						stren2 = "Exalted";
						strong2 = true;
						break;
					case PlanetStrength.MOOLTRIKONA:
						stren2 = "Mooltrikona";
						strong2 = true;
						break;
					case PlanetStrength.OWN:
						strong2 = true;
						stren2 = "Own";
						break;
					case PlanetStrength.FRIEND:
						strong2 = true;
						stren2 = "Friendly";
						break;
					case PlanetStrength.DEBILIATED:
						stren2 = "Debilitated";
						strong2 = false;
						break;
				}
				bool wellplaced2 = false;
				string place2 = string.Empty;
				if (pH.lordship == "KEN" || pH.lordship == "TRI" || pH.lordship == "BOTH")
				{
					wellplaced2 = true;
					if (pH.lordship == "TRI") { place = "Quadrant"; } else { place = "Angular"; }
				}
				string desc = string.Empty, head = string.Empty;
				bool bdeb = false;
				head = string.Format("You are currently in {0} dasha ", pH.name);
				if ((strong && wellplaced) && (strong2 && wellplaced2))
				{
					desc += string.Format(" which is strong & wellplaced in both D-1 & D-10 charts, you can expect very good career prospect in the current period");
				}
				else if ((strong) && (strong2))
				{
					desc += string.Format(" which is strong in both D-1 & D-10 charts, the career prospects during this current period will be very good");
				}
				else if ((strong) && (!strong2))
				{
					if (stren2 == "Debilitated")
						desc += string.Format(" which is strong in D-1 chart but is Debilitated in D-10, may create uncertainities under critical sub periods ", pH.name);
				}
				else if ((!strong) || (!strong2))
				{
					if (stren2 == "Debilitated")
					{
						desc += string.Format(" which is debilitated in D-10, such a placement can caause uncertainities  ", pH.name);
						bdeb = true;
					}
				}
				else if (strong2 && !strong)
				{
					desc += string.Format(" is week in lagna chart but whereas strong in D-10 chart. The career prospects in this period can be good.");
				}
				else if (strong2)
				{
					desc += string.Format(" is strong in D-10 chart. The career prospets in this period will be good.");
				}
				//else
				//{
				Horo horo = new Horo();
				horo.planetPos = plPos;
				JsonResult jO = (JsonResult)GetAspects(horo, pH.sign);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben = false, ismel = false;
				string mel_pl = string.Empty, ben_pl = string.Empty;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (isBEN(lrd))
						{
							isben = true;
							ben_pl += dctPlNames[lrd] + ",";
						}
						else
						{
							ismel = true;
							mel_pl += dctPlNames[lrd] + ",";
						}
						//int ben = isBenefic(pH.sign, lrd);
						//switch (ben)
						//{
						//    case 1:
						//        isben = true;
						//        ben_pl += dctPlNames[lrd] + ",";
						//        break;
						//    case 2:
						//        ismel = true;
						//        mel_pl += dctPlNames[lrd] + ",";
						//        break;
						//    case 0:
						//        break;
						//    default:
						//        break;
						//}
					}
				}
				if (isben)
				{
					desc += string.Format(" {0} is having benefic aspect from {1} which is good.", pH.name, ben_pl);
				}
				if (ismel)
				{
					if (bdeb)
						desc += string.Format(" {0} also is having malefic aspect from {1} which may cause uncertainities during its critical sub periods may even temporarily hold anticipated results. ", pH.name, mel_pl.TrimEnd(','));
					else
					{
						if (desc != string.Empty)
						{
							desc += string.Format(" but {0} is also having malefic aspect from {1} such aspect may cause uncertainities during its critical sub periods may even temporarily hold anticipated results. ", pH.name, mel_pl.TrimEnd(','));
						}
						else
						{
							desc += string.Format(" {0} is having malefic aspect from {1} such aspect may cause uncertainities during its critical sub periods may even temporarily hold anticipated results. ", pH.name, mel_pl.TrimEnd(','));
						}
					}
				}
				if (desc != string.Empty)
				{
					dctYogs["CDASLS"] = head + desc;
				}
				else
				{
					desc += string.Format("{0} is neither strong nor is week in D-10 chart, would ensure steady progress.", pH.name);
					dctYogs["CDASLS"] = head + desc;
				}
				//}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("GetAllHobbyAsts")]
		public ActionResult GetAllHobbyAsts()
		{
			_logger.LogInformation("GetAllHobbyAsts");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				try
				{
					var dbAst = db.GetCollection<Astrologer>("HobbyAstro");
					var qAstUser =
									(from e in dbAst.AsQueryable<Astrologer>()
									 select e).ToList();
					if (qAstUser != null)
					{
						return new JsonResult(qAstUser);
					}
					else
					{
						var ast = new Astrologer
						{
							status = "X"
						};
						return new JsonResult(ast);
					}
				}
				catch (Exception eX)
				{
					var ast = new Astrologer
					{
						tagline = eX.Message,
						status = "E"
					};
					return new JsonResult(ast);
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Astrologer
				{
					tagline = eX.Message,
					status = "E"
				};
				return new JsonResult(ast);
			}
		}
		[HttpGet("GetOffer")]
		public ActionResult GetOffer(string uuid)
		{
			_logger.LogInformation("GetOffer");
			var offer = new Offer
			{
				uuid = uuid,
				oid = "com.mypubz.eportal.offer499",
				title = "Subscribe For Just Rs. 499",
				desc = "OFFER ENDS TODAY!!! SUBSCRIBE NOW FOR JUST 499 & ENJOY ALL BENEFITS.",
				price = 499,
				avail = false,
				impr = 0
			};
			return new JsonResult(offer);
		}
		[HttpGet("DailyTrans")]
		public async Task<List<PlanetHouse>> DailyTrans(string dob, string tob, string latlng, string timezone, string msgn, int dstofset, int ayanid)
		{
			_logger.LogInformation("DailyTrans");
			try
			{
				string tz = TZConvert.IanaToWindows(timezone);
				int d = Convert.ToInt32(dob.Split('|')[0]);
				int m = Convert.ToInt32(dob.Split('|')[1]);
				int y = Convert.ToInt32(dob.Split('|')[2]);
				int hou = Convert.ToInt32(tob.Split('|')[0]);
				int min = Convert.ToInt32(tob.Split('|')[1]);
				int sec = Convert.ToInt32(tob.Split('|')[2]);
				double lat = Convert.ToDouble(latlng.Split('|')[0]);
				double lng = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
				}
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astPls = "SuMoMaMeJuVeSaRaKe";
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				Dictionary<string, string> dctPreds = new Dictionary<string, string>();
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				DateTime today = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, tzInf);
				Horoscope mHoro = await getHoroscope(y, m, d, hou, min, sec, lat, lng, tz, dstofset, ayan, ayanid, false);
				int rpos = 0;
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				foreach (string sign in signs)
				{
					rpos++;
					if (mHoro.planetsPos.ContainsKey(sign))
					{
						var pls = mHoro.planetsPos[sign].Split('|');
						//var ePls = '';
						//var mnode = '';
						for (var k = 0; k < pls.Length; k++)
						{
							if (pls[k].Split(' ')[1] == "MEAN_NODE")
							{
								var kpos = rpos + 6;
								if (kpos > 12) kpos = (kpos - 12);
								//var mn = i + 11;
								//if (mn > 15) mn -= 15;
								if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
								{
									var eP = mHoro.planetsPos[signs[kpos - 1]];
									mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
								}
								else
								{
									mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
								}
								// plPos[sign] = ePls;
								mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
							}

						}
						pls = mHoro.planetsPos[sign].Split('|');
						for (var k = 0; k < pls.Length; k++)
						{

							if (dctPls.ContainsKey(pls[k].Split(' ')[1]))
							{
								if (dctPls[pls[k].Split(' ')[1]].IndexOf(sign) < 0)
									dctPls[pls[k].Split(' ')[1]] += string.Format("|{0}-{1}", sign, String.Format(ci, "{0:MMM dd}", today));
							}
							else
								dctPls[pls[k].Split(' ')[1]] = string.Format("{0}-{1}", sign, String.Format(ci, "{0:MMM dd}", today));
							string[] pld = pls[k].Split(' ')[0].Split('.');
							if (astPls.Contains(pls[k].Split(' ')[1]))
							{
								PlanetHouse pHou = new PlanetHouse
								{
									code = pls[k].Split(' ')[1],
									name = dctPlNames[pls[k].Split(' ')[1]],
									hno = 0,
									mhno = 0,
									shno = 0,
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									dmspos = string.Format("{0}°{1}'{2}\"", pld[0], pld[1], pld[2]),
									sign = sign,
									signtype = "",
									lordship = "",
									houselord = ""
								};
								dctPlHou[pls[k].Split(' ')[1]] = pHou;
							}
						}
					}
				}
				//BirthStar cStar = calcBirthStar(dctPlHou["Mo"].pos, dctPlHou["Mo"].sign);
				string rJ = string.Format(@"{0}\signs_short.json", astClient);
				string rJ2 = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r3 = new StreamReader(rJ2))
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json3 = r3.ReadToEnd();
					string json4 = r4.ReadToEnd();
					dynamic rashis_short = JsonConvert.DeserializeObject(json4);
					dynamic rashis = JsonConvert.DeserializeObject(json3);
					foreach (var pred in dctPls)
					{
						string pras = pred.Value;
						string spred = string.Empty;
						int toks = 0;
						foreach (var ras in pras.Split('|'))
						{
							if (pred.Key == "Su" || pred.Key == "Mo" || pred.Key == "Ve" || pred.Key == "Ju" || pred.Key == "Sa" || pred.Key == "Me" || pred.Key == "Ma" || pred.Key == "Ra" || pred.Key == "Ke")
							{
								int pos = GetPosFMon(msgn.ToLower().Substring(0, 2), ras.Split('-')[0]);
								dctPlHou[pred.Key].mhno = pos;
								dctPlHou[pred.Key].rashi = rashis[ras.Split('-')[0]].ToString().Split('|')[1];
								string pky = string.Format(@"{0}\{1}.json", astClient, pred.Key);
								using (StreamReader r5 = new StreamReader(pky))
								{
									string json5 = r5.ReadToEnd();
									dynamic plpreds = JsonConvert.DeserializeObject(json5);
									spred = string.Format("{0}", plpreds[pos.ToString()]);
									dctPlHou[pred.Key].inds = spred;
								}
								toks++;
							}
						}
						//if (toks > 0)
						//	dctPreds[dctPlNames[pred.Key]] = spred;
					}
				}
				return dctPlHou.Values.ToList();
			}
			catch (Exception eX)
			{
				List<PlanetHouse> lst = new List<PlanetHouse>();
				PlanetHouse pH = new PlanetHouse();
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				pH.name = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				return lst;
			}
		}
		[HttpGet("GetTransPredsEx")]
		public async Task<ActionResult> GetTransPredsEx(string dob, string tob, string latlng, string timezone, double tzofset, int ayanid)
		{
			_logger.LogInformation("GetTransPredsEx");
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astPls = "SuMoMaMeJuVeSaRaKe";
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string tz = TZConvert.IanaToWindows(timezone);
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				uint un1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint un2 = Convert.ToUInt32(dob.Split('|')[1]);
				int in3 = Convert.ToInt32(dob.Split('|')[2]);
				uint un4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint un5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint un6 = Convert.ToUInt32(tob.Split('|')[2]);
				double un7 = Convert.ToDouble(latlng.Split('|')[0]);
				double un8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)un1, (int)un2, in3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mNHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data_ex2(un1, un2, in3, un4, un5, un6, un7, un8, tz, ayan, (uint)ayanid);
					mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return mHoro;
				});
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, string> dctNPls = new Dictionary<string, string>();
				for (int i = 0; i < zod_nam.Count(); i++)
				{
					if (mNHoro.planetsPos.ContainsKey(zod_nam[i]))
					{
						var ppos = mNHoro.planetsPos[zod_nam[i]];
						foreach (var pl in ppos.Split('|'))
						{
							string[] pld = pl.Split(' ')[0].Split('.');
							if (dctNPls.ContainsKey(zod_nam[i]))
							{
								dctNPls[zod_nam[i]] = string.Format("{0}|{1}.{2} {3}", dctNPls[zod_nam[i]], pld[0], pld[1], pl.Split(' ')[1]);
							}
							else
							{
								dctNPls[zod_nam[i]] = string.Format("{0}.{1} {2}", pld[0], pld[1], pl.Split(' ')[1]);
							}

							if (astPls.Contains(pl.Split(' ')[1]))
							{
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = 0,
									mhno = 0,
									shno = 0,
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = zod_nam[i],
									signtype = "",
									lordship = "",
									houselord = ""
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}

				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				BirthStar cStar = calcBirthStar(dctPlHou["Mo"].pos, dctPlHou["Mo"].sign);
				Dictionary<string, string> dctPreds = new Dictionary<string, string>();
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				DateTime today = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, tzInf);
				DateTime eday = today.AddDays(30);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				while (today <= eday)
				{
					uint u1 = Convert.ToUInt32(today.Day);
					uint u2 = Convert.ToUInt32(today.Month);
					int i3 = Convert.ToInt32(today.Year);
					uint u4 = 5;//Convert.ToUInt32(today.Hour);
					uint u5 = 0;//Convert.ToUInt32(today.Minute);
					uint u6 = 0;
					double u7 = Convert.ToDouble(latlng.Split('|')[0]);
					double u8 = Convert.ToDouble(latlng.Split('|')[1]);
					Horoscope mHoro = await Task.Run(() =>
					{
						Horoscope mHoro = new Horoscope();
						mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
						mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
						return mHoro;
					});
					//mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					//mHoro.calc_planets_pos(true, astClient);
					int rpos = 0;
					foreach (string sign in signs)
					{
						rpos++;
						if (mHoro.planetsPos.ContainsKey(sign))
						{
							var pls = mHoro.planetsPos[sign].Split('|');
							//var ePls = '';
							//var mnode = '';
							for (var k = 0; k < pls.Length; k++)
							{
								if (pls[k].Split(' ')[1] == "MEAN_NODE")
								{
									var kpos = rpos + 6;
									if (kpos > 12) kpos = (kpos - 12);
									//var mn = i + 11;
									//if (mn > 15) mn -= 15;
									if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
									{
										var eP = mHoro.planetsPos[signs[kpos - 1]];
										mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									else
									{
										mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									// plPos[sign] = ePls;
									mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								}

							}
							pls = mHoro.planetsPos[sign].Split('|');
							for (var k = 0; k < pls.Length; k++)
							{

								if (dctPls.ContainsKey(pls[k].Split(' ')[1]))
								{
									if (dctPls[pls[k].Split(' ')[1]].IndexOf(sign) < 0)
									{
										if (mHoro.retroPls.Contains(pls[k].Split(' ')[1])) dctPls[pls[k].Split(' ')[1]] += string.Format("|{0}-{1}-R", sign, String.Format(ci, "{0:MMM dd}", today));
										else dctPls[pls[k].Split(' ')[1]] += string.Format("|{0}-{1}", sign, String.Format(ci, "{0:MMM dd}", today));
									}
								}
								else
								{
									if (mHoro.retroPls.Contains(pls[k].Split(' ')[1])) dctPls[pls[k].Split(' ')[1]] = string.Format("{0}-{1}-R", sign, String.Format(ci, "{0:MMM dd}", today));
									else dctPls[pls[k].Split(' ')[1]] = string.Format("{0}-{1}", sign, String.Format(ci, "{0:MMM dd}", today));
								}
							}
						}
					}
					today = today.AddDays(1);
				}
				string rJ = string.Format(@"{0}\signs_short.json", astClient);
				string rJ2 = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r3 = new StreamReader(rJ2))
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json3 = r3.ReadToEnd();
					string json4 = r4.ReadToEnd();
					dynamic rashis_short = JsonConvert.DeserializeObject(json4);
					dynamic rashis = JsonConvert.DeserializeObject(json3);
					foreach (var pred in dctPls)
					{
						string pras = pred.Value;
						string spred = string.Empty;
						int toks = 0;
						foreach (var ras in pras.Split('|'))
						{
							int pos = GetPosFMon(rashis_short[cStar.birthSign.ToLower()].ToString(), ras.Split('-')[0]);
							if (pred.Key == "Su" || pred.Key == "Ve" || pred.Key == "Ju" || pred.Key == "Sa" || pred.Key == "Me" || pred.Key == "Ma" || pred.Key == "Ra" || pred.Key == "Ke")
							{
								string pky = string.Format(@"{0}\{1}.json", astClient, pred.Key);
								using (StreamReader r5 = new StreamReader(pky))
								{
									string json5 = r5.ReadToEnd();
									dynamic plpreds = JsonConvert.DeserializeObject(json5);
									if (toks > 0)
									{
										if (ras.Split('-').Count() > 2) spred += string.Format("\nOn {0} {1} retrogrades to {2} which is {3} house, during this time {4}", ras.Split('-')[1], dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
										else spred += string.Format("\nOn {0} {1} moves to {2} which is {3} house, during this time {4}", ras.Split('-')[1], dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
									}
									else
									{
										spred = string.Format("{0} is transiting in {1} which is {2} house, during this time {3}", dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
									}
									spred += GetNatalAspects(dctPlHou, plpreds, dctPlNames[pred.Key], ras.Split('-')[0]);
								}
								toks++;
							}
						}
						if (toks > 0)
							dctPreds[dctPlNames[pred.Key]] = spred;
					}
				}
				return new JsonResult(dctPreds);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetTransPredsEx3")]
		public async Task<ActionResult> GetTransPredsEx3(string msgn, string latlng, string timezone, double tzofset, int ayanid)
		{
			_logger.LogInformation("GetTransPredsEx3");
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astPls = "SuMoMaMeJuVeSaRaKe";
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string tz = TZConvert.IanaToWindows(timezone);
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				string ayan = string.Empty;
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				Dictionary<string, string> dctNPls = new Dictionary<string, string>();

				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				BirthStar cStar = calcBirthStar(dctPlHou["Mo"].pos, dctPlHou["Mo"].sign);
				Dictionary<string, string> dctPreds = new Dictionary<string, string>();
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				DateTime today = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, tzInf);
				DateTime eday = today.AddDays(30);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				while (today <= eday)
				{
					uint u1 = Convert.ToUInt32(today.Day);
					uint u2 = Convert.ToUInt32(today.Month);
					int i3 = Convert.ToInt32(today.Year);
					uint u4 = 5;//Convert.ToUInt32(today.Hour);
					uint u5 = 0;//Convert.ToUInt32(today.Minute);
					uint u6 = 0;
					double u7 = Convert.ToDouble(latlng.Split('|')[0]);
					double u8 = Convert.ToDouble(latlng.Split('|')[1]);
					Horoscope mHoro = await Task.Run(() =>
					{
						Horoscope mHoro = new Horoscope();
						mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
						mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
						return mHoro;
					});
					//mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					//mHoro.calc_planets_pos(true, astClient);
					int rpos = 0;
					foreach (string sign in signs)
					{
						rpos++;
						if (mHoro.planetsPos.ContainsKey(sign))
						{
							var pls = mHoro.planetsPos[sign].Split('|');
							//var ePls = '';
							//var mnode = '';
							for (var k = 0; k < pls.Length; k++)
							{
								if (pls[k].Split(' ')[1] == "MEAN_NODE")
								{
									var kpos = rpos + 6;
									if (kpos > 12) kpos = (kpos - 12);
									//var mn = i + 11;
									//if (mn > 15) mn -= 15;
									if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
									{
										var eP = mHoro.planetsPos[signs[kpos - 1]];
										mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									else
									{
										mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									// plPos[sign] = ePls;
									mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								}

							}
							pls = mHoro.planetsPos[sign].Split('|');
							for (var k = 0; k < pls.Length; k++)
							{

								if (dctPls.ContainsKey(pls[k].Split(' ')[1]))
								{
									if (dctPls[pls[k].Split(' ')[1]].IndexOf(sign) < 0)
									{
										if (mHoro.retroPls.Contains(pls[k].Split(' ')[1])) dctPls[pls[k].Split(' ')[1]] += string.Format("|{0}-{1}-R", sign, String.Format(ci, "{0:MMM dd}", today));
										else dctPls[pls[k].Split(' ')[1]] += string.Format("|{0}-{1}", sign, String.Format(ci, "{0:MMM dd}", today));
									}
								}
								else
								{
									if (mHoro.retroPls.Contains(pls[k].Split(' ')[1])) dctPls[pls[k].Split(' ')[1]] = string.Format("{0}-{1}-R", sign, String.Format(ci, "{0:MMM dd}", today));
									else dctPls[pls[k].Split(' ')[1]] = string.Format("{0}-{1}", sign, String.Format(ci, "{0:MMM dd}", today));
								}
							}
						}
					}
					today = today.AddDays(1);
				}
				string rJ = string.Format(@"{0}\signs_short.json", astClient);
				string rJ2 = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r3 = new StreamReader(rJ2))
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json3 = r3.ReadToEnd();
					string json4 = r4.ReadToEnd();
					dynamic rashis_short = JsonConvert.DeserializeObject(json4);
					dynamic rashis = JsonConvert.DeserializeObject(json3);
					foreach (var pred in dctPls)
					{
						string pras = pred.Value;
						string spred = string.Empty;
						int toks = 0;
						foreach (var ras in pras.Split('|'))
						{
							int pos = GetPosFMon(msgn.ToLower().Substring(0, 2), ras.Split('-')[0]);
							if (pred.Key == "Su" || pred.Key == "Ve" || pred.Key == "Ju" || pred.Key == "Sa" || pred.Key == "Me" || pred.Key == "Ma" || pred.Key == "Ra" || pred.Key == "Ke")
							{
								string pky = string.Format(@"{0}\{1}.json", astClient, pred.Key);
								using (StreamReader r5 = new StreamReader(pky))
								{
									string json5 = r5.ReadToEnd();
									dynamic plpreds = JsonConvert.DeserializeObject(json5);
									if (toks > 0)
									{
										if (ras.Split('-').Count() > 2) spred += string.Format("\nOn {0} {1} retrogrades to {2} which is {3} house, during this time {4}", ras.Split('-')[1], dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
										else spred += string.Format("\nOn {0} {1} moves to {2} which is {3} house, during this time {4}", ras.Split('-')[1], dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
									}
									else
									{
										spred = string.Format("{0} is transiting in {1} which is {2} house, during this time {3}", dctPlNames[pred.Key], rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1], pos, plpreds[pos.ToString()]);
									}
									spred += GetNatalAspects(dctPlHou, plpreds, dctPlNames[pred.Key], ras.Split('-')[0]);
								}
								toks++;
							}
						}
						if (toks > 0)
							dctPreds[dctPlNames[pred.Key]] = spred;
					}
				}
				return new JsonResult(dctPreds);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		private async Task<Dictionary<string, string>> GetTransPredsEx2(Dictionary<string, PlanetHouse> dctPlHou, Dictionary<string, string> dctAst, Dictionary<string, string> dctAstro, string latlng, string timezone, int ayanid, string lang)
		{
			_logger.LogInformation("GetTransPredsEx2");
			Dictionary<string, string> dctPreds = new Dictionary<string, string>();
			try
			{
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astPls = "SuMoMaMeJuVeSaRaKe";
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				string tz = TZConvert.IanaToWindows(timezone);
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				string ayan = string.Empty;
				string[] zod_nam = new string[] { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };

				CultureInfo ci = CultureInfo.CreateSpecificCulture("en-US");
				DateTimeFormatInfo dtfi = ci.DateTimeFormat;
				dtfi.AbbreviatedDayNames = new String[] { "SUN", "MON", "TUE", "WED",
												"THU", "FRI", "SAT" };
				BirthStar cStar = calcBirthStar(dctPlHou["Mo"].pos, dctPlHou["Mo"].sign);
				Dictionary<string, string> dctPls = new Dictionary<string, string>();
				DateTime today = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, tzInf);
				DateTime eday = today.AddDays(30);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				while (today <= eday)
				{
					uint u1 = Convert.ToUInt32(today.Day);
					uint u2 = Convert.ToUInt32(today.Month);
					int i3 = Convert.ToInt32(today.Year);
					uint u4 = 5;//Convert.ToUInt32(today.Hour);
					uint u5 = 0;//Convert.ToUInt32(today.Minute);
					uint u6 = 0;
					double u7 = Convert.ToDouble(latlng.Split('|')[0]);
					double u8 = Convert.ToDouble(latlng.Split('|')[1]);
					Horoscope mHoro = await Task.Run(() =>
					{
						Horoscope mHoro = new Horoscope();
						mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
						mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
						return mHoro;
					});
					//mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					//mHoro.calc_planets_pos(true, astClient);
					int rpos = 0;
					foreach (string sign in signs)
					{
						rpos++;
						if (mHoro.planetsPos.ContainsKey(sign))
						{
							var pls = mHoro.planetsPos[sign].Split('|');
							//var ePls = '';
							//var mnode = '';
							for (var k = 0; k < pls.Length; k++)
							{
								if (pls[k].Split(' ')[1] == "MEAN_NODE")
								{
									var kpos = rpos + 6;
									if (kpos > 12) kpos = (kpos - 12);
									//var mn = i + 11;
									//if (mn > 15) mn -= 15;
									if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
									{
										var eP = mHoro.planetsPos[signs[kpos - 1]];
										mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									else
									{
										mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
									}
									// plPos[sign] = ePls;
									mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
								}

							}
							pls = mHoro.planetsPos[sign].Split('|');
							for (var k = 0; k < pls.Length; k++)
							{

								if (dctPls.ContainsKey(pls[k].Split(' ')[1]))
								{
									if (dctPls[pls[k].Split(' ')[1]].IndexOf(sign) < 0)
										dctPls[pls[k].Split(' ')[1]] += string.Format("|{0}-{1}", sign, String.Format(ci, "{0:MMM dd}", today));
								}
								else
									dctPls[pls[k].Split(' ')[1]] = string.Format("{0}-{1}", sign, String.Format(ci, "{0:MMM dd}", today));
							}
						}
					}
					today = today.AddDays(1);
				}
				string rJ = string.Format(@"{0}\signs_short.json", astClient);
				string rJ2 = string.Format(@"{0}\o_rashis.json", astClient);
				using (StreamReader r3 = new StreamReader(rJ2))
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json3 = r3.ReadToEnd();
					string json4 = r4.ReadToEnd();
					dynamic rashis_short = JsonConvert.DeserializeObject(json4);
					dynamic rashis = JsonConvert.DeserializeObject(json3);
					foreach (var pred in dctPls)
					{
						string pras = pred.Value;
						string spred = string.Empty;
						int toks = 0;
						foreach (var ras in pras.Split('|'))
						{
							int pos = GetPosFMon(rashis_short[cStar.birthSign.ToLower()].ToString(), ras.Split('-')[0]);
							if (pred.Key == "Su" || pred.Key == "Ve" || pred.Key == "Ju" || pred.Key == "Sa" || pred.Key == "Me" || pred.Key == "Ma" || pred.Key == "Ra" || pred.Key == "Ke")
							{
								string pky = string.Format(@"{0}\{1}-{2}.json", astClient, lang, pred.Key);
								using (StreamReader r5 = new StreamReader(pky))
								{
									string json5 = r5.ReadToEnd();
									dynamic plpreds = JsonConvert.DeserializeObject(json5);
									if (toks > 0)
									{
										spred += dctAstro["tr-r2"].Replace("[0]", ras.Split('-')[1]).Replace("[1]", dctAst[pred.Key]).Replace("[2]", dctAst[rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1].ToString().ToLower()]).Replace("[3]", pos.ToString()).Replace("[4]", plpreds[pos.ToString()].ToString());
									}
									else
									{
										spred = dctAstro["tr-r1"].Replace("[0]", dctAst[pred.Key]).Replace("[1]", dctAst[rashis[ras.Split('-')[0].ToLower()].ToString().Split('|')[1].ToLower()]).Replace("[2]", pos.ToString()).Replace("[3]", plpreds[pos.ToString()].ToString());
									}
									//spred += GetNatalAspects(dctPlHou, plpreds, dctPlNames[pred.Key], ras.Split('-')[0]);
								}
								toks++;
							}
						}
						if (toks > 0)
							dctPreds[dctPlNames[pred.Key]] = spred;
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				dctPreds["ERROR"] = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				//return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return dctPreds;
		}
		[HttpGet("GetNatalAspects")]
		string GetNatalAspects(Dictionary<string, PlanetHouse> dctPlHou, dynamic plPreds, string tpl, string tras)
		{
			_logger.LogInformation("GetNatalAspects");
			string natp = string.Format(" & also during this time the transit {0} gets ", tpl);
			int np = 0;
			foreach (var pl in dctPlHou)
			{
				PlanetHouse pH = pl.Value;
				if (pH.code == "Mo") continue;
				int pos = GetPosFMon(tras, pH.sign);
				if (pos == 1 || pos == 2 || pos == 3 || pos == 5 || pos == 7 || pos == 9 || pos == 11 || pos == 12)
				{
					natp += string.Format("{0} aspect from natal {1} which may cause {2}, ", pos, pH.name, plPreds[pH.code]);
					np++;
				}
			}
			if (np > 0) return natp;
			return string.Empty;
		}
		[HttpGet("AnalyzeMoney")]
		public async Task<ActionResult> AnalyzeMoney(string das, string dob, string tob, string latlng, string timezone, string lang, int ayanid)
		{
			_logger.LogInformation("AnalyzeMoney");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string tz = TZConvert.IanaToWindows(timezone);
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					mHoro.calc_houses();
					return mHoro;
				});
				Dictionary<string, string> plPos = mHoro.planetsPos;//(Dictionary<string, string>)(jOb.Data);
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou3 = string.Empty, hou4 = string.Empty, hou8 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				dctPlNames.Add("me", "MEAN NODE");
				dctPlNames.Add("AC", "Ascendant");
				Dictionary<string, int> dctIndu = new Dictionary<string, int>();
				dctIndu.Add("Su", 30);
				dctIndu.Add("Mo", 16);
				dctIndu.Add("Ma", 6);
				dctIndu.Add("Me", 8);
				dctIndu.Add("Ju", 10);
				dctIndu.Add("Ve", 12);
				dctIndu.Add("Sa", 1);


				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 3) hou3 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 8) hou8 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				string mhou9 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r2 == 9) mhou9 = ras[r1];
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				string desc = string.Empty;
				string md = dctPlNames[das.Split('|')[0]];
				string ad = dctPlNames[das.Split('|')[1]];
				string pd = dctPlNames[das.Split('|')[2]];
				string msig = string.Empty;
				if (das.Split('|')[0] == "Ju" || das.Split('|')[0] == "Mo" || das.Split('|')[0] == "Ve" || das.Split('|')[0] == "Me")
				{
					msig += md;
				}
				if (das.Split('|')[1] == "Ju" || das.Split('|')[1] == "Mo" || das.Split('|')[1] == "Ve" || das.Split('|')[1] == "Me")
				{
					msig += (msig != string.Empty) ? "& " + ad : ad;
				}
				if (das.Split('|')[2] == "Ju" || das.Split('|')[2] == "Mo" || das.Split('|')[2] == "Ve" || das.Split('|')[2] == "Me")
				{
					msig += (msig != string.Empty) ? "& " + pd : pd;
				}
				desc = string.Format("<span style=\"font-weight:bold\">You are currently in {0} Maha Dasha, {1} Antar Dasha & {2} Pratyantar Dasha</span><br>", md, ad, pd);
				if (msig != string.Empty)
					desc += string.Format("<span>Your Dasha Lord(s) <span style=\"font-weight:bold;color:blue\">{0}</span> are Money significators. Hence in the current Dasha will help you gain money which depends on strength of these Dasha Lords.</span><br>", msig);
				desc += "<span style=\"font-weight:bold\">Moon and Jupiter is Main significator of Wealth in any Horoscope. Venus bestows Luxuries and comforts in Life. Without the Blessing of Venus we can not enjoy anything. So a well placed Venus Jupiter and Moon makes one Rich.</style><br>";
				//PlanetStrength
				desc += "<span>Lets examine the strength of each of these planets in your Rashi Chart.</span><br>";
				//PlanetStrength pSJ =  PlanetStrength.NORMAL;
				string ds = descStrength(dctPlHou["Ju"]);
				// dctYogs.Add("SIG-Ju", ds);
				desc += string.Format("<span style=\"font-weight:bold;color:red\">{0}</span><br>", ds);
				//desc += "<br>";
				//PlanetStrength pSM = PlanetStrength.NORMAL;
				ds = descStrength(dctPlHou["Mo"]);
				//dctYogs.Add("SIG-Mo", ds);
				desc += string.Format("<span style=\"font-weight:bold;color:blue\">{0}</span><br>", ds);
				//PlanetStrength pSV = PlanetStrength.NORMAL;
				ds = descStrength(dctPlHou["Ve"]);
				//dctYogs.Add("SIG-Ve", ds);
				desc += string.Format("<span style=\"font-weight:bold;color:green\">{0}</span><br>", ds);
				//PlanetStrength pSME = PlanetStrength.NORMAL;
				ds = descStrength(dctPlHou["Me"]);
				//dctYogs.Add("SIG-Me", ds);
				desc += string.Format("<span style=\"font-weight:bold;color:brown\">{0}</span><br>", ds);
				PlanetHouse pH2L = dctPlHou[hou2.Split('|')[2]];
				PlanetHouse pH11L = dctPlHou[hou11.Split('|')[2]];
				if (pH2L.sign == asc_h.Split('|')[0] && pH11L.sign == asc_h.Split('|')[1])
				{
					desc += string.Format("<span>The second house lord <span style=\"font-weight:bold;color:blue\">{0}</span> & 11th house lord <span style=\"font-weight:bold;color:red\">{1}</span> are conjunct in Ascendant house which forms a very auspicious wealth yoga in horoscope.", dctPlNames[hou2.Split('|')[2]], dctPlNames[hou11.Split('|')[2]]);
				}
				PlanetStrength pS1L = checkStrength(dctPlHou[asc_h.Split('|')[2]]);
				PlanetStrength pS2L = checkStrength(dctPlHou[hou2.Split('|')[2]]);
				PlanetStrength pS11L = checkStrength(dctPlHou[hou11.Split('|')[2]]);
				bool o1 = false, o2 = false, o3 = false;
				if (pS1L == PlanetStrength.OWN || pS1L == PlanetStrength.MOOLTRIKONA)
				{
					o1 = true;
				}
				if (pS2L == PlanetStrength.OWN || pS2L == PlanetStrength.MOOLTRIKONA)
				{
					o2 = true;
				}
				if (pS11L == PlanetStrength.OWN || pS11L == PlanetStrength.MOOLTRIKONA)
				{
					o3 = true;
				}
				if (o1 && o2 && o3)
				{
					desc += string.Format("<span>The first house lord <span style=\"font-weight:bold;color:blue\">{0}</span>, second house lord <span style=\"font-weight:bold;color:red\">{1}</span> & 11th house lord <span style=\"font-weight:bold;color:green\">{2}</span> are in their respective houses which makes the native extremely rich.", dctPlNames[asc_h.Split('|')[2]], dctPlNames[hou2.Split('|')[2]], dctPlNames[hou11.Split('|')[2]]);
				}
				PlanetStrength pS7L = checkStrength(dctPlHou[hou11.Split('|')[2]]);
				r1 = 0;
				r2 = 0;
				Horo horo = new Horo();
				horo.planetPos = plPos;
				JsonResult jO = (JsonResult)GetAspects(horo, hou7.Split('|')[0]);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben = false, ismel = false;
				string mel_pl = string.Empty, ben_pl = string.Empty;
				bool ownasp1 = false;
				bool ownasp2 = false;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						bool ben = isBEN(lrd);
						if (ben) { isben = true; ben_pl += dctPlNames[lrd] + ","; }
						else { ismel = true; mel_pl += dctPlNames[lrd] + ","; }

						if (lrd == hou7.Split('|')[2]) { ownasp1 = true; }
					}
				}
				//if (isben)
				//{
				//  desc += string.Format(" The 7th house is having benefic aspect from {0} which is good.", ben_pl);
				//}
				jO = (JsonResult)GetAspects(horo, hou8.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben2 = false;
				ismel = false;
				mel_pl = string.Empty;
				ben_pl = string.Empty;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						bool ben = isBEN(lrd);
						if (ben) { isben2 = true; ben_pl += dctPlNames[lrd] + ","; }
						else { ismel = true; mel_pl += dctPlNames[lrd] + ","; }
						if (lrd == hou8.Split('|')[2]) { ownasp2 = true; }
					}
				}
				//if (isben2)
				//{
				//desc += string.Format(" The 8th house is having benefic aspect from {0} which is good.", ben_pl);
				//}
				if (isben && isben2)
				{
					//7th & 8th house having benefic aspect
					desc += string.Format("<span style=\"font-weight:bold\">Both 7th & 8th house are aspected by benefic planet(s). The natives financial condition improves after marriage.</span><br>");

				}
				if (ownasp1)
				{
					desc += string.Format("<span style=\"font-weight:bold\">7th Lord aspecting its own house which is auspicious</span><br>");
				}
				if (ownasp2)
				{
					desc += string.Format("<span style=\"font-weight:bold\">8th Lord aspecting its own house which is auspicious</span><br>");
				}
				bool eql = dctPlHou["Ju"].hno == dctPlHou["Me"].hno && dctPlHou["Me"].hno == dctPlHou[hou2.Split('|')[2]].hno;
				if (eql)
				{
					//Jupiter conjunct with Mercury and 2nd Lord
					desc += string.Format("<span style=\"font-weight:bold\">Jupiter, Mercury & the 2nd Lord {0} are in same house. Which is a very good combination for Financial gains.</span><br>", dctPlNames[hou2.Split('|')[2]]);
				}
				if ((dctPlHou[hou2.Split('|')[2]].houselord != dctPlHou[hou5.Split('|')[2]].houselord) && (dctPlHou[hou2.Split('|')[2]].houselord == hou5.Split('|')[2] && dctPlHou[hou5.Split('|')[2]].houselord == hou2.Split('|')[2]))
				{
					//exchage between 2nd lord and 5th lord
					desc += string.Format("<span style=\"font-weight:bold\">2nd Lord {0} & 5th Lord {1} exchanged their houses which is very auspicious for Financial Growth. as per Bhavat Bhavam principle, it is the secondary House of Fortune. Moreover it is one of the Trikona House. Trikona Houses are known as Lakshmisthana or Houses of wealth</span><br>", dctPlNames[dctPlHou[hou2.Split('|')[2]].houselord], dctPlNames[dctPlHou[hou2.Split('|')[5]].houselord]);
				}
				jO = (JsonResult)GetAspects(horo, dctPlHou["Mo"].sign);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					if (asp.Value.Contains("Su"))
					{
						//sun aspects moon
						desc += string.Format("<span style=\"font-weight:bold\">In your horoscope Sun is aspecting Moon which is very favorable for financial prosperity .</span><br>");
					}
					if (asp.Value.Contains("Ju"))
					{
						//jupiter aspects moon
						desc += string.Format("<span style=\"font-weight:bold\">In your horoscope Jupiter is aspecting Moon which is very favorable for financial prosperity .</span><br>");
					}
				}
				jO = (JsonResult)GetAspects(horo, dctPlHou[hou2.Split('|')[2]].sign);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					if (asp.Value.Contains("Ju"))
					{
						//jupiter aspects 2nd lord
						desc += string.Format("<span style=\"font-weight:bold\">In your horoscope Jupiter is aspecting 2nd Lord which is very favorable for financial prosperity .</span><br>");
					}
				}
				jO = (JsonResult)GetAspects(horo, hou2.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					if (asp.Value.Contains("Ju"))
					{
						//jupiter aspects 2nd house
						desc += string.Format("<span style=\"font-weight:bold\">In your horoscope Jupiter is aspecting 2nd house which is very favorable for financial prosperity .</span><br>");

					}
				}
				bool h8b = isBEN(hou8.Split('|')[2]);
				if (h8b)
				{
					//benefics in 8th house
					desc += string.Format("<span style=\"font-weight:bold\">In your horoscope there is a benefic planet in 8th house which makes one rich by inheritance or Lottery or Share market .</span><br>");
				}
				if (dctPlHou["Ve"].hno == 12)
				{
					//venus in 12 house
					desc += string.Format("<span style=\"font-weight:bold\">In your horoscope Venus is in 12 house which is very beneficial for financial gains.</span><br>");
				}
				//ARUDHA LAGNA
				PlanetHouse pHL = dctPlHou[asc_h.Split('|')[2]];
				int arh = (pHL.hno * 2) - 1;
				if (arh > 12) arh -= 12;
				//var k = (arh == 1) ? asc_h : string.Format("hou{0}", arh);

				string arHou = string.Empty;
				switch (arh)
				{
					case 1:
						arHou = asc_h;
						break;
					case 2:
						arHou = hou2;
						break;
					case 3:
						arHou = hou3;
						break;
					case 4:
						arHou = hou4;
						break;
					case 5:
						arHou = hou5;
						break;
					case 6:
						arHou = hou6;
						break;
					case 7:
						arHou = hou7;
						break;
					case 8:
						arHou = hou8;
						break;
					case 9:
						arHou = hou9;
						break;
					case 10:
						arHou = hou10;
						break;
					case 11:
						arHou = hou11;
						break;
					case 12:
						arHou = hou12;
						break;
					default:
						break;
				}

				desc += string.Format("<h2>Arudh Lagna</h2>");
				desc += string.Format("<p>Arudha Lagna is the Image of your Lagna on others. Its like reflection. It gives us a clue about how a person is perceived by others. For example if some one comes out of a BMW car, we instantly draw a conclusion that the person is extremely rich which may be or may not be true. It may happen that he does not own the car. This is the role of Arudha Lagna. So it is very important regarding Materialistic gain.</p><br>");
				desc += string.Format("<p>Your Arudh Lagna is {0} & its Lord is {1}</p><br>", arHou.Split('|')[0], dctPlNames[arHou.Split('|')[2]]);
				//11th from ARUDH LAGNA
				r1 = 0;
				r2 = 0;
				bool arl = false;
				string ar11 = string.Empty, ar2 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (arl) r2++;
					if (ras[r1].Split('|')[0].Trim() == arHou.Split('|')[0])
					{
						arl = true;
						r2++;
					}
					if (r2 == 11)
					{
						ar11 = ras[r1];
					}
					if (r2 == 2)
					{
						ar2 = ras[r1];
					}
					if (r2 == 12) break;
					if (r1 == 11) r1 = -1;
				}
				jO = (JsonResult)GetAspects(horo, ar11.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				string arPls = string.Empty;
				foreach (var asp in dctAsp)
				{
					arPls += asp.Value + ",";
				}
				if (arPls != string.Empty)
				{
					desc += string.Format("<p>{0} aspects 11th house from Arudh Lagna which is very auspicious, as per Jaimini such aspect could make the native wealthy.</p><br>", arPls);
				}
				if (plPos.ContainsKey(ar11.Split('|')[0]))
				{
					//11h hs planet
					var pls = plPos[ar11.Split('|')[0]];
					string plc = string.Empty;
					bool ben = false, mel = false;
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							plc += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
							bool b = isBEN(pl.Split(' ')[1]);
							if (b)
							{
								ben = true;
							}
							else
							{
								mel = true;
							}
						}
					}
					if (ben && mel)
					{
						desc += string.Format("<p>since there is both benefic & malefic planet in the 11th house from Arudh Lagna, as per Jaimini such placement can make the native  wealthy through both righteous and unfair means</p><br>");
					}
					else if (ben)
					{
						desc += string.Format("<p>since there is a benefic planet positioned in the 11th house from Arudh Lagna, as per Jaimini such placement can make the native  wealthy through fair & righteous means</p><br>");
					}
					else if (mel)
					{
						desc += string.Format("<p>since there is a malefic planet positioned in the 11th house from Arudh Lagna, as per Jaimini such placement cause the native to make money through unfair means.</p><br>");
					}
				}
				if (plPos.ContainsKey(ar2.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[ar2.Split('|')[0]];
					string plc = string.Empty;
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] == "Ju" || pl.Split(' ')[1] == "Mo" || pl.Split(' ')[1] == "Ve")
							plc += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
					}
					if (plc != string.Empty)
					{
						desc += string.Format("<p>In your horoscope {0} in 2nd house from Arudh Lagna, as per Jaimini such a placement causes native wealthy & prosperous.</p><br>", plc);
					}
				}
				if (arh == 11)
				{
					desc += string.Format("<p>In your horoscope Arudh Lagna falls in 11th house from Ascendant, as per Jaimini such placement causes the native to be wealthy.</p><br>");
				}
				else if (arh == 1 || arh == 4 || arh == 5 || arh == 7 || arh == 9 || arh == 10)
				{
					desc += string.Format("<p>In your horoscope Arudh Lagna is falling in {0} house which is Angular or Trine house from Ascendant, as per Jaimini such placement causes the native to be wealthy.</p><br>", arh);
				}
				else if (arh == 6 || arh == 8 || arh == 12)
				{
					desc += string.Format("<p>In your horoscope Arudh Lagna falls in {0} house from Ascendant, as per Jaimini such placement is not good may need astrological remedies. Please talk to one of our expert astrologers.</p><br>", arh);
				}
				desc += string.Format("<h2>Indu Lagna</h2>");
				desc += string.Format("<p>Indu lagna is also known as the ascendant of wealth. It has special significance in Ashtakavarga. It is also known by the name of Moon Yoga in the Brihat Parashara Hora. Indu lagna or Moon ascendant is analyzed to determine the financial situation of a native. It is used to determine the wealth and prosperity of the native. It also determines important incidents of a native’s life.</p><br>");
				int ind = dctIndu[hou9.Split('|')[2]] + dctIndu[mhou9.Split('|')[2]];
				int inr = ind % 12;
				r1 = 0;
				r2 = 0;
				mon = false;
				string inl = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
							}
						}
					}
					if (r2 == inr) inl = ras[r1];
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}

				r1 = 0;
				r2 = 0;
				bool inu = false;
				string in1 = string.Empty, in2 = string.Empty, in4 = string.Empty, in6 = string.Empty, in7 = string.Empty, in8 = string.Empty, in10 = string.Empty, in11 = string.Empty, in12 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (inu) r2++;
					if (ras[r1].Split('|')[0].Trim() == inl.Split('|')[0].Trim())
					{
						inu = true;
						r2++;
					}
					if (r2 == 1)
					{
						in1 = ras[r1];
					}
					else if (r2 == 2)
					{
						in2 = ras[r1];
					}
					else if (r2 == 4) in4 = ras[r1];
					else if (r2 == 6) in6 = ras[r1];
					else if (r2 == 7) in7 = ras[r1];
					else if (r2 == 8) in8 = ras[r1];
					else if (r2 == 10) in10 = ras[r1];
					else if (r2 == 11) in11 = ras[r1];
					else if (r2 == 12) in12 = ras[r1];
					if (r2 == 12) break;
					if (r1 == 11) r1 = -1;
				}
				desc += string.Format("<p>In your horoscope Indu Lagna falls in {0} house, lord of this house is {1}.</p><br>", inl.Split('|')[0], dctPlNames[inl.Split('|')[2]]);
				string indPls = string.Empty;
				if (plPos.ContainsKey(in1.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in1.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in4.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in4.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						//if (pl.Split(' ')[1] == "Ju" || pl.Split(' ')[1] == "Mo" || pl.Split(' ')[1] == "Ve")
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in7.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in7.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						//if (pl.Split(' ')[1] == "Ju" || pl.Split(' ')[1] == "Mo" || pl.Split(' ')[1] == "Ve")
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in10.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in10.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in11.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in11.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
						}
					}
				}
				desc += string.Format("<p>As per sacred texts, the planets positioned in 1st, 4th, 7th, 10th & 11th houses from Indu Lagna are suppose to be wealth givers, the native is expeted to earn during dashas of these planets.</p><br>");
				if (indPls != string.Empty)
				{
					desc += string.Format("<p>In your horoscope, the planets {0} are wealth givers, you are expeted earn good wealth during dashas of these planets.</p><br>", indPls);
				}
				desc += string.Format("<p>As per sacred texts, the planets positioned in 6th, 8th, 12th houses from Indu Lagna are considered inauspicious for wealth.</p><br>");
				indPls = string.Empty;
				if (plPos.ContainsKey(in6.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in6.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in8.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in8.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in12.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in12.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
						}
					}
				}
				if (indPls != string.Empty)
				{
					desc += string.Format("<p>In your horoscope, the planets {0} are considered inauspicious for weath, you may expect some challenges during dashas of these planets.</p><br>", indPls);
				}
				dctYogs.Add("MONEY", desc);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("AnalyzeMoneyEx")]
		public async Task<ActionResult> AnalyzeMoneyEx(string das, string dob, string tob, string latlng, string timezone, string lang, int ayanid)
		{
			_logger.LogInformation("AnalyzeMoneyEx");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			int mky = 0;
			try
			{
				#region DICT
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);

				#endregion

				#region CALC
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string tz = TZConvert.IanaToWindows(timezone);
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return mHoro;
				});
				Dictionary<string, string> plPos = mHoro.planetsPos;
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou3 = string.Empty, hou4 = string.Empty, hou8 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				dctPlNames.Add("me", "MEAN NODE");
				dctPlNames.Add("AC", "Ascendant");
				Dictionary<string, int> dctIndu = new Dictionary<string, int>();
				dctIndu.Add("Su", 30);
				dctIndu.Add("Mo", 16);
				dctIndu.Add("Ma", 6);
				dctIndu.Add("Me", 8);
				dctIndu.Add("Ju", 10);
				dctIndu.Add("Ve", 12);
				dctIndu.Add("Sa", 1);
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0].Trim();
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 3) hou3 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 8) hou8 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				string mhou9 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r2 == 9) mhou9 = ras[r1];
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				#endregion
				string desc = string.Empty;
				string md = dctPlNames[das.Split('|')[0]];
				string ad = dctPlNames[das.Split('|')[1]];
				string pd = dctPlNames[das.Split('|')[2]];
				string msig = string.Empty;
				if (das.Split('|')[0] == "Ju" || das.Split('|')[0] == "Mo" || das.Split('|')[0] == "Ve" || das.Split('|')[0] == "Me")
				{
					msig += md;
				}
				if (das.Split('|')[1] == "Ju" || das.Split('|')[1] == "Mo" || das.Split('|')[1] == "Ve" || das.Split('|')[1] == "Me")
				{
					msig += (msig != string.Empty) ? "& " + ad : ad;
				}
				if (das.Split('|')[2] == "Ju" || das.Split('|')[2] == "Mo" || das.Split('|')[2] == "Ve" || das.Split('|')[2] == "Me")
				{
					msig += (msig != string.Empty) ? "& " + pd : pd;
				}
				desc = dctAsto["mrul-1"].Replace("[0]", dctAst[md.ToLower()]).Replace("[1]", dctAst[ad.ToLower()]).Replace("[2]", dctAst[pd.ToLower()]);
				if (msig != string.Empty)
					desc += dctAsto["mrul-2"].Replace("[0]", msig);
				dctYogs["M-" + (++mky).ToString()] = desc;
				desc = dctAsto["mrul-3"];
				dctYogs["M-" + (++mky).ToString()] = desc;
				//PlanetStrength
				desc = descStrength(dctPlHou["Ju"], dctAst, lang);
				dctYogs["M-" + (++mky).ToString()] = desc;
				desc = descStrength(dctPlHou["Mo"], dctAst, lang);
				dctYogs["M-" + (++mky).ToString()] = desc;
				desc = descStrength(dctPlHou["Ve"], dctAst, lang);
				dctYogs["M-" + (++mky).ToString()] = desc;
				desc = descStrength(dctPlHou["Me"], dctAst, lang);
				dctYogs["M-" + (++mky).ToString()] = desc;
				PlanetHouse pH2L = dctPlHou[hou2.Split('|')[2]];
				PlanetHouse pH11L = dctPlHou[hou11.Split('|')[2]];
				if (pH2L.sign == asc_h.Split('|')[0] && pH11L.sign == asc_h.Split('|')[1])
				{
					desc = dctAsto["mrul-4"].Replace("[0]", dctPlNames[hou2.Split('|')[2]]).Replace("[1]", dctPlNames[hou11.Split('|')[2]]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				PlanetStrength pS1L = checkStrength(dctPlHou[asc_h.Split('|')[2]]);
				PlanetStrength pS2L = checkStrength(dctPlHou[hou2.Split('|')[2]]);
				PlanetStrength pS11L = checkStrength(dctPlHou[hou11.Split('|')[2]]);
				bool o1 = false, o2 = false, o3 = false;
				if (pS1L == PlanetStrength.OWN || pS1L == PlanetStrength.MOOLTRIKONA)
				{
					o1 = true;
				}
				if (pS2L == PlanetStrength.OWN || pS2L == PlanetStrength.MOOLTRIKONA)
				{
					o2 = true;
				}
				if (pS11L == PlanetStrength.OWN || pS11L == PlanetStrength.MOOLTRIKONA)
				{
					o3 = true;
				}
				if (o1 && o2 && o3)
				{
					desc = dctAsto["mrul-5"].Replace("[0]", dctPlNames[asc_h.Split('|')[2]]).Replace("[1]", dctPlNames[hou2.Split('|')[2]]).Replace("[2]", dctPlNames[hou11.Split('|')[2]]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				PlanetStrength pS7L = checkStrength(dctPlHou[hou11.Split('|')[2]]);
				r1 = 0;
				r2 = 0;
				Horo horo = new Horo();
				horo.planetPos = plPos;
				JsonResult jO = (JsonResult)GetAspects(horo, hou7.Split('|')[0]);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben = false, ismel = false;
				string mel_pl = string.Empty, ben_pl = string.Empty;
				bool ownasp1 = false;
				bool ownasp2 = false;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						bool ben = isBEN(lrd);
						if (ben) { isben = true; ben_pl += dctPlNames[lrd] + ","; }
						else { ismel = true; mel_pl += dctPlNames[lrd] + ","; }

						if (lrd == hou7.Split('|')[2]) { ownasp1 = true; }
					}
				}
				jO = (JsonResult)GetAspects(horo, hou8.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben2 = false;
				ismel = false;
				mel_pl = string.Empty;
				ben_pl = string.Empty;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						bool ben = isBEN(lrd);
						if (ben) { isben2 = true; ben_pl += dctPlNames[lrd] + ","; }
						else { ismel = true; mel_pl += dctPlNames[lrd] + ","; }
						if (lrd == hou8.Split('|')[2]) { ownasp2 = true; }
					}
				}
				if (isben && isben2)
				{
					//7th & 8th house having benefic aspect
					desc = dctAsto["mrul-6"];
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (ownasp1)
				{
					desc = dctAsto["mrul-7"];
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (ownasp2)
				{
					desc = dctAsto["mrul-8"];
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				bool eql = dctPlHou["Ju"].hno == dctPlHou["Me"].hno && dctPlHou["Me"].hno == dctPlHou[hou2.Split('|')[2]].hno;
				if (eql)
				{
					//Jupiter conjunct with Mercury and 2nd Lord
					desc = dctAsto["mrul-9"].Replace("[0]", dctPlNames[hou2.Split('|')[2]]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if ((dctPlHou[hou2.Split('|')[2]].houselord != dctPlHou[hou5.Split('|')[2]].houselord) && (dctPlHou[hou2.Split('|')[2]].houselord == hou5.Split('|')[2] && dctPlHou[hou5.Split('|')[2]].houselord == hou2.Split('|')[2]))
				{
					//exchage between 2nd lord and 5th lord
					desc = dctAsto["mrul-10"].Replace("[0]", dctAst[dctPlHou[hou2.Split('|')[2]].houselord]).Replace("[1]", dctAst[dctPlHou[hou5.Split('|')[2]].houselord]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				jO = (JsonResult)GetAspects(horo, dctPlHou["Mo"].sign);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					if (asp.Value.Contains("Su"))
					{
						//sun aspects moon
						desc = dctAsto["mrul-11"];
						dctYogs["M-" + (++mky).ToString()] = desc;
					}
					if (asp.Value.Contains("Ju"))
					{
						//jupiter aspects moon
						desc = dctAsto["mrul-12"];
						dctYogs["M-" + (++mky).ToString()] = desc;
					}
				}
				jO = (JsonResult)GetAspects(horo, dctPlHou[hou2.Split('|')[2]].sign);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					if (asp.Value.Contains("Ju"))
					{
						//jupiter aspects 2nd lord
						desc = dctAsto["mrul-13"];
						dctYogs["M-" + (++mky).ToString()] = desc;
					}
				}
				jO = (JsonResult)GetAspects(horo, hou2.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					if (asp.Value.Contains("Ju"))
					{
						//jupiter aspects 2nd house
						desc = dctAsto["mrul-14"];
						dctYogs["M-" + (++mky).ToString()] = desc;
					}
				}
				bool h8b = isBEN(hou8.Split('|')[2]);
				if (h8b)
				{
					//benefics in 8th house
					desc = dctAsto["mrul-15"];
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctPlHou["Ve"].hno == 12)
				{
					//venus in 12 house
					desc = dctAsto["mrul-16"];
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				//ARUDHA LAGNA
				PlanetHouse pHL = dctPlHou[asc_h.Split('|')[2]];
				int arh = (pHL.hno * 2) - 1;
				if (arh > 12) arh -= 12;
				string arHou = string.Empty;
				switch (arh)
				{
					case 1:
						arHou = asc_h;
						break;
					case 2:
						arHou = hou2;
						break;
					case 3:
						arHou = hou3;
						break;
					case 4:
						arHou = hou4;
						break;
					case 5:
						arHou = hou5;
						break;
					case 6:
						arHou = hou6;
						break;
					case 7:
						arHou = hou7;
						break;
					case 8:
						arHou = hou8;
						break;
					case 9:
						arHou = hou9;
						break;
					case 10:
						arHou = hou10;
						break;
					case 11:
						arHou = hou11;
						break;
					case 12:
						arHou = hou12;
						break;
					default:
						break;
				}

				desc = dctAsto["mrul-17"];
				desc += dctAsto["mrul-18"].Replace("[0]", dctAst[arHou.Split('|')[0]]).Replace("[1]", dctAst[arHou.Split('|')[2]]);
				dctYogs["Arudh Lagna"] = desc;
				//11th from ARUDH LAGNA
				r1 = 0;
				r2 = 0;
				bool arl = false;
				string ar11 = string.Empty, ar2 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (arl) r2++;
					if (ras[r1].Split('|')[0].Trim() == arHou.Split('|')[0])
					{
						arl = true;
						r2++;
					}
					if (r2 == 11)
					{
						ar11 = ras[r1];
					}
					if (r2 == 2)
					{
						ar2 = ras[r1];
					}
					if (r2 == 12) break;
					if (r1 == 11) r1 = -1;
				}
				jO = (JsonResult)GetAspects(horo, ar11.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				string arPls = string.Empty;
				foreach (var asp in dctAsp)
				{
					arPls += asp.Value + ",";
				}
				if (arPls != string.Empty)
				{
					desc = dctAsto["mrul-19"].Replace("[0]", arPls);
					dctYogs["A-" + (++mky).ToString()] = desc;
				}
				if (plPos.ContainsKey(ar11.Split('|')[0]))
				{
					//11h hs planet
					var pls = plPos[ar11.Split('|')[0]];
					string plc = string.Empty;
					bool ben = false, mel = false;
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							plc += string.Format("{0},", dctPlNames[pl.Split(' ')[1]]);
							bool b = isBEN(pl.Split(' ')[1]);
							if (b)
							{
								ben = true;
							}
							else
							{
								mel = true;
							}
						}
					}
					if (ben && mel)
					{
						desc = dctAsto["mrul-20"];
						dctYogs["A-" + (++mky).ToString()] = desc;
					}
					else if (ben)
					{
						desc = dctAsto["mrul-21"];
						dctYogs["A-" + (++mky).ToString()] = desc;
					}
					else if (mel)
					{
						desc = dctAsto["mrul-22"];
						dctYogs["A-" + (++mky).ToString()] = desc;
					}
				}
				if (plPos.ContainsKey(ar2.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[ar2.Split('|')[0]];
					string plc = string.Empty;
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] == "Ju" || pl.Split(' ')[1] == "Mo" || pl.Split(' ')[1] == "Ve")
							plc += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
					}
					if (plc != string.Empty)
					{
						desc = dctAsto["mrul-23"].Replace("[0]", plc);
						dctYogs["A-" + (++mky).ToString()] = desc;
					}
				}
				if (arh == 11)
				{
					desc = dctAsto["mrul-24"];
					dctYogs["A-" + (++mky).ToString()] = desc;
				}
				else if (arh == 1 || arh == 4 || arh == 5 || arh == 7 || arh == 9 || arh == 10)
				{
					desc = dctAsto["mrul-25"].Replace("[0]", arh.ToString());
					dctYogs["A-" + (++mky).ToString()] = desc;
				}
				else if (arh == 6 || arh == 8 || arh == 12)
				{
					desc = dctAsto["mrul-26"].Replace("[0]", arh.ToString());
					dctYogs["A-" + (++mky).ToString()] = desc;
				}
				desc = dctAsto["mrul-27"];
				dctYogs["Indu Lagna"] = desc;
				int ind = dctIndu[hou9.Split('|')[2]] + dctIndu[mhou9.Split('|')[2]];
				int inr = ind % 12;
				r1 = 0;
				r2 = 0;
				mon = false;
				string inl = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
							}
						}
					}
					if (r2 == inr) inl = ras[r1];
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}

				r1 = 0;
				r2 = 0;
				bool inu = false;
				string in1 = string.Empty, in2 = string.Empty, in4 = string.Empty, in6 = string.Empty, in7 = string.Empty, in8 = string.Empty, in10 = string.Empty, in11 = string.Empty, in12 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (inu) r2++;
					if (ras[r1].Split('|')[0].Trim() == inl.Split('|')[0].Trim())
					{
						inu = true;
						r2++;
					}
					if (r2 == 1)
					{
						in1 = ras[r1];
					}
					else if (r2 == 2)
					{
						in2 = ras[r1];
					}
					else if (r2 == 4) in4 = ras[r1];
					else if (r2 == 6) in6 = ras[r1];
					else if (r2 == 7) in7 = ras[r1];
					else if (r2 == 8) in8 = ras[r1];
					else if (r2 == 10) in10 = ras[r1];
					else if (r2 == 11) in11 = ras[r1];
					else if (r2 == 12) in12 = ras[r1];
					if (r2 == 12) break;
					if (r1 == 11) r1 = -1;
				}
				desc = dctAsto["mrul-28"].Replace("[0]", dctAst[inl.Split('|')[0]]).Replace("[1]", dctAst[inl.Split('|')[2]]);
				dctYogs["I-" + (++mky).ToString()] = desc;
				string indPls = string.Empty;
				if (plPos.ContainsKey(in1.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in1.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in4.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in4.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						//if (pl.Split(' ')[1] == "Ju" || pl.Split(' ')[1] == "Mo" || pl.Split(' ')[1] == "Ve")
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in7.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in7.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						//if (pl.Split(' ')[1] == "Ju" || pl.Split(' ')[1] == "Mo" || pl.Split(' ')[1] == "Ve")
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in10.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in10.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in11.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in11.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
						}
					}
				}
				desc = dctAsto["mrul-29"];
				dctYogs["I-" + (++mky).ToString()] = desc;
				if (indPls != string.Empty)
				{
					desc = dctAsto["mrul-30"].Replace("[0]", indPls);
					dctYogs["I-" + (++mky).ToString()] = desc;
				}
				desc = dctAsto["mrul-31"];
				dctYogs["I-" + (++mky).ToString()] = desc;
				indPls = string.Empty;
				if (plPos.ContainsKey(in6.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in6.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in8.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in8.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
						}
					}
				}
				if (plPos.ContainsKey(in12.Split('|')[0]))
				{
					//2nd hs planet
					var pls = plPos[in12.Split('|')[0]];
					foreach (var pl in pls.Split('|'))
					{
						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
						{
							indPls += string.Format("{0},", dctAst[pl.Split(' ')[1]]);
						}
					}
				}
				if (indPls != string.Empty)
				{
					desc = dctAsto["mrul-32"].Replace("[0]", indPls);
					dctYogs["I-" + (++mky).ToString()] = desc;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("AnalyzeD4")]
		public async Task<ActionResult> AnalyzeD4(string dob, string tob, string latlng, string timezone, string lang, int ayanid)
		{
			_logger.LogInformation("AnalyzeD4");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{

				#region CALC
				string tz = TZConvert.IanaToWindows(timezone);
				Horoscope mHoro = new Horoscope();
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
				mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 4);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou8 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				dctPlNames.Add("su", "Sun");
				dctPlNames.Add("mo", "Moon");
				dctPlNames.Add("ju", "Jupiter");
				dctPlNames.Add("me", "Mercury");
				dctPlNames.Add("ve", "Venus");
				dctPlNames.Add("ma", "Mars");
				dctPlNames.Add("sa", "Saturn");
				dctPlNames.Add("ra", "Rahu");
				dctPlNames.Add("ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 8) hou8 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
							else
							{
								if (pl.Split(' ')[1] != "Mo" && pl.Split(' ')[1] != "MEAN_NODE" && pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
								}
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}

				PlanetHouse pH = dctPlHou[hou4.Split('|')[2]];
				//pH = dctDPlHou[pH.houselord];
				PlanetStrength rLS = checkStrength(pH); //10th rashi lord
				rsn = string.Empty;
				ksn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");

				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty, asc_D = string.Empty;
				string houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								asc_D = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				#endregion
				string desc = string.Empty;
				//analyze the strength of Lagna Lord, 4th Lord & 4th Karak in Rashi Chart
				desc += string.Format("<span style=\"font-weight:bold\"> According to Vedic texts, in order to analyze ones properties such as house, lands, real estate, vehicles etc., from the horoscope, we should first see in the rashi chart the strength of Ascendant/Lagna House & its lord, 4th House & its lord(properties) & karak Mars(land) & Saturn(construction) & Venus(lexury)</span>");
				string ds = descStrength(dctPlHou[asc_h.Split('|')[2]]);
				if (ds.Trim() != string.Empty)
					desc += string.Format("<p>In your rashi chart ascendant lord {0}</p>", ds);
				ds = descStrength(dctPlHou[hou4.Split('|')[2]]);
				if (ds.Trim() != string.Empty)
					desc += string.Format("<p>In your rashi chart fourth house lord {0}</p>", ds);
				//analyze the strength of 4th house in Rashi Chart
				PlanetHouse p4H = dctPlHou[hou4.Split('|')[2]];
				Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				JsonResult jO = (JsonResult)GetAspects(horo, hou4.Split('|')[0]);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben = false, ismel = false;
				string mel_pl = string.Empty, ben_pl = string.Empty;
				string lrds_asp_4 = string.Empty;
				int cn = 0;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						lrds_asp_4 += dctPlNames[lrd].ToLower() + ",";
						if (isBEN(lrd))
						{
							isben = true;
							ben_pl += dctPlNames[lrd] + ",";
						}
						else
						{
							ismel = true;
							mel_pl += dctPlNames[lrd] + ",";
						}
						//int ben = isBenefic(hou4.Split('|')[0], lrd);
						//switch (ben)
						//{
						//    case 1:
						//        isben = true;
						//        ben_pl += dctPlNames[lrd] + ",";
						//        break;
						//    case 2:
						//        ismel = true;
						//        mel_pl += dctPlNames[lrd] + ",";
						//        break;
						//    case 0:
						//        break;
						//    default:
						//        break;
						//}
						if (lrd.ToLower() == hou8.Split('|')[2].ToLower())
						{
							//4th lord is aspected by 8th
							desc += string.Format(" <p>4th house(propety) lord {0} is aspected by 8th house(inhertance) lord {1} which indicates property through inheritance.</p>", p4H.name, dctPlNames[hou8.Split('|')[2]]);
							cn++;
						}
						else if (lrd.ToLower() == hou11.Split('|')[2].ToLower())
						{
							//4th lord is aspected by 11th
							desc += string.Format("<p>4th house(property) lord {0} is aspected by 11th house(gains) lord {1} which indicates gains through property.</p>", p4H.name, dctPlNames[hou8.Split('|')[2]]);
							cn++;
						}
					}
				}
				if (isben)
				{
					desc += string.Format("<p>In your horoscope 4th house is having benefic aspect from {0} which is good.</p>", ben_pl);
				}
				//check if there is connection between 4th, 8th & 11th lords in Rashi Chart
				//Horo horo = new Horo();
				//horo.planetPos = mHoro.planetsPos;
				PlanetHouse p8H = dctPlHou[hou8.Split('|')[2]];
				jO = (JsonResult)GetAspects(horo, p8H.sign);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (lrd == hou4.Split('|')[2])
						{
							//8th lord is aspected by 4th
							desc += string.Format("<p>8th house(inheritence) lord {0} is aspected by 4th house(property) lord {1} which indicates property through inheritance.</p>", p8H.name, p4H.name);
							cn++;
						}
						else if (lrd == hou11.Split('|')[2])
						{
							//8th lord is aspected by 11th
							desc += string.Format("<p>8th house(inheritance) lord {0} is aspected by 11th house(gains) lord {1} which indicates gains through inheritance.</p>", p8H.name, dctPlNames[hou11.Split('|')[2]]);
							cn++;
						}
					}
				}
				PlanetHouse p11H = dctPlHou[hou11.Split('|')[2]];
				jO = (JsonResult)GetAspects(horo, p11H.sign);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (lrd == hou4.Split('|')[2])
						{
							//11th lord is aspected by 4th
							desc += string.Format("<p>11th house(gains) lord {0} is aspected by 4th house(property) lord {1} which indicates gains through property.</p>", p11H.name, p4H.name);
							cn++;
						}
						else if (lrd == hou8.Split('|')[2])
						{
							//11th lord is aspected by 8th
							desc += string.Format("<p>11th house(gains) lord {0} is aspected by 8th house(inheritance) lord {1} which indicates gains through inheritance.</p>", p11H.name, p8H.name);
							cn++;
						}
					}
				}
				desc += string.Format("<p>As per our ancient texts, if there is a connection between 4th Lord, 8th Lord & 11th Lord in Rashi Chart one will accumulate huge properties depending on strength of connection.</p>", p11H.name, p8H.name);

				if (cn == 6)
				{
					//connection between 4-8-11 is very strong
					desc += string.Format("<p> In your rashi chart 4th(property) lord, 8th(inheritance) lord & 11th(gains) lord are aspecting each other, such a combination will help you make huge property gains during the dasha/bhukthi of 4th lord({0}), 8th lord({1}), 11th lord({2})</p>", p4H.name, p8H.name, p11H.name);
				}
				else
				{
					if ((p4H.hno == 8 || p4H.hno == 11) && (p8H.hno == 4 || p8H.hno == 11) && (p11H.hno == 4 || p11H.hno == 8))
					{
						desc += string.Format("<p> In your rashi chart 4th(property) lord in {0}th house, 8th(inheritance) lord  in {1}th house & 11th(gains) lord in {2}th house, such a combination will help you make huge property gains during the dasha/bhukthi of 4th lord({0}), 8th lord({1}), 11th lord({2})</p>", p4H.name, p8H.name, p11H.name);
					}
					else
					{
						if (p4H.hno == 8 || p4H.hno == 11)
						{
							if (p4H.hno == 8)
								desc += string.Format("<p>In your rashi chart 4th house(property) lord in 8th house(inheritance) which indicate you gain property through inheritence.</p>");
							else
								desc += string.Format("<p>In your rashi chart 4th house(Property) lord in 11th house(gains) which indicates you will gain through properties.</p>");
						}
						if (p8H.hno == 4 || p8H.hno == 11)
						{
							if (p8H.hno == 4)
								desc += string.Format("<p>In your rashi chart 8th house(inteheritance) lord in 4th house(property) which indicate you gain property through inheritence.</p>");
							else
								desc += string.Format("<p>In your rashi chart 8th house(inheritance) lord in 11th house(gains) which indicates you will gain through inheritance.</p>");
						}
						else if (p11H.hno == 4 || p11H.hno == 8)
						{
							if (p11H.hno == 3)
								desc += string.Format("<p>In your rashi chart 11th house(gains) lord in 4th house(property) which indicates you gain through property.</p>");
							else
								desc += string.Format("<p>In your rashi chart 11th house(gains) lord in 8th house(inheritance) which indicates you will gain through inheritance.</p>");
						}
					}
				}
				//check how karaks(Ma,Sa) are placed
				PlanetHouse pMa = dctPlHou["Ma"];
				ds = descStrength(pMa);
				if (ds.Trim() != string.Empty)
					desc += string.Format("In your rashi chart 4th Karak(lord of lands) {0}", ds);
				PlanetHouse pSa = dctPlHou["Sa"];
				ds = descStrength(pSa);
				if (ds.Trim() != string.Empty)
					desc += string.Format("In your rashi chart lord of construction {0}", ds);
				PlanetHouse pVe = dctPlHou["Ve"];
				ds = descStrength(pVe);
				if (ds.Trim() != string.Empty)
					desc += string.Format("In your rashi chart lord of lexury {0}", ds);
				if (dctPlHou[asc_h.Split('|')[2]].shno == 6)
					desc += string.Format("<p>In your rashi chart ascendant lord {0} is placed in 6th house(disputes) which indicates some challenges related to properties.</p>", dctPlHou[asc_h.Split('|')[2]].name);
				if (dctPlHou[hou4.Split('|')[2]].shno == 6)
					desc += string.Format("<p>In your rashi chart 4th lord {0} is placed in 6th house(disputes) which indicates some challenges related to properties.</p>", dctPlHou[hou4.Split('|')[2]].name);
				//analyze the strength of Lagna Lord, 4th Lord & 4th Karak in D4 Chart
				desc += string.Format("<h2>D4 Chart Analysis</h2>");
				desc += string.Format("<p>As per ancient text, the Varga charts reveal how promising will be the results analyzed in D1 or Rashi Chart. Below is the analysis of D4 or Chaturthamsa Chart </p>");
				ds = descStrength(dctDPlHou[asc_D.Split('|')[2]]);
				if (ds.Trim() != string.Empty)
					desc += string.Format("In your D4 chart, the ascendant lord {0}", ds);
				ds = descStrength(dctDPlHou[houT4.Split('|')[2]]);
				if (ds.Trim() != string.Empty)
					desc += string.Format("In your D4 chart, the 4th house lord {0}", ds);
				//check how karaks(Ma,Sa) are placed
				pMa = dctDPlHou["Ma"];
				ds = descStrength(pMa);
				if (ds.Trim() != string.Empty)
					desc += string.Format("In your D4 chart 4th House Karak, {0}", ds);
				pSa = dctDPlHou["Sa"];
				ds = descStrength(pSa);
				if (ds.Trim() != string.Empty)
					desc += string.Format("In your D4 chart, {0}", ds);
				pVe = dctDPlHou["Ve"];
				ds = descStrength(pVe);
				if (ds.Trim() != string.Empty)
					desc += string.Format("In your D4 chart, {0}", ds);
				//check vargottama
				if (dctPlHou[asc_h.Split('|')[2]].sign == dctDPlHou[asc_D.Split('|')[2]].sign)
					desc += string.Format("<p>ASC lord {0} is positioned in same house in D1 & D4 chart becomes vargottama which is excellent.</p>", dctPlHou[asc_h.Split('|')[2]].name);
				if (dctPlHou[hou4.Split('|')[2]].sign == dctDPlHou[houT4.Split('|')[2]].sign)
					desc += string.Format("<p>4rh lord {0} is positioned in same house in D1 & D4 chart becomes vargottama which is excellent.</p>", dctPlHou[hou4.Split('|')[2]].name);
				if (dctPlHou["Ma"].sign == dctDPlHou["Ma"].sign)
					desc += string.Format("<p>Mars(4th Karak) is positioned in same house in D1 & D4 chart becomes vargottama which is excellent.</p>");
				if (dctPlHou["Ve"].sign == dctDPlHou["Ve"].sign)
					desc += string.Format("<p>Venus is positioned in same house in D1 & D4 chart becomes vargottama which is excellent.</p>");
				if (dctPlHou["Sa"].sign == dctDPlHou["Sa"].sign)
					desc += string.Format("<p>Saturn is positioned in same house in D1 & D4 chart becomes vargottama which is excellent.</p>");
				if (dctDPlHou[asc_D.Split('|')[2]].hno == 6)
					desc += string.Format("<p>In your D4 chart ascendant lord {0} is placed in 6th house(disputes) which indicates some challenges related to properties.</p>", dctDPlHou[asc_D.Split('|')[2]].name);
				if (dctDPlHou[houT4.Split('|')[2]].hno == 6)
					desc += string.Format("<p>In your D4 chart 4th lord {0} is placed in 6th house(disputes) which indicates some challenges related to properties.</p>", dctDPlHou[houT4.Split('|')[2]].name);
				horo.planetPos = plPos;
				jO = (JsonResult)GetAspects(horo, houT4.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (lrds_asp_4.IndexOf(dctPlNames[lrd].ToLower()) == -1)
							lrds_asp_4 += dctPlNames[lrd].ToLower() + ",";
					}
				}
				desc += string.Format("<h2>Timing of Event</h2>");
				desc += string.Format("<p>You will buy properties during dasha/bhukthi of Lords which aspect 4th house in D1 & D4 charts provided if TRANSIT also agrees. Please note this is just one of combinations & there are many other combinations linked to 4th house& its lord will have similar results, please talk to one of our expert astrologers for detailed analysis. </p>");
				if (lrds_asp_4.Trim() != string.Empty)
				{
					desc += string.Format("<p>In your D1 & D4 charts {0} aspecting 4th house, you are expected to purchase properties during dasha & bhukthi of {1}</p>", lrds_asp_4, lrds_asp_4);
					string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
					string rJ = string.Format(@"{0}\o_rashis.json", astClient);
					double mpos = dctPlHou["Mo"].pos;
					BirthStar bS = calcBirthStar(mpos, dctPlHou["Mo"].sign);
					using (StreamReader r4 = new StreamReader(rJ))
					{
						string json4 = r4.ReadToEnd();
						dynamic rashis = JsonConvert.DeserializeObject(json4);
						int msi = Convert.ToInt32(rashis[dctPlHou["Mo"].sign].ToString().Split('|')[0]);
						int nsi = Convert.ToInt32(rashis[bS.startSign].ToString().Split('|')[0]);
						JsonResult oV = (JsonResult)await CalcVim(string.Format("{0}-{1}-{2}T{3}", dob.Split('|')[2], dob.Split('|')[1], dob.Split('|')[0], tob.Replace('|', ':')), bS.ruler, mpos, Convert.ToDouble(bS.startDeg), msi, nsi, lang);
						Dictionary<string, Dasha> vDas = (Dictionary<string, Dasha>)oV.Value;
						string dasl = string.Empty, bhul = string.Empty;
						foreach (var vim in vDas)
						{
							Dasha das = vim.Value;
							int n = 0;
							if (das.lord.Split('-').Count() > 2) continue;
							bhul = string.Empty;
							foreach (var lrd in das.lord.Split('-'))
							{
								n++;
								if (n < 3)
								{
									if (das.lord.Split('-').Count() == 1)
									{
										if (lrds_asp_4.IndexOf(lrd.ToLower()) != -1)
										{
											//if (dasl.IndexOf(lrd) == -1)
											// {
											desc += string.Format("<span style=\"font-weight:bold\">{0} {1}</span><br/>", das.lord, das.per);
											dasl += lrd + "|";
											//}
										}
									}
									else if (das.lord.Split('-').Count() == 2 && n == 2)
									{
										if (lrds_asp_4.IndexOf(lrd.ToLower()) != -1)
										{
											if (bhul.IndexOf(lrd) == -1)
											{
												desc += string.Format("<span style=\"font-weight:bold\">{0} {1}</span><br/>", das.lord, das.per);
												bhul += lrd + "|";
											}
										}
									}
								}
							}
						}
					}
				}
				dctYogs.Add("D4A", desc);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("AnalyzeD4Ex")]
		public async Task<ActionResult> AnalyzeD4Ex(string dob, string tob, string latlng, string timezone, string lang, int ayanid)
		{
			_logger.LogInformation("AnalyzeD4Ex");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			int mky = 0;
			try
			{
				#region DICT
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);

				#endregion

				#region CALCPLANET
				string tz = TZConvert.IanaToWindows(timezone);
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return mHoro;
				});
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 4);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou8 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				dctPlNames.Add("su", "Sun");
				dctPlNames.Add("mo", "Moon");
				dctPlNames.Add("ju", "Jupiter");
				dctPlNames.Add("me", "Mercury");
				dctPlNames.Add("ve", "Venus");
				dctPlNames.Add("ma", "Mars");
				dctPlNames.Add("sa", "Saturn");
				dctPlNames.Add("ra", "Rahu");
				dctPlNames.Add("ke", "Ketu");
				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 8) hou8 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
							else
							{
								if (pl.Split(' ')[1] != "Mo" && pl.Split(' ')[1] != "MEAN_NODE" && pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
								}
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}

				PlanetHouse pH = dctPlHou[hou4.Split('|')[2]];
				//pH = dctDPlHou[pH.houselord];
				PlanetStrength rLS = checkStrength(pH); //10th rashi lord
				rsn = string.Empty;
				ksn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");

				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty, asc_D = string.Empty;
				string houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT5 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								asc_D = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				#endregion
				string desc = string.Empty;
				//analyze the strength of Lagna Lord, 4th Lord & 4th Karak in Rashi Chart
				desc = dctAsto["d4-r1"];
				dctYogs["assets"] = desc;
				string ds = descStrength(dctPlHou[asc_h.Split('|')[2]], dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = string.Format("{0} {1} {2}", dctAst["i-yur-rc"], dctAst["ascendant lord"], ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				ds = descStrength(dctPlHou[hou4.Split('|')[2]], dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					//desc = string.Format("In your rashi chart fourth house lord {0}", ds);
					desc = string.Format("{0} 4th {1} {2}", dctAst["i-yur-rc"], dctAst["house lord"], ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				//analyze the strength of 4th house in Rashi Chart
				PlanetHouse p4H = dctPlHou[hou4.Split('|')[2]];
				Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				JsonResult jO = (JsonResult)GetAspects(horo, hou4.Split('|')[0]);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool isben = false, ismel = false;
				string mel_pl = string.Empty, ben_pl = string.Empty;
				string lrds_asp_4 = string.Empty;
				int cn = 0;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						lrds_asp_4 += dctAst[lrd] + ",";
						if (isBEN(lrd))
						{
							isben = true;
							ben_pl += dctAst[lrd] + ",";
						}
						else
						{
							ismel = true;
							mel_pl += dctAst[lrd] + ",";
						}
						if (lrd.ToLower() == hou8.Split('|')[2].ToLower())
						{
							//4th lord is aspected by 8th
							desc = dctAsto["d4-r2"].Replace("[0]", dctAst[p4H.code]).Replace("[1]", dctAst[hou8.Split('|')[2]]);
							dctYogs["M-" + (++mky).ToString()] = desc;
							cn++;
						}
						else if (lrd.ToLower() == hou11.Split('|')[2].ToLower())
						{
							//4th lord is aspected by 11th
							desc = dctAsto["d4-r3"].Replace("[0]", dctAst[p4H.code]).Replace("[1]", dctAst[hou8.Split('|')[2]]);
							dctYogs["M-" + (++mky).ToString()] = desc;
							cn++;
						}
					}
				}
				if (isben)
				{
					desc = dctAsto["d4-r4"].Replace("[0]", ben_pl);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				//check if there is connection between 4th, 8th & 11th lords in Rashi Chart
				PlanetHouse p8H = dctPlHou[hou8.Split('|')[2]];
				jO = (JsonResult)GetAspects(horo, p8H.sign);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (lrd == hou4.Split('|')[2])
						{
							//8th lord is aspected by 4th
							desc = dctAsto["d4-r5"].Replace("[0]", dctAst[p8H.code]).Replace("[1]", dctAst[p4H.code]);
							dctYogs["M-" + (++mky).ToString()] = desc;
							cn++;
						}
						else if (lrd == hou11.Split('|')[2])
						{
							//8th lord is aspected by 11th
							desc = dctAsto["d4-r6"].Replace("[0]", dctAst[p8H.code]).Replace("[1]", dctAst[hou11.Split('|')[2]]);
							dctYogs["M-" + (++mky).ToString()] = desc;
							cn++;
						}
					}
				}
				PlanetHouse p11H = dctPlHou[hou11.Split('|')[2]];
				jO = (JsonResult)GetAspects(horo, p11H.sign);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (lrd == hou4.Split('|')[2])
						{
							//11th lord is aspected by 4th
							desc = dctAsto["d4-r7"].Replace("[0]", dctAst[p11H.code]).Replace("[1]", dctAst[p4H.code]);
							dctYogs["M-" + (++mky).ToString()] = desc;
							cn++;
						}
						else if (lrd == hou8.Split('|')[2])
						{
							//11th lord is aspected by 8th
							desc = dctAsto["d4-r8"].Replace("[0]", dctAst[p11H.code]).Replace("[1]", dctAst[p8H.code]);
							dctYogs["M-" + (++mky).ToString()] = desc;
							cn++;
						}
					}
				}
				desc = dctAsto["d4-r9"];//.Replace("[0]", p11H.name).Replace("[1]", p8H.name);
				dctYogs["M-" + (++mky).ToString()] = desc;

				if (cn == 6)
				{
					//connection between 4-8-11 is very strong
					desc = dctAsto["d4-r10"].Replace("[0]", dctAst[p4H.code]).Replace("[1]", dctAst[p8H.code]).Replace("[2]", dctAst[p11H.code]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				else
				{
					if ((p4H.hno == 8 || p4H.hno == 11) && (p8H.hno == 4 || p8H.hno == 11) && (p11H.hno == 4 || p11H.hno == 8))
					{
						desc = dctAsto["d4-r11"].Replace("[0]", dctAst[p4H.code]).Replace("[1]", dctAst[p8H.code]).Replace("[2]", dctAst[p11H.code]);
						dctYogs["M-" + (++mky).ToString()] = desc;
					}
					else
					{
						if (p4H.hno == 8 || p4H.hno == 11)
						{
							if (p4H.hno == 8)
								desc = dctAsto["d4-r12"];
							else
								desc = dctAsto["d4-r13"];
							dctYogs["M-" + (++mky).ToString()] = desc;
						}
						if (p8H.hno == 4 || p8H.hno == 11)
						{
							if (p8H.hno == 4)
								desc = dctAsto["d4-r14"];
							else
								desc = dctAsto["d4-r15"];
							dctYogs["M-" + (++mky).ToString()] = desc;
						}
						else if (p11H.hno == 4 || p11H.hno == 8)
						{
							if (p11H.hno == 4)
								desc = dctAsto["d4-r16"];
							else
								desc = dctAsto["d4-r17"];
							dctYogs["M-" + (++mky).ToString()] = desc;
						}
					}
				}
				//check how karaks(Ma,Sa) are placed
				PlanetHouse pMa = dctPlHou["Ma"];
				ds = descStrength(pMa, dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = dctAsto["d4-r18"].Replace("[0]", ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				PlanetHouse pSa = dctPlHou["Sa"];
				ds = descStrength(pSa, dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = dctAsto["d4-r19"].Replace("[0]", ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				PlanetHouse pVe = dctPlHou["Ve"];
				ds = descStrength(pVe, dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = dctAsto["d4-r20"].Replace("[0]", ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctPlHou[asc_h.Split('|')[2]].shno == 6)
				{
					desc = string.Format("{0} {1}({2}) {3} 6th {4}({5}) ", dctAst["i-yur-rc"], dctAst["ascendant lord"], dctAst[asc_h.Split('|')[2]], dctAst["is in"], dctAst["house"], dctAst["disputes"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctPlHou[hou4.Split('|')[2]].shno == 6)
				{
					desc = string.Format("{0} 4th {1}({2}) {3} 6th {4}({5}) ", dctAst["i-yur-rc"], dctAst["ascendant lord"], dctAst[hou4.Split('|')[2]], dctAst["is in"], dctAst["house"], dctAst["disputes"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				//analyze the strength of Lagna Lord, 4th Lord & 4th Karak in D4 Chart
				desc = dctAsto["d4-r21"];
				dctYogs["Chathurtamsa Analysis"] = desc;
				ds = descStrength(dctDPlHou[asc_D.Split('|')[2]], dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = string.Format("{0} {1} {2}", dctAst["i-yur-d4"], dctAst["ascendant lord"], ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				ds = descStrength(dctDPlHou[houT4.Split('|')[2]], dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = string.Format("{0} 4th {1} {2}", dctAst["i-yur-d4"], dctAst["house lord"], ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				//check how karaks(Ma,Sa) are placed
				pMa = dctDPlHou["Ma"];
				ds = descStrength(pMa, dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = string.Format("{0} 4th {1} {2}", dctAst["i-yur-d4"], dctAst["karak"], ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				pSa = dctDPlHou["Sa"];
				ds = descStrength(pSa, dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = string.Format("{0}, {1}", dctAst["i-yur-d4"], ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				pVe = dctDPlHou["Ve"];
				ds = descStrength(pVe, dctAst, lang);
				if (ds.Trim() != string.Empty)
				{
					desc = string.Format("{0}, {1}", dctAst["i-yur-d4"], ds);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				//check vargottama
				if (dctPlHou[asc_h.Split('|')[2]].sign == dctDPlHou[asc_D.Split('|')[2]].sign)
				{
					desc = string.Format("{0}({1}) {2}", dctAst["ascendant lord"], dctAst[asc_h.Split('|')[2]], dctAsto["d4-r22"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctPlHou[hou4.Split('|')[2]].sign == dctDPlHou[houT4.Split('|')[2]].sign)
				{
					desc = string.Format("4th {0}({1}) {2}", dctAst["house lord"], dctAst[hou4.Split('|')[2]], dctAsto["d4-r22"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctPlHou["Ma"].sign == dctDPlHou["Ma"].sign)
				{
					desc = string.Format("{0}(4th {1}) {2}", dctAst["Ma"], dctAst["karak"], dctAsto["d4-r22"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctPlHou["Ve"].sign == dctDPlHou["Ve"].sign)
				{
					desc = string.Format("{0} {1}", dctAst["Ve"], dctAsto["d4-r22"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctPlHou["Sa"].sign == dctDPlHou["Sa"].sign)
				{
					desc = string.Format("{0} {1}", dctAst["Sa"], dctAsto["d4-r22"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctDPlHou[asc_D.Split('|')[2]].hno == 6)
				{
					desc = dctAsto["d4-r25"].Replace("[0]", dctAst[asc_D.Split('|')[2]]);// string.Format("{0} {1} {2} 6th {3}({4})", dctAst["i-yur-d4"], dctAst["ascendant lord"], dctAst[asc_D.Split('|')[2]], dctAst["is in"], dctAst["disputes"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				if (dctDPlHou[houT4.Split('|')[2]].hno == 6)
				{
					desc = dctAsto["d4-r26"].Replace("[0]", dctAst[houT4.Split('|')[2]]);//string.Format("{0} 4th {1} {2} 6th {3}({4})", dctAst["i-yur-d4"], dctAst["house lord"], dctAst[asc_D.Split('|')[2]], dctAst["is in"], dctAst["disputes"]);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
				horo.planetPos = plPos;
				jO = (JsonResult)GetAspects(horo, houT4.Split('|')[0]);
				dctAsp = (Dictionary<int, string>)(jO.Value);
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						if (lrds_asp_4.IndexOf(dctAst[lrd]) == -1)
							lrds_asp_4 += dctAst[lrd] + ",";
					}
				}
				desc = dctAsto["d4-r23"];
				if (lrds_asp_4.Trim() != string.Empty)
				{
					desc = dctAsto["d4-r24"].Replace("[0]", lrds_asp_4).Replace("[1]", lrds_asp_4);
					dctYogs["M-" + (++mky).ToString()] = desc;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("AnalyzeD9")]
		public async Task<ActionResult> AnalyzeD9(string dob, string tob, string latlng, string timezone, string lang, int ayanid)
		{
			_logger.LogInformation("AnalyzeD9");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			try
			{
				string tz = TZConvert.IanaToWindows(timezone);
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return mHoro;
				});
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 9);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou8 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				dctPlNames.Add("su", "Sun");
				dctPlNames.Add("mo", "Moon");
				dctPlNames.Add("ju", "Jupiter");
				dctPlNames.Add("me", "Mercury");
				dctPlNames.Add("ve", "Venus");
				dctPlNames.Add("ma", "Mars");
				dctPlNames.Add("sa", "Saturn");
				dctPlNames.Add("ra", "Rahu");
				dctPlNames.Add("ke", "Ketu");
				Dictionary<string, string> dctFriends = new Dictionary<string, string>();
				dctFriends.Add("Su", "Mo|Ma|Ju");
				dctFriends.Add("Mo", "Su|Me");
				dctFriends.Add("Ma", "Su|Mo|Ju");
				dctFriends.Add("Me", "Su|Ve");
				dctFriends.Add("Ju", "Su|Mo|Ma");
				dctFriends.Add("Ve", "Sa|Me");
				dctFriends.Add("Sa", "Me|Ve");
				dctFriends.Add("Ra", "Ve|Sa");
				dctFriends.Add("Ke", "Ve|Sa");

				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty, asc_pos = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC")
						{
							asn = ppos.Key;
							asc_pos = pl.Split(' ')[0];
						}
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 8) hou8 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
							else
							{
								if (pl.Split(' ')[1] != "Mo" && pl.Split(' ')[1] != "MEAN_NODE" && pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
								}
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				PlanetHouse pHAK = null;
				double amk = 0.0;
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
								if (pHou.pos > amk)
								{
									amk = pHou.pos;
									pHAK = pHou;
								}
							}
						}
					}
				}

				PlanetHouse pH = dctPlHou[hou4.Split('|')[2]];
				//pH = dctDPlHou[pH.houselord];
				PlanetStrength rLS = checkStrength(pH); //10th rashi lord
				rsn = string.Empty;
				ksn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");

				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty, asc_D = string.Empty;
				string houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT5 = string.Empty, houT8 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								asc_D = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 8) houT8 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				string desc = string.Format("<h2>Vargottama Planets</h2>");
				desc += string.Format("<p>When a planet is in the same sign in the birth chart and navamsa,then that planet is called Vargottama planet. It is coined from 2 words, Varga and Uttama. This is the best planet in the entire divisional chart.</p>");
				//analyze vargottamas
				string vgms = string.Empty;
				string vga = string.Empty;
				foreach (var plh in dctPlHou)
				{
					if (dctPlHou[plh.Key].sign == dctDPlHou[plh.Key].sign) //vargottama
					{
						vgms += plh.Value.name;
						if (plh.Value.code == pHAK.code) //atmakaraka is vargottama
						{
							vgms += " is also atmakaraka";
						}
						vgms += ",";
						switch (plh.Value.name.ToUpper())
						{
							case "SUN":
								vga += string.Format("<p>The Sun indicates the soul, authority, will power, ego and self-esteem. Sun as Vargottama in your D9 chart, you will have a lot of will power. There will be a lot of intimations from your side. </p>");
								if (plh.Value.sign == "li")
									vga += string.Format("<span>Due to the Sun is in its debilitation sign Libra. The results can vary, please talk to one of our expert astrologers for much detailed prediction & remedies</span>");
								break;
							case "MOON":
								vga += string.Format("<p>The Moon indicates the emotions, pleasure, nourishment, motherly love and happiness. Moon is the Vargottama planet in your D9 Chart, the qualities indicated by the Moon will be more evident in you.</p>");
								if (plh.Value.sign == "sc")
									vga += string.Format("<span>Due to the Moon is in its debilitation sign Scorpio. The results can vary, please talk to one of our expert astrologers for much detailed prediction & remedies</span>");
								break;
							case "MERCURY":
								vga += string.Format("<p>TThe Mercury indicates communication, technology, media and intelligence. Mercury is Vargottama planet in your D9 Chart, you will display a sharp intellect.</p>");
								if (plh.Value.sign == "pi")
									vga += string.Format("<span>Due to the Mercury is in its debilitation sign Pisces. The results can vary, please talk to one of our expert astrologers for much detailed prediction & remedies</span>");
								break;
							case "VENUS":
								vga += string.Format("<p>The Venus indicates love, luxury, comfort, money, strength and relationships, knowledge of astrology. Venus is Vargottama planet in your D9 Chart. The Venusian qualities will be bright.</p>");
								if (plh.Value.sign == "vi")
									vga += string.Format("<span>Due to the Venus is in its debilitation sign Vergo. The results can vary, please talk to one of our expert astrologers for much detailed prediction & remedies</span>");
								break;
							case "MARS":
								vga += string.Format("<p>The Mars indicates resistance, fighting spirit, valor, and vigor. Mars is Vargottama planet in your D9 Chart.  Martian qualities are good.</p>");
								if (plh.Value.sign == "cn")
									vga += string.Format("<span>Due to the Mars is in its debilitation sign Cancer. The results can vary, will need a lot of training to be under control. The wrong use of any skill can damage your social relations, please talk to one of our expert astrologers for much detailed prediction & remedies</span>");
								break;
							case "JUPITER":
								vga += string.Format("<p>The Jupiter indicates wisdom, higher knowledge, higher studies, spirituality.  Jupiter is Vargottama planet in your D9 Chart. Jupiterian qualities will be very much evident in your life.</p>");
								if (plh.Value.sign == "cp")
									vga += string.Format("<span>Due to the Jupiter is in its debilitation sign Capricorn. The results can vary, please talk to one of our expert astrologers for much detailed prediction & remedies</span>");
								break;
							case "SATURN":
								vga += string.Format("<p>The Saturn indicates hindrance in physical development, longevity, careful, leads life by controlling desires, selfishness, Irresponsible, carelessness and exercises restraints</p>");
								break;
							case "RAHU":
								vga += string.Format("<p>The Rahu is Vargottama in your D9 Chart which indicates rebelliousness, aggression, passion  and mental disposition.</p>");
								break;
							case "KETU":
								vga += string.Format("<p>The Ketu is Vargottama in your D9 Chart which indicates isolation, detachment, spirituality.</p>");
								break;
							default:
								break;
						}
					}
				}
				if (vgms != string.Empty)
				{
					desc += string.Format(" </p>In your D9 chart {0} are vargottama, As per ancient texts if the vargottama planet is aspected by benefic planets a powerful raja yoga is formed.</p>", vgms);
					desc += vga;
				}
				desc += string.Format("<h2>Pushkar Navamsha</h2>");
				desc += string.Format("<p>It is a particular navamsa in a sign where planets behaves in auspicious manner.</p>");
				Dictionary<string, PlanetHouse> dctPushk = new Dictionary<string, PlanetHouse>();
				foreach (var plh in dctPlHou)
				{
					switch (plh.Value.sign)
					{
						case "ar":
							if (plh.Value.pos >= (double)20.0 && plh.Value.pos <= (double)23.20)
							{ //aries pushkar
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)26.40 && plh.Value.pos <= (double)30.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "ta":
							if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)13.20 && plh.Value.pos <= (double)16.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "ge":
							if (plh.Value.pos >= (double)16.40 && plh.Value.pos <= (double)20.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)23.20 && plh.Value.pos <= (double)26.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "cn":
							if (plh.Value.pos >= (double)0.0 && plh.Value.pos <= (double)3.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "le":
							if (plh.Value.pos >= (double)20.0 && plh.Value.pos <= (double)23.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)26.40 && plh.Value.pos <= (double)30.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "vi":
							if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)13.20 && plh.Value.pos <= (double)16.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "li":
							if (plh.Value.pos >= (double)16.40 && plh.Value.pos <= (double)20.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)23.20 && plh.Value.pos <= (double)26.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "sc":
							if (plh.Value.pos >= (double)0.0 && plh.Value.pos <= (double)3.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "sa":
							if (plh.Value.pos >= (double)20.0 && plh.Value.pos <= (double)23.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)26.40 && plh.Value.pos <= (double)30.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "cp":
							if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)13.20 && plh.Value.pos <= (double)16.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "aq":
							if (plh.Value.pos >= (double)16.40 && plh.Value.pos <= (double)20.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)23.20 && plh.Value.pos <= (double)26.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "pi":
							if (plh.Value.pos >= (double)0.0 && plh.Value.pos <= (double)3.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						default:
							break;
					}
				}
				if (dctDPlHou["Ju"].hno == dctDPlHou["Ma"].hno)
				{
					if (dctPushk.ContainsKey("Mo"))
					{
						desc += string.Format("<p>In your D9 Chart Jupiter & Mars conjunct in {0} and Moon is in Pushkar Navamsha which is a powerful combination, according to Jataka Parijata chapter 7 verse 25 a person with such palcememt in horoscope will rule over masses.</p>", dctDPlHou["Ju"].sign);
					}
					else if (vgms.Contains("Mo"))
					{
						desc += string.Format("<p>In your D9 Chart Jupiter & Mars conjunct in {0} and Moon is Vargottama which is a powerful combination, according to Jataka Parijata chapter 7 verse 25 a person with such palcememt in horoscope will rule over masses.</p>", dctDPlHou["Ju"].sign);
					}
				}
				foreach (var psh in dctPushk)
				{
					if (psh.Value.hno == 1)
					{
						desc += string.Format("<p>In your D9 Chart Vargottama {0} is in Ascendant, such placement will give you high success in life</p>", psh.Value.name);
					}
				}
				foreach (var dpl in dctDPlHou)
				{
					if (dpl.Value.hno == 5 || dpl.Value.hno == 9 || dpl.Value.hno == 10)
					{
						if (dctPushk.ContainsKey(dpl.Value.houselord))
						{
							desc += string.Format("<p>In your D9 Chart, {0}th house lord {1} is in Pushkara Navamsha, such a placement will give you good succss in its dasha/bhukthi</p>", dpl.Value.hno, dctPushk[dpl.Value.houselord].name);
						}
					}
					if (dctPushk.ContainsKey("Ju"))
					{
						if ((dpl.Key == "Ju") && (dpl.Value.hno == 1 || dpl.Value.hno == 4 || dpl.Value.hno == 7 || dpl.Value.hno == 10))
						{
							desc += string.Format("<p>In your D9 Chart, Jupiter in Pushkara Navamsha and in Angular house in {0} such a placement makes the native very wealthy.</p>", dpl.Value.sign);
						}
						else if ((dpl.Key == "Ju") && (dpl.Value.hno == 5 || dpl.Value.hno == 9))
						{
							desc += string.Format("<p>In your D9 Chart, Jupiter in Pushkara Navamsha and in Trine house in {0} such a placement makes the native very wealthy.</p>", dpl.Value.sign);
						}
					}
				}
				foreach (var psk in dctPushk)
				{
					if (dctDPlHou.ContainsKey(psk.Key) && (dctDPlHou[psk.Key].hno == 6 || dctDPlHou[psk.Key].hno == 8 || dctDPlHou[psk.Key].hno == 12))
					{
						desc += string.Format("<p>In your D9 Chart, the Pushkara Navamsha Planet {0} placed in dustana {1} house, such a placement may cause in addition the native being wealthy may experience some health issues.</p>", dctDPlHou[psk.Key].name, dctDPlHou[psk.Key].hno);
					}
				}
				double asc_dp = Convert.ToDouble(string.Format("{0}.{1}", asc_pos.Split('.')[0], asc_pos.Split('.')[1]));
				bool asc_pus = false;
				switch (asc_h.Split('|')[0])
				{
					case "ar":
						if (asc_dp >= (double)20.0 && asc_dp <= (double)23.20)
						{ //aries pushkar
							asc_pus = true;
						}
						else if (asc_dp >= (double)26.40 && asc_dp <= (double)30.0)
						{
							asc_pus = true;
						}
						break;
					case "ta":
						if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)13.20 && asc_dp <= (double)16.40)
						{
							asc_pus = true;
						}
						break;
					case "ge":
						if (asc_dp >= (double)16.40 && asc_dp <= (double)20.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)23.20 && asc_dp <= (double)26.40)
						{
							asc_pus = true;
						}
						break;
					case "cn":
						if (asc_dp >= (double)0.0 && asc_dp <= (double)3.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						break;
					case "le":
						if (asc_dp >= (double)20.0 && asc_dp <= (double)23.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)26.40 && asc_dp <= (double)30.0)
						{
							asc_pus = true;
						}
						break;
					case "vi":
						if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)13.20 && asc_dp <= (double)16.40)
						{
							asc_pus = true;
						}
						break;
					case "li":
						if (asc_dp >= (double)16.40 && asc_dp <= (double)20.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)23.20 && asc_dp <= (double)26.40)
						{
							asc_pus = true;
						}
						break;
					case "sc":
						if (asc_dp >= (double)0.0 && asc_dp <= (double)3.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						break;
					case "sa":
						if (asc_dp >= (double)20.0 && asc_dp <= (double)23.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)26.40 && asc_dp <= (double)30.0)
						{
							asc_pus = true;
						}
						break;
					case "cp":
						if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)13.20 && asc_dp <= (double)16.40)
						{
							asc_pus = true;
						}
						break;
					case "aq":
						if (asc_dp >= (double)16.40 && asc_dp <= (double)20.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)23.20 && asc_dp <= (double)26.40)
						{
							asc_pus = true;
						}
						break;
					case "pi":
						if (asc_dp >= (double)0.0 && asc_dp <= (double)3.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						break;
					default:
						break;
				}
				if (dctPushk.ContainsKey(asc_h.Split('|')[2]) && asc_pus && dctPushk.ContainsKey(hou10.Split('|')[2]))
				{//lagna, lagna lord & 10th lord in puskara
					desc += string.Format("<p>The Ascendant Lord {0} & 10th Lord {1} of your Rashi Chart are in Pushkara Navamsa in D9 Chart. Such a placement will make the native very fortunate.</p>", dctPlHou[asc_h.Split('|')[2]].name, dctPlHou[hou10.Split('|')[2]].name);
				}
				else if (dctPushk.ContainsKey(asc_h.Split('|')[2]))
				{
					desc += string.Format("<p>The Ascendant Lord {0} of your Rashi Chart in Pushkara Navamsa, such a placement produces very good results during its Dasha & Bhukti.</p>", dctPlHou[asc_h.Split('|')[2]].name);
				}
				int npk = dctPushk.Count();
				string spk = string.Empty;
				foreach (var puk in dctPushk)
				{
					spk += puk.Value.name + ",";
				}
				if (spk != string.Empty)
				{
					desc += string.Format("<p>In your D9 chart, {0} are in Pushkara Navamsa. You can expect good times during dasha/bhukti of these planet(s).</p>", spk);
				}
				desc += string.Format("<h2>Maritial Happiness</h2>");
				desc += string.Format("<p>By virtue of inherent nature Mars, the planet of vigour and passion, and Venus, the planet of love and conjugal relationship create mutual attraction between the opposite sex. The Moon representing mind (Chandrama manso jatah) shows the inclination, Jupiter blesses the two with the bond of marriage, and Saturn, as lord of 'time; solemnises marriage at an appropriate time. As a restrictive planet, Saturn also inculcates faithfulness, controls amorous digressions, and ensures lasting bond of marriage. The astrological principles discussed in this article apply to both the males and females.</p>");
				desc += string.Format("<p>A person enters Grahastha Ashram, or becomes a house holder, on getting married. It is an important stage of life and every eligible bachelor has high expectations from his marriage and spouse. Although it is said that the marriages are settled in heaven, yet the Vedic science of Astrology unfolds a clear picture about the married life of an individual, whether his expectations will be fulfilled or not.</p>");
				desc += string.Format("<p>For ascertaining marriage prospects of an individual the factors to be examined are primarily the 7th house (marriage), and also 2nd house (family, and longevity of spouse being 8th from 7th house), the 8th house (mangalya, or marital happiness), 4th house( general happiness), the 5th house (love and progeny), 12th house (bed comforts) together with Moon (mind) and Venus, significator for marriage and conjugal bliss (Kalatra Karaka). In the case of girls, Jupiter, significator for husband, is given prime importance. The benefic association or aspect of Jupiter on the 7th house and the 7th lord indicates a virtuous and loyal spouse.</p>");
				Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				JsonResult jO = (JsonResult)GetAspects(horo, dctPlHou[hou7.Split('|')[2]].sign);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool is7ben = false, is7mel = false;
				string mel_pl = string.Empty, ben_pl = string.Empty;
				PlanetStrength pS7L = checkStrength(dctDPlHou[houT7.Split('|')[2]]);
				PlanetStrength pSKVe = checkStrength(dctDPlHou["Ve"]);
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						int ben = isBenefic(dctPlHou[hou7.Split('|')[2]].sign, lrd);
						switch (ben)
						{
							case 1:
								is7ben = true;
								ben_pl += dctPlNames[lrd] + ",";
								break;
							case 2:
								is7mel = true;
								mel_pl += dctPlNames[lrd] + ",";
								break;
							case 0:
								break;
							default:
								break;
						}
					}
				}
				//Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				JsonResult jO8 = (JsonResult)GetAspects(horo, dctPlHou[hou8.Split('|')[2]].sign);
				dctAsp = (Dictionary<int, string>)(jO8.Value);
				bool is8ben = false, is8mel = false;
				bool b7s = false, b8s = false;
				bool b7Le = false, kVe = false;
				mel_pl = string.Empty;
				ben_pl = string.Empty;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						int ben = isBenefic(dctPlHou[hou8.Split('|')[2]].sign, lrd);
						switch (ben)
						{
							case 1:
								is8ben = true;
								ben_pl += dctPlNames[lrd] + ",";
								break;
							case 2:
								is8mel = true;
								mel_pl += dctPlNames[lrd] + ",";
								break;
							case 0:
								break;
							default:
								break;
						}
					}
				}
				PlanetStrength pS7 = checkStrength(dctPlHou[hou7.Split('|')[2]]);
				PlanetStrength pS8 = checkStrength(dctPlHou[hou8.Split('|')[2]]);
				if (pS7L == PlanetStrength.DEBILIATED || pS7L == PlanetStrength.ENEMY) b7Le = true;
				if (pSKVe == PlanetStrength.DEBILIATED || pSKVe == PlanetStrength.ENEMY) kVe = true;
				if (pS7 == PlanetStrength.EXALTED || pS7 == PlanetStrength.MOOLTRIKONA || pS7 == PlanetStrength.OWN || pS7 == PlanetStrength.FRIEND)
				{
					b7s = true;
				}
				if (pS8 == PlanetStrength.EXALTED || pS8 == PlanetStrength.MOOLTRIKONA || pS8 == PlanetStrength.OWN || pS8 == PlanetStrength.FRIEND)
				{
					b8s = true;
				}
				PlanetStrength pSVe = checkStrength(dctPlHou["Ve"]);
				PlanetStrength pSMo = checkStrength(dctPlHou["Mo"]);
				bool bVs = false, bMs = false;
				if (pSVe == PlanetStrength.EXALTED || pSVe == PlanetStrength.MOOLTRIKONA || pSVe == PlanetStrength.OWN || pSVe == PlanetStrength.FRIEND)
				{
					bVs = true;
				}
				if (pSMo == PlanetStrength.EXALTED || pSMo == PlanetStrength.MOOLTRIKONA || pSMo == PlanetStrength.OWN || pSMo == PlanetStrength.FRIEND)
				{
					bMs = true;
				}
				if (is7ben && is8ben && b7s && b8s && bVs && bMs)
				{
					desc += string.Format("<p>In your Rashi Chart 7th lord {0} & 8th lord {1} & the Karaks {2} {3}. And Whereas 7th & 8th house has benefic aspects. Such a placement in horoscope causes the Married life to be very happy & harmonic.</p>", descStrength(dctPlHou[hou7.Split('|')[2]]), descStrength(dctPlHou[hou8.Split('|')[2]]), descStrength(dctPlHou["Ve"]), descStrength(dctPlHou["Mo"]));
				}
				else if (!is7ben && is7mel)
				{
					desc += string.Format("<p>In your Rashi Chart 7th house has malefic aspect, may cause some issues</p>");
				}
				if (pSVe == PlanetStrength.DEBILIATED || pSVe == PlanetStrength.ENEMY)
				{
					desc += string.Format("<p>In your Rashi Chart the Kalatra Karaka(Significator for Marriage & conjugal bliss) {0}, may cause some issues in maritial bliss</p>", descStrength(dctPlHou["Ve"]));
				}
				if (pSMo == PlanetStrength.DEBILIATED || pSMo == PlanetStrength.ENEMY)
				{
					desc += string.Format("<p>In your Rashi Chart the Karak of Mind {0}, may cause some issues</p>", descStrength(dctPlHou["Mo"]));
				}
				desc += string.Format("<h3>Are you Manglik?<h3>");
				desc += string.Format("<p>As per ancient texts, if Mars is positioned in 1st,2nd,4th,7th,8th or 12th in Rashi Chart from both Ascendant & Moon, the native is considered to have Manglik Dosh. A native with Manglik Dosh is said to experince difficulties in the married life.</p>");
				if (dctPlHou["Ma"].hno == 1 || dctPlHou["Ma"].hno == 2 || dctPlHou["Ma"].hno == 4 || dctPlHou["Ma"].hno == 7 || dctPlHou["Ma"].hno == 8 || dctPlHou["Ma"].hno == 12)
				{
					if (dctPlHou["Ma"].mhno == 1 || dctPlHou["Ma"].mhno == 2 || dctPlHou["Ma"].mhno == 4 || dctPlHou["Ma"].mhno == 7 || dctPlHou["Ma"].mhno == 8 || dctPlHou["Ma"].mhno == 12)
					{
						desc += string.Format("<p>In your horoscope Mars is positioned in {0} house from Lagna/Ascendant & in {1} house from Moon such a placement in your horoscope is considered as Manglik Dosha.</p>", dctPlHou["Ma"].hno, dctPlHou["Ma"].mhno);
					}
					else
					{
						desc += string.Format("<p>In your horoscope Mars is positioned in {0} house from Lagna/Ascendant & whereas its position from Moon is away from Manglik effect, hence only a partial Manglik Dosha present in your horoscope.</p>", dctPlHou["Ma"].hno);
					}
				}
				else
				{
					desc += string.Format("<p>In your Rashi Chart Mars is positioned in {0} house which is not among the houses considered to be Manglik. Hence you are free from Manglik Dosh</p>", dctPlHou["Ma"].hno);
				}
				desc += string.Format("<h3>Knowing Your Spouse</h3>");
				if (dctPlHou["Su"].hno == 7)
				{
					desc += string.Format("<p>In your rashi chart Sun is in 7th house which indicates your spouse is from a higher status family, is proud and dominating.</p>");
				}
				if (dctPlHou["Ma"].hno == 7)
				{
					desc += string.Format("<p>In your rashi chart Mars is in 7th house which indicates harsh & cruel spouse.</p>");
				}
				if (dctPlHou["Sa"].hno == 7)
				{
					desc += string.Format("<p>In your rashi chart Saturn is in 7th house such placement would cause the spouse to be morose & undersexed. Marriage is delayed or with a widower or with one not good looking.</p>");
				}
				if (dctPlHou["Ra"].hno == 7)
				{
					desc += string.Format("<p>In your rashi chart Rahu is in 7th house which indicates late marriage, the wife comes from a low family, is sickly and the native has relationship with low caste women.</p>");
				}
				if (dctPlHou["Ke"].hno == 7 && dctPlHou["Ke"].sign != "sc")
				{
					desc += string.Format("<p>In your rashi chart Ketu is in 7th house which indicates some troubles in married life.</p>");
				}
				if (dctPlHou["Me"].hno == 7 || dctPlHou["Mo"].hno == 7)
				{
					bool stongMe = false, stongMo = false;
					if (dctPlHou["Me"].hno == 7)
					{
						PlanetStrength pSM = checkStrength(dctPlHou["Me"]);
						if (pSM == PlanetStrength.EXALTED || pSM == PlanetStrength.MOOLTRIKONA || pSM == PlanetStrength.OWN || pSM == PlanetStrength.FRIEND)
						{
							stongMe = true;
						}
					}
					if (dctPlHou["Mo"].hno == 7)
					{
						PlanetStrength pSM = checkStrength(dctPlHou["Mo"]);
						if (pSM == PlanetStrength.EXALTED || pSM == PlanetStrength.MOOLTRIKONA || pSM == PlanetStrength.OWN || pSM == PlanetStrength.FRIEND)
						{
							stongMo = true;
						}
					}
					if (is7ben || stongMe || stongMo)
					{
						string csts = string.Empty;
						//if(is7ben) {
						if (dctPlHou["Me"].hno == 7 && stongMe)
							csts += descStrength(dctPlHou["Me"]);
						if (dctPlHou["Mo"].hno == 7 && stongMo)
							csts += descStrength(dctPlHou["Mo"]);
						if (is7ben)
							csts += " & 7th house has benefic aspect";
						//}
						desc += string.Format("<p>In your rashi chart {0}, such a placement indicates young beautiful & intelligent spouse.</p>", csts);
					}
					if (dctPlHou["Ve"].hno == 7)
					{
						desc += string.Format("<p>In your rashi chart Venus is in 7th house which indicates handsome but overindulgent spouse.</p>");
					}
					if (dctPlHou["Ju"].hno == 7)
					{
						desc += string.Format("<p>In your rashi chart Jupier is in 7th house which indicates religious & capable spouse.</p>");
					}

					if (b7Le && kVe)
					{
						horo.planetPos = plPos;
						JsonResult jO7 = (JsonResult)GetAspects(horo, dctDPlHou[houT7.Split('|')[2]].sign);
						dctAsp = (Dictionary<int, string>)(jO7.Value);
						bool ben7 = false;
						foreach (var asp in dctAsp)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (isBEN(lrd)) ben7 = true;
							}
						}
						if (dctDPlHou[houT7.Split('|')[2]].sign != dctDPlHou["Ve"].sign)
						{
							jO7 = (JsonResult)GetAspects(horo, dctDPlHou["Ve"].sign);
							dctAsp = (Dictionary<int, string>)(jO7.Value);
							foreach (var asp in dctAsp)
							{
								foreach (var lrd in asp.Value.Split('|'))
								{
									if (isBEN(lrd)) ben7 = true;
								}
							}
						}
						if (!ben7)
							desc += string.Format("<p>In your D9 Chart, the 7th Lord {0} & Karak {1} and is devoid of any benefic association, such a placement in D9 Chart indicates problems in marriage.</p>", descStrength(dctPlHou[houT7.Split('|')[2]]), descStrength(dctDPlHou["Ve"]));
					}
				}

				desc += string.Format("<p>As per Ancient Texts, the placement of 7th lord in D9 Chart gives a clue regarding spouse characteristics</p>");
				PlanetHouse pH7L = dctDPlHou[houT7.Split('|')[2]];
				if (pH7L.hno == 1 && isBEN(pH7L.code) && dctFriends[pH7L.code].Contains(asc_D.Split('|')[2]))
				{
					desc += string.Format("<p>In your D9 Chart, the benefic 7th Lord {0} in 1st House & is friendly to Lagna Lord {1}, such a combinaton indicates the wife comes from known family, is helpful to the native & they are happy</p>", pH7L.name, dctPlNames[asc_D.Split('|')[2]]);
				}
				if (pH7L.hno == 1 && dctDPlHou[asc_D.Split('|')[2]].hno == 1)
				{
					desc += string.Format("<p>In your D9 Chart both 7th Lord {0} && Lagna Lord {1} are in Lagna/Ascendant which indicates early marriage.</p>", pH7L.name, dctPlNames[asc_D.Split('|')[2]]);
				}
				int bn = isBenefic(pH7L.sign, pH7L.code);
				if (pH7L.hno == 7 && bn == 2 && b7Le)
				{
					desc += string.Format("<p>In your D9 Chart, the 7th Lord {0} & is placed in Lagna/Ascendant which indicates danger to first wife, second wife survives.</p>", descStrength(pH7L));
				}
				if (pH7L.hno == 2)
				{
					desc += string.Format("<p>In your D9 Chart, 7th lord {0} in 2nd house which indicate wealthy spouse.</p>", pH7L.name);
					if (b7Le)
					{
						desc += string.Format("<p>But also in your D9 Chart, 7th Lord {0}, which also indicates finacial crunch after marriage, second marriage.</p>", descStrength(pH7L));
					}
				}
				if (pH7L.hno == 3)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 3rd house. Which indicates spouse is a souce of strength to the native.</p>", pH7L.name);
					if (b7Le)
						desc += string.Format("<p>But also 7th lord {0}, which may indicate the wife is attacted towards native's younger brother.", descStrength(pH7L));
				}
				if (pH7L.hno == 4)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 4th house, which indicates the wife is good natured and helpful to the native who becomes prosperous.</p>", pH7L.name);
					if (b7Le)
						desc += string.Format("<p>But also 7th Lord {0}, which may indicate unhappyness to the native.</p>", descStrength(pH7L));
				}
				if (pH7L.hno == 5)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 5th house, which indicates the wife is cultured and religious and begets him many children.</p>", pH7L.name);
					if (b7Le)
						desc += string.Format("<p>But also 7th Lord {0}, which may indicate wife will be cruel & obstinate.</p>", descStrength(pH7L));
				}
				if (pH7L.hno == 6)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 6th house, which indicates the wife is sickly. The native has to spend a lot on his wife and incurs debt. He may also fall sick due to excessive indulgence</p>", pH7L.name);
				}
				if (pH7L.hno == 7)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 7th house, which indicates the native marries early and leads a happy life with a capable wife.</p>", pH7L.name);
					if (b7Le && (bn == 2))
						desc += string.Format("<p>But also 7th Lord {0} and is malefic, which indicates there maybe affairs outside marriage.</p>", descStrength(pH7L));
				}
				if (pH7L.hno == 8)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 8th house, which indicates marriage is delayed, spouse is sickly, married life is unhappy.</p>", pH7L.name);
					bool b8H = isBEN(dctDPlHou[houT8.Split('|')[2]].name);
					bool b8L = isBEN(dctDPlHou[houT8.Split('|')[2]].houselord);
					if (b8H && b8L)
						desc += string.Format("<p>But since 8th house & 8th lord has benefic aspect, the malefic effect is nullified.</p>");
				}
				if (pH7L.hno == 9)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 9th house, which indicates the wife brings luck to the native whose fortune raises after marriage.</p>", pH7L.name);
				}
				if (pH7L.hno == 10)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 10th house, which indicates the wife comes from good background and proves helpful in the natives profession/enterprise or maybe a working lady and of independent nature.</p>", pH7L.name);
				}
				if (pH7L.hno == 11)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 11th house, which indicates the married life will be happy, gains through spouse.</p>", pH7L.name);
				}
				if (pH7L.hno == 12)
				{
					desc += string.Format("<p>In your D9 Chart, 7th Lord {0} is in 12th house, which indicates marriage is delayed, there is a huge expenditure on spouse.</p>", pH7L.name);
					if (b7Le)
						desc += string.Format("<p>But also 7th Lord {0}, which may indicate death of spouse or seperation.</p>", descStrength(pH7L));
				}

				dctYogs.Add("D9A", desc);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		[HttpGet("AnalyzeD9Ex")]
		public async Task<ActionResult> AnalyzeD9Ex(string dob, string tob, string latlng, string timezone, string lang, int ayanid)
		{
			_logger.LogInformation("AnalyzeD9Ex");
			Dictionary<string, string> dctYogs = new Dictionary<string, string>();
			int nvm = 0;
			try
			{
				#region DICT
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);

				#endregion
				#region CALCPLANET
				string tz = TZConvert.IanaToWindows(timezone);
				uint u1 = Convert.ToUInt32(dob.Split('|')[0]);
				uint u2 = Convert.ToUInt32(dob.Split('|')[1]);
				int i3 = Convert.ToInt32(dob.Split('|')[2]);
				uint u4 = Convert.ToUInt32(tob.Split('|')[0]);
				uint u5 = Convert.ToUInt32(tob.Split('|')[1]);
				uint u6 = Convert.ToUInt32(tob.Split('|')[2]);
				double u7 = Convert.ToDouble(latlng.Split('|')[0]);
				double u8 = Convert.ToDouble(latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
				{
					TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx((int)u1, (int)u2, i3, tzofset, (AYANMSAS)ayanid);
				}
				Horoscope mHoro = await Task.Run(() =>
				{
					Horoscope mHoro = new Horoscope();
					mHoro.init_data_ex2(u1, u2, i3, u4, u5, u6, u7, u8, tz, ayan, (uint)ayanid);
					mHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return mHoro;
				});
				JsonResult jOb = (JsonResult)CalcDivChart(mHoro.planetsPos, 9);
				Dictionary<string, string> plPos = (Dictionary<string, string>)(jOb.Value);
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				string[] ras1 = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou8 = string.Empty, hou11 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou7 = string.Empty;
				string fsgn_pls = string.Empty;
				string msgn_pls = string.Empty;
				string dsgn_pls = string.Empty;
				Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, PlanetHouse> dctDPlHou = new Dictionary<string, PlanetHouse>();
				Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				Dictionary<string, string> dctFriends = new Dictionary<string, string>();
				dctFriends.Add("Su", "Mo|Ma|Ju");
				dctFriends.Add("Mo", "Su|Me");
				dctFriends.Add("Ma", "Su|Mo|Ju");
				dctFriends.Add("Me", "Su|Ve");
				dctFriends.Add("Ju", "Su|Mo|Ma");
				dctFriends.Add("Ve", "Sa|Me");
				dctFriends.Add("Sa", "Me|Ve");
				dctFriends.Add("Ra", "Ve|Sa");
				dctFriends.Add("Ke", "Ve|Sa");

				string rsn = string.Empty, asn = string.Empty, ksn = string.Empty, rdeg = string.Empty, asc_pos = string.Empty;
				foreach (var ppos in mHoro.planetsPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC")
						{
							asn = ppos.Key;
							asc_pos = pl.Split(' ')[0];
						}
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				int rpos = calcHno(asn, rsn);
				int kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (mHoro.planetsPos.ContainsKey(ksn))
				{
					var eP = mHoro.planetsPos[ksn];
					mHoro.planetsPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					mHoro.planetsPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				mHoro.planetsPos[rsn] = mHoro.planetsPos[rsn].Replace("MEAN_NODE", "Ra");
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7) hou7 = ras[r1];
					else if (r2 == 8) hou8 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				bool mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								mon_h = ras[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				bool sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
					}
					if (mHoro.planetsPos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								sun_h = ras[r1];
							}
							else
							{
								if (pl.Split(' ')[1] != "Mo" && pl.Split(' ')[1] != "MEAN_NODE" && pl.Split(' ')[1] != "Ke" && pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
								}
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				PlanetHouse pHAK = null;
				double amk = 0.0;
				foreach (string ra in ras)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (mHoro.planetsPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in mHoro.planetsPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctPlHou[pl.Split(' ')[1]] = pHou;
								if (pHou.pos > amk)
								{
									amk = pHou.pos;
									pHAK = pHou;
								}
							}
						}
					}
				}

				PlanetHouse pH = dctPlHou[hou4.Split('|')[2]];
				//pH = dctDPlHou[pH.houselord];
				PlanetStrength rLS = checkStrength(pH); //10th rashi lord
				rsn = string.Empty;
				ksn = string.Empty;
				asn = string.Empty;
				foreach (var ppos in plPos)
				{
					foreach (var pl in ppos.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC") asn = ppos.Key;
						else if (pl.Split(' ')[1] == "MEAN_NODE")
						{
							rsn = ppos.Key;
							rdeg = pl.Split(' ')[0];
						}
						if (rsn != string.Empty && asn != string.Empty) break;
					}
					if (rsn != string.Empty && asn != string.Empty) break;
				}
				r1 = 0;
				r2 = 0;
				asc = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc) r2++;
					if (ras[r1].Split('|')[0].Trim() == rsn)
					{
						asc = true;
						r2++;
					}
					if (r2 == 7)
					{
						ksn = ras[r1].Split('|')[0];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				rpos = calcHno(asn, rsn);
				kpos = calcHno(rsn, ksn);
				//var mn = i + 11;
				//if (mn > 15) mn -= 15;
				if (plPos.ContainsKey(ksn))
				{
					var eP = plPos[ksn];
					plPos[ksn] = string.Format("{0}|{1} Ke", eP, rdeg);
				}
				else
				{
					plPos[ksn] = string.Format("{0} Ke", rdeg);
				}
				// plPos[sign] = ePls;
				plPos[rsn] = plPos[rsn].Replace("MEAN_NODE", "Ra");

				r1 = 0; r2 = 0;
				asc = false;
				string houT12 = string.Empty, asc_D = string.Empty;
				string houT4 = string.Empty, houT9 = string.Empty, houT10 = string.Empty, houT5 = string.Empty, houT8 = string.Empty, houT6 = string.Empty, houT2 = string.Empty, houT7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								asc_D = ras1[r1];
							}
						}
					}
					if (r2 == 2) houT2 = ras1[r1];
					else if (r2 == 4) houT4 = ras1[r1];
					else if (r2 == 5) houT5 = ras1[r1];
					else if (r2 == 6) houT6 = ras1[r1];
					else if (r2 == 7) houT7 = ras1[r1];
					else if (r2 == 8) houT8 = ras1[r1];
					else if (r2 == 9) houT9 = ras[r1];
					else if (r2 == 10) houT10 = ras1[r1];
					else if (r2 == 12)
					{
						houT12 = ras1[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				r1 = 0;
				r2 = 0;
				mon = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (mon)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Mo")
							{
								mon = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								mon_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
					if (r2 == 12) break;
				}
				r1 = 0;
				r2 = 0;
				sun = false;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (r2 == 12) break;
					if (sun)
					{
						r2++;
						ras1[r1] += "|" + (r2).ToString();
					}
					if (plPos.ContainsKey(ras1[r1].Split('|')[0]))
					{
						foreach (string pl in plPos[ras1[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "Su")
							{
								sun = true;
								r2++;
								ras1[r1] += "|" + (r2).ToString();
								sun_h = ras1[r1];
							}
						}
					}
					if (r1 == 11) r1 = -1;
				}
				foreach (string ra in ras1)
				{
					bool bpl = false;
					string pkey = string.Empty;
					if (plPos.ContainsKey(ra.Split('|')[0]))
					{
						foreach (string pl in plPos[ra.Split('|')[0]].Split('|'))
						{
							int hno = Convert.ToInt32(ra.Split('|')[3]);
							string lordship = string.Empty;
							switch (hno)
							{
								case 1:
									lordship = "BOTH";
									break;
								case 5:
								case 9:
									lordship = "TRI";
									break;
								case 4:
								case 7:
								case 10:
									lordship = "KEN";
									break;
								default:
									break;
							}
							if (ra.Split('|')[1] == "F")
							{
								fsgn_pls = pl.Split(' ')[1] + "|";
							}
							else if (ra.Split('|')[1] == "M")
							{
								msgn_pls = pl.Split(' ')[1] + "|";
							}
							else
							{
								dsgn_pls = pl.Split(' ')[1] + "|";
							}
							if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
							{  //consider only true  
								string[] pld = pl.Split(' ')[0].Split('.');
								PlanetHouse pHou = new PlanetHouse
								{
									code = pl.Split(' ')[1],
									name = dctPlNames[pl.Split(' ')[1]],
									hno = Convert.ToInt32(ra.Split('|')[3]),
									mhno = Convert.ToInt32(ra.Split('|')[4]),
									shno = Convert.ToInt32(ra.Split('|')[5]),
									pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
									sign = ra.Split('|')[0],
									signtype = ra.Split('|')[1],
									lordship = lordship,
									houselord = ra.Split('|')[2]
								};
								dctDPlHou[pl.Split(' ')[1]] = pHou;
							}
						}
					}
				}
				#endregion
				string desc = dctAsto["d9-r1"];
				dctYogs["Vargottama Planets"] = desc;
				//analyze vargottamas
				string vgms = string.Empty;
				string vga = string.Empty;
				//string akpls = string.Empty;
				foreach (var plh in dctPlHou)
				{
					if (dctPlHou[plh.Key].sign == dctDPlHou[plh.Key].sign) //vargottama
					{
						vgms += plh.Value.name + ",";
						//if (plh.Value.code == pHAK.code) //atmakaraka is vargottama
						//{
						//	akpls += plh.Value.code;
						//}
						//vgms += ",";
						switch (plh.Value.name.ToUpper())
						{
							case "SUN":
								vga += dctAsto["d9-r4"];
								if (plh.Value.sign == "li")
									vga += dctAsto["d9-r5"];
								break;
							case "MOON":
								vga += dctAsto["d9-r6"];
								if (plh.Value.sign == "sc")
									vga += dctAsto["d9-r7"];
								break;
							case "MERCURY":
								vga += dctAsto["d9-r8"];
								if (plh.Value.sign == "pi")
									vga += dctAsto["d9-r9"];
								break;
							case "VENUS":
								vga += dctAsto["d9-r10"];
								if (plh.Value.sign == "vi")
									vga += dctAsto["d9-r11"];
								break;
							case "MARS":
								vga += dctAsto["d9-r12"];
								if (plh.Value.sign == "cn")
									vga += dctAsto["d9-r13"];
								break;
							case "JUPITER":
								vga += dctAsto["d9-r14"];
								if (plh.Value.sign == "cp")
									vga += dctAsto["d9-r15"];
								break;
							case "SATURN":
								vga += dctAsto["d9-r16"];
								break;
							case "RAHU":
								vga += dctAsto["d9-r17"];
								break;
							case "KETU":
								vga += dctAsto["d9-r18"];
								break;
							default:
								break;
						}
					}
				}
				if (vgms != string.Empty)
				{
					if (vgms.TrimEnd(',').Contains(',')) desc = dctAsto["d9-r2"].Replace("[0]", vgms.TrimEnd(',')); else desc = dctAsto["d9-r3"].Replace("[0]", vgms.TrimEnd(','));
					//desc = string.Format("In your D9 chart {0} are vargottama, As per ancient texts if the vargottama planet is aspected by benefic planets a powerful raja yoga is formed.", vgms);
					desc += vga;
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				//desc += string.Format("<h2>Pushkar Navamsha</h2>");
				desc = dctAsto["d9-r19"];
				dctYogs["Pushkar Navamsha"] = desc;

				Dictionary<string, PlanetHouse> dctPushk = new Dictionary<string, PlanetHouse>();
				foreach (var plh in dctPlHou)
				{
					switch (plh.Value.sign)
					{
						case "ar":
							if (plh.Value.pos >= (double)20.0 && plh.Value.pos <= (double)23.20)
							{ //aries pushkar
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)26.40 && plh.Value.pos <= (double)30.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "ta":
							if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)13.20 && plh.Value.pos <= (double)16.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "ge":
							if (plh.Value.pos >= (double)16.40 && plh.Value.pos <= (double)20.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)23.20 && plh.Value.pos <= (double)26.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "cn":
							if (plh.Value.pos >= (double)0.0 && plh.Value.pos <= (double)3.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "le":
							if (plh.Value.pos >= (double)20.0 && plh.Value.pos <= (double)23.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)26.40 && plh.Value.pos <= (double)30.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "vi":
							if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)13.20 && plh.Value.pos <= (double)16.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "li":
							if (plh.Value.pos >= (double)16.40 && plh.Value.pos <= (double)20.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)23.20 && plh.Value.pos <= (double)26.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "sc":
							if (plh.Value.pos >= (double)0.0 && plh.Value.pos <= (double)3.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "sa":
							if (plh.Value.pos >= (double)20.0 && plh.Value.pos <= (double)23.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)26.40 && plh.Value.pos <= (double)30.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "cp":
							if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)13.20 && plh.Value.pos <= (double)16.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "aq":
							if (plh.Value.pos >= (double)16.40 && plh.Value.pos <= (double)20.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)23.20 && plh.Value.pos <= (double)26.40)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						case "pi":
							if (plh.Value.pos >= (double)0.0 && plh.Value.pos <= (double)3.20)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							else if (plh.Value.pos >= (double)6.40 && plh.Value.pos <= (double)10.0)
							{
								dctPushk.Add(plh.Key, plh.Value);
							}
							break;
						default:
							break;
					}
				}
				if (dctDPlHou["Ju"].hno == dctDPlHou["Ma"].hno)
				{
					if (dctPushk.ContainsKey("Mo"))
					{
						desc = dctAsto["d9-r20"].Replace("[0]", dctAst[dctDPlHou["Ju"].sign.ToLower()]);
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
					else if (vgms.Contains("Mo"))
					{
						desc = dctAsto["d9-r21"].Replace("[0]", dctAst[dctDPlHou["Ju"].sign.ToLower()]);
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				foreach (var psh in dctPushk)
				{
					if (psh.Value.hno == 1)
					{
						desc = dctAsto["d9-r22"].Replace("[0]", psh.Value.name);
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				foreach (var dpl in dctDPlHou)
				{
					if (dpl.Value.hno == 5 || dpl.Value.hno == 9 || dpl.Value.hno == 10)
					{
						if (dctPushk.ContainsKey(dpl.Value.houselord))
						{
							desc = dctAsto["d9-r23"].Replace("[0]", dpl.Value.hno.ToString()).Replace("[1]", dctAst[dctPushk[dpl.Value.houselord].name.ToLower()]);
							dctYogs["N-" + (++nvm).ToString()] = desc;
						}
					}
					if (dctPushk.ContainsKey("Ju"))
					{
						if ((dpl.Key == "Ju") && (dpl.Value.hno == 1 || dpl.Value.hno == 4 || dpl.Value.hno == 7 || dpl.Value.hno == 10))
						{
							desc = dctAsto["d9-r24"].Replace("[0]", dctAst[dpl.Value.sign.ToLower()]);
							dctYogs["N-" + (++nvm).ToString()] = desc;
						}
						else if ((dpl.Key == "Ju") && (dpl.Value.hno == 5 || dpl.Value.hno == 9))
						{
							desc = dctAsto["d9-r25"].Replace("[0]", dctAst[dpl.Value.sign.ToLower()]);
							dctYogs["N-" + (++nvm).ToString()] = desc;
						}
					}
				}
				foreach (var psk in dctPushk)
				{
					if (dctDPlHou.ContainsKey(psk.Key) && (dctDPlHou[psk.Key].hno == 6 || dctDPlHou[psk.Key].hno == 8 || dctDPlHou[psk.Key].hno == 12))
					{
						desc = dctAsto["d9-r26"].Replace("[0]", dctAst[dctDPlHou[psk.Key].name.ToLower()]).Replace("[1]", dctDPlHou[psk.Key].hno.ToString());
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				double asc_dp = Convert.ToDouble(string.Format("{0}.{1}", asc_pos.Split('.')[0], asc_pos.Split('.')[1]));
				bool asc_pus = false;
				switch (asc_h.Split('|')[0])
				{
					case "ar":
						if (asc_dp >= (double)20.0 && asc_dp <= (double)23.20)
						{ //aries pushkar
							asc_pus = true;
						}
						else if (asc_dp >= (double)26.40 && asc_dp <= (double)30.0)
						{
							asc_pus = true;
						}
						break;
					case "ta":
						if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)13.20 && asc_dp <= (double)16.40)
						{
							asc_pus = true;
						}
						break;
					case "ge":
						if (asc_dp >= (double)16.40 && asc_dp <= (double)20.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)23.20 && asc_dp <= (double)26.40)
						{
							asc_pus = true;
						}
						break;
					case "cn":
						if (asc_dp >= (double)0.0 && asc_dp <= (double)3.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						break;
					case "le":
						if (asc_dp >= (double)20.0 && asc_dp <= (double)23.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)26.40 && asc_dp <= (double)30.0)
						{
							asc_pus = true;
						}
						break;
					case "vi":
						if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)13.20 && asc_dp <= (double)16.40)
						{
							asc_pus = true;
						}
						break;
					case "li":
						if (asc_dp >= (double)16.40 && asc_dp <= (double)20.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)23.20 && asc_dp <= (double)26.40)
						{
							asc_pus = true;
						}
						break;
					case "sc":
						if (asc_dp >= (double)0.0 && asc_dp <= (double)3.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						break;
					case "sa":
						if (asc_dp >= (double)20.0 && asc_dp <= (double)23.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)26.40 && asc_dp <= (double)30.0)
						{
							asc_pus = true;
						}
						break;
					case "cp":
						if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)13.20 && asc_dp <= (double)16.40)
						{
							asc_pus = true;
						}
						break;
					case "aq":
						if (asc_dp >= (double)16.40 && asc_dp <= (double)20.0)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)23.20 && asc_dp <= (double)26.40)
						{
							asc_pus = true;
						}
						break;
					case "pi":
						if (asc_dp >= (double)0.0 && asc_dp <= (double)3.20)
						{
							asc_pus = true;
						}
						else if (asc_dp >= (double)6.40 && asc_dp <= (double)10.0)
						{
							asc_pus = true;
						}
						break;
					default:
						break;
				}
				if (dctPushk.ContainsKey(asc_h.Split('|')[2]) && asc_pus && dctPushk.ContainsKey(hou10.Split('|')[2]))
				{//lagna, lagna lord & 10th lord in puskara
					desc = dctAsto["d9-r27"].Replace("[0]", dctAst[dctPlHou[asc_h.Split('|')[2]].name.ToLower()]).Replace("[1]", dctAst[dctPlHou[hou10.Split('|')[2]].name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				//else if (dctPushk.ContainsKey(asc_h.Split('|')[2]))
				//{
				//	desc = dctAsto["d9-r27"].Replace("[0]", dctAst[dctPlHou[asc_h.Split('|')[2]].name.ToLower()]);
				//	dctYogs["N-" + (++nvm).ToString()] = desc;
				//}
				int npk = dctPushk.Count();
				string spk = string.Empty;
				foreach (var puk in dctPushk)
				{
					spk += dctAst[puk.Value.name.ToLower()] + ",";
				}
				if (spk != string.Empty)
				{
					desc = dctAsto["d9-r28"].Replace("[0]", spk);
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				//desc = string.Format("By virtue of inherent nature Mars, the planet of vigour and passion, and Venus, the planet of love and conjugal relationship create mutual attraction between the opposite sex. The Moon representing mind (Chandrama manso jatah) shows the inclination, Jupiter blesses the two with the bond of marriage, and Saturn, as lord of 'time; solemnises marriage at an appropriate time. As a restrictive planet, Saturn also inculcates faithfulness, controls amorous digressions, and ensures lasting bond of marriage. The astrological principles discussed in this article apply to both the males and females.");
				//desc += string.Format("A person enters Grahastha Ashram, or becomes a house holder, on getting married. It is an important stage of life and every eligible bachelor has high expectations from his marriage and spouse. Although it is said that the marriages are settled in heaven, yet the Vedic science of Astrology unfolds a clear picture about the married life of an individual, whether his expectations will be fulfilled or not.");
				//desc += string.Format("For ascertaining marriage prospects of an individual the factors to be examined are primarily the 7th house (marriage), and also 2nd house (family, and longevity of spouse being 8th from 7th house), the 8th house (mangalya, or marital happiness), 4th house( general happiness), the 5th house (love and progeny), 12th house (bed comforts) together with Moon (mind) and Venus, significator for marriage and conjugal bliss (Kalatra Karaka). In the case of girls, Jupiter, significator for husband, is given prime importance. The benefic association or aspect of Jupiter on the 7th house and the 7th lord indicates a virtuous and loyal spouse.");
				Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				JsonResult jO = (JsonResult)GetAspects(horo, dctPlHou[hou7.Split('|')[2]].sign);
				Dictionary<int, string> dctAsp = (Dictionary<int, string>)(jO.Value);
				bool is7ben = false, is7mel = false;
				string mel_pl = string.Empty, ben_pl = string.Empty;
				PlanetStrength pS7L = checkStrength(dctDPlHou[houT7.Split('|')[2]]);
				PlanetStrength pSKVe = checkStrength(dctDPlHou["Ve"]);
				string mblz = string.Empty;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						int ben = isBenefic(dctPlHou[hou7.Split('|')[2]].sign, lrd);
						switch (ben)
						{
							case 1:
								is7ben = true;
								ben_pl += dctPlNames[lrd] + ",";
								break;
							case 2:
								is7mel = true;
								mel_pl += dctPlNames[lrd] + ",";
								break;
							case 0:
								break;
							default:
								break;
						}
					}
				}
				//Horo horo = new Horo();
				horo.planetPos = mHoro.planetsPos;
				JsonResult jO8 = (JsonResult)GetAspects(horo, dctPlHou[hou8.Split('|')[2]].sign);
				dctAsp = (Dictionary<int, string>)(jO8.Value);
				bool is8ben = false, is8mel = false;
				bool b7s = false, b8s = false;
				bool b7Le = false, kVe = false;
				mel_pl = string.Empty;
				ben_pl = string.Empty;
				foreach (var asp in dctAsp)
				{
					foreach (var lrd in asp.Value.Split('|'))
					{
						int ben = isBenefic(dctPlHou[hou8.Split('|')[2]].sign, lrd);
						switch (ben)
						{
							case 1:
								is8ben = true;
								ben_pl += dctPlNames[lrd] + ",";
								break;
							case 2:
								is8mel = true;
								mel_pl += dctPlNames[lrd] + ",";
								break;
							case 0:
								break;
							default:
								break;
						}
					}
				}
				PlanetStrength pS7 = checkStrength(dctPlHou[hou7.Split('|')[2]]);
				PlanetStrength pS8 = checkStrength(dctPlHou[hou8.Split('|')[2]]);
				if (pS7L == PlanetStrength.DEBILIATED || pS7L == PlanetStrength.ENEMY) b7Le = true;
				if (pSKVe == PlanetStrength.DEBILIATED || pSKVe == PlanetStrength.ENEMY) kVe = true;
				if (pS7 == PlanetStrength.EXALTED || pS7 == PlanetStrength.MOOLTRIKONA || pS7 == PlanetStrength.OWN || pS7 == PlanetStrength.FRIEND)
				{
					b7s = true;
				}
				if (pS8 == PlanetStrength.EXALTED || pS8 == PlanetStrength.MOOLTRIKONA || pS8 == PlanetStrength.OWN || pS8 == PlanetStrength.FRIEND)
				{
					b8s = true;
				}
				PlanetStrength pSVe = checkStrength(dctPlHou["Ve"]);
				PlanetStrength pSMo = checkStrength(dctPlHou["Mo"]);
				bool bVs = false, bMs = false;
				if (pSVe == PlanetStrength.EXALTED || pSVe == PlanetStrength.MOOLTRIKONA || pSVe == PlanetStrength.OWN || pSVe == PlanetStrength.FRIEND)
				{
					bVs = true;
				}
				if (pSMo == PlanetStrength.EXALTED || pSMo == PlanetStrength.MOOLTRIKONA || pSMo == PlanetStrength.OWN || pSMo == PlanetStrength.FRIEND)
				{
					bMs = true;
				}
				if (is7ben && is8ben && b7s && b8s && bVs && bMs)
				{
					desc = dctAsto["d9-r29"].Replace("[0]", descStrength(dctPlHou[hou7.Split('|')[2]], dctAst, lang)).Replace("[1]", descStrength(dctPlHou[hou8.Split('|')[2]], dctAst, lang)).Replace("[2]", descStrength(dctPlHou["Ve"], dctAst, lang)).Replace("[3]", descStrength(dctPlHou["Mo"], dctAst, lang));
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				else if (!is7ben && is7mel)
				{
					desc = dctAsto["d9-r30"];
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (pSVe == PlanetStrength.DEBILIATED || pSVe == PlanetStrength.ENEMY)
				{
					desc = dctAsto["d9-r31"].Replace("[0]", descStrength(dctPlHou["Ve"], dctAst, lang));
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (pSMo == PlanetStrength.DEBILIATED || pSMo == PlanetStrength.ENEMY)
				{
					desc = dctAsto["d9-r32"].Replace("[0]", descStrength(dctPlHou["Mo"], dctAst, lang));
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				//desc += string.Format("<h3>Are you Manglik?<h3>");
				desc = dctAsto["d9-r33"];
				dctYogs["are you manglik"] = desc;
				if (dctPlHou["Ma"].hno == 1 || dctPlHou["Ma"].hno == 2 || dctPlHou["Ma"].hno == 4 || dctPlHou["Ma"].hno == 7 || dctPlHou["Ma"].hno == 8 || dctPlHou["Ma"].hno == 12)
				{
					if (dctPlHou["Ma"].mhno == 1 || dctPlHou["Ma"].mhno == 2 || dctPlHou["Ma"].mhno == 4 || dctPlHou["Ma"].mhno == 7 || dctPlHou["Ma"].mhno == 8 || dctPlHou["Ma"].mhno == 12)
					{
						desc = dctAsto["d9-r35"].Replace("[0]", dctPlHou["Ma"].hno.ToString()).Replace("[1]", dctPlHou["Ma"].mhno.ToString());
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
					else
					{
						desc = dctAsto["d9-r36"].Replace("[0]", dctPlHou["Ma"].hno.ToString());
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				else
				{
					desc = dctAsto["d9-r37"].Replace("[0]", dctPlHou["Ma"].hno.ToString());
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				//desc += string.Format("<h3>Knowing Your Spouse</h3>");
				dctYogs["N-" + (++nvm).ToString()] = dctAsto["d9-r38"];
				if (dctPlHou["Su"].hno == 7)
				{
					desc = dctAsto["d9-r39"];
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (dctPlHou["Ma"].hno == 7)
				{
					desc = dctAsto["d9-r40"];
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (dctPlHou["Sa"].hno == 7)
				{
					desc = dctAsto["d9-r41"];
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (dctPlHou["Ra"].hno == 7)
				{
					desc = dctAsto["d9-r42"];
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (dctPlHou["Ke"].hno == 7 && dctPlHou["Ke"].sign != "sc")
				{
					desc = dctAsto["d9-r43"];
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (dctPlHou["Me"].hno == 7 || dctPlHou["Mo"].hno == 7)
				{
					bool stongMe = false, stongMo = false;
					if (dctPlHou["Me"].hno == 7)
					{
						PlanetStrength pSM = checkStrength(dctPlHou["Me"]);
						if (pSM == PlanetStrength.EXALTED || pSM == PlanetStrength.MOOLTRIKONA || pSM == PlanetStrength.OWN || pSM == PlanetStrength.FRIEND)
						{
							stongMe = true;
						}
					}
					if (dctPlHou["Mo"].hno == 7)
					{
						PlanetStrength pSM = checkStrength(dctPlHou["Mo"]);
						if (pSM == PlanetStrength.EXALTED || pSM == PlanetStrength.MOOLTRIKONA || pSM == PlanetStrength.OWN || pSM == PlanetStrength.FRIEND)
						{
							stongMo = true;
						}
					}
					if (is7ben || stongMe || stongMo)
					{
						string csts = string.Empty;
						//if(is7ben) {
						if (dctPlHou["Me"].hno == 7 && stongMe)
							csts += descStrength(dctPlHou["Me"], dctAst, lang);
						if (dctPlHou["Mo"].hno == 7 && stongMo)
							csts += descStrength(dctPlHou["Mo"], dctAst, lang);
						if (is7ben)
							csts += string.Format(" & 7th {0} having {1} {2}", dctAst["house"], dctAst["benefic"], dctAst["aspect"]);
						//}
						desc = dctAsto["d9-r44"].Replace("[0]", csts);
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
					if (dctPlHou["Ve"].hno == 7)
					{
						desc = dctAsto["d9-r45"];
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
					if (dctPlHou["Ju"].hno == 7)
					{
						desc = dctAsto["d9-r46"];
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}

					if (b7Le && kVe)
					{
						horo.planetPos = plPos;
						JsonResult jO7 = (JsonResult)GetAspects(horo, dctDPlHou[houT7.Split('|')[2]].sign);
						dctAsp = (Dictionary<int, string>)(jO7.Value);
						bool ben7 = false;
						foreach (var asp in dctAsp)
						{
							foreach (var lrd in asp.Value.Split('|'))
							{
								if (isBEN(lrd)) ben7 = true;
							}
						}
						if (dctDPlHou[houT7.Split('|')[2]].sign != dctDPlHou["Ve"].sign)
						{
							jO7 = (JsonResult)GetAspects(horo, dctDPlHou["Ve"].sign);
							dctAsp = (Dictionary<int, string>)(jO7.Value);
							foreach (var asp in dctAsp)
							{
								foreach (var lrd in asp.Value.Split('|'))
								{
									if (isBEN(lrd)) ben7 = true;
								}
							}
						}
						if (!ben7)
						{
							desc = dctAsto["d9-r47"].Replace("[0]", descStrength(dctPlHou[houT7.Split('|')[2]], dctAst, lang)).Replace("[1]", descStrength(dctDPlHou["Ve"], dctAst, lang));
							dctYogs["N-" + (++nvm).ToString()] = desc;
						}
					}
				}

				dctYogs["N-" + (++nvm).ToString()] = desc;
				PlanetHouse pH7L = dctDPlHou[houT7.Split('|')[2]];
				if (pH7L.hno == 1 && isBEN(pH7L.code) && dctFriends[pH7L.code].Contains(asc_D.Split('|')[2]))
				{
					desc = dctAsto["d9-r48"].Replace("[0]", pH7L.name).Replace("[1]", dctPlNames[asc_D.Split('|')[2]]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (pH7L.hno == 1 && dctDPlHou[asc_D.Split('|')[2]].hno == 1)
				{
					desc = dctAsto["d9-r49"].Replace("[0]", dctAst[pH7L.name.ToLower()]).Replace("[1]", dctAst[asc_D.Split('|')[2]]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				int bn = isBenefic(pH7L.sign, pH7L.code);
				if (pH7L.hno == 7 && bn == 2 && b7Le)
				{
					desc = dctAsto["d9-r50"].Replace("[0]", descStrength(pH7L, dctAst, lang));
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (pH7L.hno == 2)
				{
					desc = dctAsto["d9-r51"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
					if (b7Le)
					{
						desc = dctAsto["d9-r52"].Replace("[0]", descStrength(pH7L, dctAst, lang));
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				if (pH7L.hno == 3)
				{
					desc = dctAsto["d9-r53"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
					if (b7Le)
					{
						desc = dctAsto["d9-r54"].Replace("[0]", descStrength(pH7L));
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				if (pH7L.hno == 4)
				{
					desc = dctAsto["d9-r55"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
					if (b7Le)
					{
						desc = dctAsto["d9-r56"].Replace("[0]", descStrength(pH7L, dctAst, lang));
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				if (pH7L.hno == 5)
				{
					desc = dctAsto["d9-r57"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
					if (b7Le)
					{
						desc = dctAsto["d9-r58"].Replace("[0]", descStrength(pH7L, dctAst, lang));
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				if (pH7L.hno == 6)
				{
					desc = dctAsto["d9-r59"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (pH7L.hno == 7)
				{
					desc = dctAsto["d9-r60"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
					if (b7Le && (bn == 2))
					{
						desc = dctAsto["d9-r61"].Replace("[0]", descStrength(pH7L, dctAst, lang));
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				if (pH7L.hno == 8)
				{
					desc = dctAsto["d9-r62"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
					bool b8H = isBEN(dctDPlHou[houT8.Split('|')[2]].name);
					bool b8L = isBEN(dctDPlHou[houT8.Split('|')[2]].houselord);
					if (b8H && b8L)
					{
						desc = dctAsto["d9-r63"];
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
				if (pH7L.hno == 9)
				{
					desc = dctAsto["d9-r64"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (pH7L.hno == 10)
				{
					desc = dctAsto["d9-r65"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (pH7L.hno == 11)
				{
					desc = dctAsto["d9-r66"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
				}
				if (pH7L.hno == 12)
				{
					desc = dctAsto["d9-r67"].Replace("[0]", dctAst[pH7L.name.ToLower()]);
					dctYogs["N-" + (++nvm).ToString()] = desc;
					if (b7Le)
					{
						desc = descStrength(pH7L, dctAst, lang);
						dctYogs["N-" + (++nvm).ToString()] = desc;
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				// return Json(string.Format("ERROR: {0} LINE {1}", eX.Message, line), JsonRequestBehavior.AllowGet);

				dctYogs.Add("ERROR", string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
			return new JsonResult(dctYogs);
		}
		string descStrength(PlanetHouse pl)
		{
			string desc = string.Empty;
			//bool strong_asc = false;
			PlanetStrength pS = PlanetStrength.NORMAL;
			switch (pl.code)
			{
				case "Su":
					if (pl.sign == "ar")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "le")
					{
						if (pl.pos >= 4 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "le")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "cn" || pl.sign == "ar" || pl.sign == "sa" || pl.sign == "sc")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "cp" || pl.sign == "aq") pS = PlanetStrength.ENEMY;
					else if (pl.sign == "li") pS = PlanetStrength.DEBILIATED;
					break;
				case "Mo":
					if (pl.sign == "ta")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += "Moon is positioned in its exalted sign which is excellent!";
					}
					else if (pl.sign == "ta")
					{
						if (pl.pos >= 4 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += "Moon is positioned in its mooltrikona sign which is excellent!";
						}
						else
						{
							desc += "Moon is positioned in its own sign which is excellent!";
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "cn")
					{//own
						pS = PlanetStrength.OWN;
						desc += "Moon is positioned in its own sign which is very good!";
					}
					else if (pl.sign == "le" || pl.sign == "ar" || pl.sign == "sc" || pl.sign == "sa" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += "Moon is positioned in its friendly sign which is good!";
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "ge" || pl.sign == "vi" || pl.sign == "sa" || pl.sign == "aq")
					{//enemy house
						pS = PlanetStrength.ENEMY;
						desc += "Moon is positioned in its emeny sign, may require astrological measure, please check with one of our expert astrologers";
					}
					else if (pl.sign == "sc")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += "Moon is positioned in its debiliated sign, may require astrological measure, please check with one of our expert astrologers";
					}
					break;
				case "Ju":
					if (pl.sign == "cn")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += "Jupiter is positioned in its exalted sign which is excellent!";
					}
					else if (pl.sign == "sa")
					{//own
						if (pl.pos >= 0 && pl.pos <= 10)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += "Jupiter is positioned in its mooltrikona sign which is excellent!";
						}
						else
						{
							desc += "Jupiter is positioned in its own sign which is excellent!";
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "pi")
					{//own
						pS = PlanetStrength.OWN;
						desc += "Jupiter is positioned in its own sign which is very good!";
					}
					else if (pl.sign == "le" || pl.sign == "sc" || pl.sign == "ar")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += "Jupiter is positioned in its friendly sign which is good!";
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "ta" || pl.sign == "li")
					{
						pS = PlanetStrength.ENEMY;
						desc += "Jupiter is positioned in its emeny sign, may require astrological measure, please check with one of our expert astrologers";
					}
					else if (pl.sign == "cp")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += "Jupiter is positioned in its debiliated sign, may require astrological measure, please check with one of our expert astrologers";
					}
					if (pS == PlanetStrength.EXALTED || pS == PlanetStrength.MOOLTRIKONA || pS == PlanetStrength.OWN)
					{
						desc += " Native is very lucky.";
					}
					break;
				case "Ve":
					if (pl.sign == "pi")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += "Venus is positioned in its exalted sign which is excellent!";
					}
					else if (pl.sign == "li")
					{//own
						if (pl.pos >= 0 && pl.pos <= 15)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += "Venus is positioned in its mooltrikona sign which is excellent!";
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += "Venus is positioned in its own sign which is excellent!";
						}
					}
					else if (pl.sign == "ta")
					{//own
						pS = PlanetStrength.OWN;
						desc += "Venus is positioned in its own sign which is very good!";
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "cp" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += "Venus is positioned in its friendly sign which is good.";
					}
					else if (pl.sign == "le" || pl.sign == "ta" || pl.sign == "li")
					{
						pS = PlanetStrength.ENEMY;
						desc += "Venus is positioned in its enemy sign, may require astrological measure, please check with one of our expert astrologers";
					}
					else if (pl.sign == "sc")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += "Venus is positioned in its debiliated sign, may require astrological measure, please check with one of our expert astrologers";
					}
					break;
				case "Ma":
					if (pl.sign == "cp")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "ar")
					{//own
						if (pl.pos >= 0 && pl.pos <= 12)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "sc")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "cp" || pl.sign == "aq") pS = PlanetStrength.ENEMY;
					else if (pl.sign == "le" || pl.sign == "cn" || pl.sign == "sa" || pl.sign == "pi")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					break;
				case "Me":
					if (pl.sign == "vi")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += "Mercury is positioned in its exalted sign which is excellent!";
					}
					else if (pl.sign == "vi")
					{//own
						if (pl.pos >= 16 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += "Mercury is positioned in its mooltrikona sign which is excellent!";
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += "Mercury is positioned in its own sign which is excellent!";
						}
					}
					else if (pl.sign == "ge")
					{//own
						pS = PlanetStrength.OWN;
						desc += "Mercury is positioned in its own sign which is excellent!";
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "cp" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "sa" || pl.sign == "pi" || pl.sign == "ar" || pl.sign == "sc")
					{//enemy house
						pS = PlanetStrength.ENEMY;
						desc += "Mercury is positioned in its enemy sign, may require astrological measure, please check with one of our expert astrologers";
					}
					else if (pl.sign == "pi")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += "Mercury is positioned in its debiliated sign, may require astrological measure, please check with one of our expert astrologers";
					}
					break;
				case "Sa":
					if (pl.sign == "li")
					{//exalted
						pS = PlanetStrength.EXALTED;
					}
					else if (pl.sign == "aq")
					{//own
						if (pl.pos >= 0 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
						}
						else
						{
							pS = PlanetStrength.OWN;
						}
					}
					else if (pl.sign == "cp")
					{//own
						pS = PlanetStrength.OWN;
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "ta")
					{//friend house
						pS = PlanetStrength.FRIEND;
					}
					else if (pl.sign == "le") pS = PlanetStrength.ENEMY;
					else if (pl.sign == "ar") pS = PlanetStrength.DEBILIATED;
					break;
				default:
					break;
			}
			return desc;
		}
		private string descStrength(PlanetHouse pl, Dictionary<string, string> dctAst, string lang)
		{
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string astf = string.Empty;
			string astof = string.Empty;
			switch (lang)
			{
				case "ta":
					astf = string.Format(@"{0}\ta-plstr.json", astClient);
					break;
				case "en":
					astf = string.Format(@"{0}\en-plstr.json", astClient);
					break;
				case "te":
					astf = string.Format(@"{0}\te-plstr.json", astClient);
					break;
				case "hi":
					astf = string.Format(@"{0}\hi-plstr.json", astClient);
					break;
				default:
					astf = string.Format(@"{0}\en-plstr.json", astClient);
					break;
			}
			string adct = string.Empty;
			using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
			{
				adct = rdra.ReadToEnd();
			}
			Dictionary<string, string> dctStn = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
			string desc = string.Empty;
			//bool strong_asc = false;
			PlanetStrength pS = PlanetStrength.NORMAL;
			switch (pl.code)
			{
				case "Su":
					if (pl.sign == "ar")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += dctStn["pl-ex"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "le")
					{
						if (pl.pos >= 4 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += dctStn["pl-mo"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
					}
					else if (pl.sign == "cn" || pl.sign == "ar" || pl.sign == "sa" || pl.sign == "sc")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += dctStn["pl-fr"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "cp" || pl.sign == "aq")
					{
						pS = PlanetStrength.ENEMY;
						desc += dctStn["pl-en"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "li")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += dctStn["pl-db"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					break;
				case "Mo":
					if (pl.sign == "ta")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += dctStn["pl-ex"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ta")
					{
						if (pl.pos >= 4 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += dctStn["pl-mo"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
					}
					else if (pl.sign == "cn")
					{//own
						pS = PlanetStrength.OWN;
						desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "le" || pl.sign == "ar" || pl.sign == "sc" || pl.sign == "sa" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += dctStn["pl-fr"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "ge" || pl.sign == "vi" || pl.sign == "sa" || pl.sign == "aq")
					{//enemy house
						pS = PlanetStrength.ENEMY;
						desc += dctStn["pl-en"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "sc")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += dctStn["pl-db"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					break;
				case "Ju":
					if (pl.sign == "cn")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += dctStn["pl-ex"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "sa")
					{//own
						if (pl.pos >= 0 && pl.pos <= 10)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += dctStn["pl-mo"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
					}
					else if (pl.sign == "pi")
					{//own
						pS = PlanetStrength.OWN;
						desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "le" || pl.sign == "sc" || pl.sign == "ar")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += dctStn["pl-fr"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "ta" || pl.sign == "li")
					{
						pS = PlanetStrength.ENEMY;
						desc += dctStn["pl-en"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "cp")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += dctStn["pl-db"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					break;
				case "Ve":
					if (pl.sign == "pi")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += dctStn["pl-ex"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "li")
					{//own
						if (pl.pos >= 0 && pl.pos <= 15)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += dctStn["pl-mo"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
					}
					else if (pl.sign == "ta")
					{//own
						pS = PlanetStrength.OWN;
						desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "cp" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += dctStn["pl-fr"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "le" || pl.sign == "ta" || pl.sign == "li")
					{
						pS = PlanetStrength.ENEMY;
						desc += dctStn["pl-en"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "sc")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += dctStn["pl-db"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					break;
				case "Ma":
					if (pl.sign == "cp")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += dctStn["pl-ex"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ar")
					{//own
						if (pl.pos >= 0 && pl.pos <= 12)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += dctStn["pl-mo"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
					}
					else if (pl.sign == "sc")
					{//own
						pS = PlanetStrength.OWN;
						desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "cp" || pl.sign == "aq")
					{
						pS = PlanetStrength.ENEMY;
						desc += dctStn["pl-en"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "le" || pl.sign == "cn" || pl.sign == "sa" || pl.sign == "pi")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += dctStn["pl-fr"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					break;
				case "Me":
					if (pl.sign == "vi")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += dctStn["pl-ex"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "vi")
					{//own
						if (pl.pos >= 16 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += dctStn["pl-mo"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
					}
					else if (pl.sign == "ge")
					{//own
						pS = PlanetStrength.OWN;
						desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ta" || pl.sign == "li" || pl.sign == "cp" || pl.sign == "aq")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += dctStn["pl-fr"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "sa" || pl.sign == "pi" || pl.sign == "ar" || pl.sign == "sc")
					{//enemy house
						pS = PlanetStrength.ENEMY;
						desc += dctStn["pl-en"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "pi")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += dctStn["pl-db"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					break;
				case "Sa":
					if (pl.sign == "li")
					{//exalted
						pS = PlanetStrength.EXALTED;
						desc += dctStn["pl-ex"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "aq")
					{//own
						if (pl.pos >= 0 && pl.pos <= 20)
						{//mooltrikona
							pS = PlanetStrength.MOOLTRIKONA;
							desc += dctStn["pl-mo"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
						else
						{
							pS = PlanetStrength.OWN;
							desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
						}
					}
					else if (pl.sign == "cp")
					{//own
						pS = PlanetStrength.OWN;
						desc += dctStn["pl-ow"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ge" || pl.sign == "vi" || pl.sign == "ta")
					{//friend house
						pS = PlanetStrength.FRIEND;
						desc += dctStn["pl-fr"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "le")
					{
						pS = PlanetStrength.ENEMY;
						desc += dctStn["pl-en"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					else if (pl.sign == "ar")
					{
						pS = PlanetStrength.DEBILIATED;
						desc += dctStn["pl-db"].Replace("[0]", dctAst[pl.code]).Replace("[1]", dctAst[pl.sign]);
					}
					break;
				default:
					break;
			}
			return desc;
		}
		public int isBenefic(string sign, string lord)
		{
			switch (sign)
			{
				case "ar":
					if (lord == "Su" || lord == "Ju" || lord == "Mo") return 1;
					else if (lord == "Me") return 2;
					else if (lord == "Sa" || lord == "Ve" || lord == "Ma") return 0;
					break;
				case "ta":
					if (lord == "Sa" || lord == "Ve" || lord == "Me") return 1;
					else if (lord == "Ju" || lord == "Mo" || lord == "Ma") return 2;
					else if (lord == "Su") return 0;
					break;
				case "ge":
					if (lord == "Mo" || lord == "Me" || lord == "Su") return 1;
					else if (lord == "Ju" || lord == "Ma") return 2;
					else if (lord == "Mo" || lord == "Me" || lord == "Su") return 0;
					break;
				case "cn":
					if (lord == "Mo" || lord == "" || lord == "Mo") return 1;
					else if (lord == "Me" || lord == "Sa") return 2;
					else if (lord == "Su" || lord == "Ve" || lord == "Ju") return 0;
					break;
				case "le":
					if (lord == "Su" || lord == "Ma") return 1;
					else if (lord == "Me" || lord == "Ve" || lord == "Mo" || lord == "Sa") return 2;
					else if (lord == "Sa" || lord == "Ve" || lord == "Me") return 1;
					break;
				case "ve":
					if (lord == "Ve" || lord == "Me") return 1;
					else if (lord == "Ju" || lord == "Mo" || lord == "Ma") return 2;
					else if (lord == "Su") return 0;
					break;
				case "li":
					if (lord == "Sa" || lord == "Me") return 1;
					else if (lord == "Ma" || lord == "Su" || lord == "Ju" || lord == "Ma") return 2;
					else if (lord == "Mo" || lord == "Ve") return 0;
					break;
				case "sc":
					if (lord == "Mo" || lord == "Su" || lord == "Ju") return 1;
					else if (lord == "Me" || lord == "Ve") return 2;
					else if (lord == "Sa" || lord == "Ma") return 0;
					break;
				case "sa":
					if (lord == "Ma" || lord == "Su" || lord == "Ju") return 1;
					else if (lord == "Me" || lord == "Ve" || lord == "Mo") return 2;
					break;
				case "cp":
					if (lord == "Ve" || lord == "Me" || lord == "Sa") return 1;
					else if (lord == "Ma" || lord == "Mo" || lord == "Su") return 2;
					else if (lord == "Ju") return 1;
					break;
				case "aq":
					if (lord == "Ve" || lord == "Sa") return 1;
					else if (lord == "Ma" || lord == "Mo" || lord == "Ju") return 2;
					else if (lord == "Su" || lord == "Me") return 0;
					break;
				case "pi":
					if (lord == "Mo" || lord == "Ju" || lord == "Ma") return 1;
					else if (lord == "Me" || lord == "Su" || lord == "Ve") return 2;
					else if (lord == "Sa") return 0;
					break;
				default:
					//  return -1;
					break;
			}
			return -1;
		}
		[HttpGet("GetHouseGroup")]
		public ActionResult GetHouseGroup(string uuid)
		{
			_logger.LogInformation("GetHouseGroup");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var astUsers = db.GetCollection<KPHouseGroup>("KPHouseGroup");
				var filter = Builders<KPHouseGroup>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = astUsers.CountDocuments(filter);
					if (cnt > 0L)
					{
						var hgrp = astUsers.Find<KPHouseGroup>(filter).FirstOrDefault();
						return new JsonResult(hgrp);

					}
					else
					{
						var hgrp = new KPHouseGroup
						{
							uuid = uuid,
							hgp = "not found"
						};
						return new JsonResult(hgrp);
					}
				}
				catch (Exception eX)
				{
					var hgrp = new KPHouseGroup
					{
						uuid = uuid,
						hgp = eX.Message
					};
					return new JsonResult(hgrp);
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var hgrp = new KPHouseGroup
				{
					uuid = uuid,
					hgp = err
				};
				return new JsonResult(hgrp);
			}
		}
		[HttpPost("AddHouseGroup")]
		public ActionResult AddHouseGroup([FromBody] KPHouseGroup kphg)
		{
			_logger.LogInformation("AddHouseGroup");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbHG = db.GetCollection<KPHouseGroup>("KPHouseGroup");
				var filter = Builders<KPHouseGroup>.Filter.Eq("uuid", kphg.uuid);
				try
				{
					long cnt = dbHG.CountDocuments(filter);
					if (cnt > 0L)
					{
						var hgrp = dbHG.Find<KPHouseGroup>(filter).FirstOrDefault();
						var update = Builders<KPHouseGroup>.Update.Set("hgp", kphg.hgp);
						hgrp = dbHG.FindOneAndUpdate<KPHouseGroup>(filter, update);
						hgrp.hgp = "Success";
						return new JsonResult(hgrp);
					}
					else
					{
						//var hgrp = new KPHouseGroup
						//{
						//  uuid = kphg.uuid,
						//hgp = kphg.hgp
						//};
						dbHG.InsertOne(kphg);
						kphg.hgp = "Success";
						return new JsonResult(kphg);
					}
				}
				catch (Exception eX)
				{
					var hgrp = new KPHouseGroup
					{
						uuid = kphg.uuid,
						hgp = eX.Message
					};
					return new JsonResult(hgrp);
				}
			}
			catch (Exception eX)
			{
				var hgrp = new KPHouseGroup
				{
					uuid = kphg.uuid,
					hgp = eX.Message
				};
				return new JsonResult(hgrp);
			}
		}
		[HttpGet("Astakvarga")]
		public async Task<IActionResult> Astakvarga(string dob, string tob, string latlng, string timezone, double tzofset, int ayanid)
		{
			_logger.LogInformation("Astakvarga");
			Astakavarga akv = new Astakavarga();
			akv.akPts = new Dictionary<string, int>();
			akv.houSgn = new Dictionary<string, string>();
			try
			{
				string asg = string.Empty, ssg = string.Empty, msg = string.Empty, jsg = string.Empty, mesg = string.Empty, masg = string.Empty, vsg = string.Empty, sasg = string.Empty;
				//string asg2 = string.Empty, ssg2 = string.Empty, msg2 = string.Empty, jsg2 = string.Empty, mesg2 = string.Empty, masg2 = string.Empty, vsg2 = string.Empty, sasg2 = string.Empty;
				Horo horo = null;
				JsonResult jRes = (JsonResult)await GetcuspsEx2(dob, tob, latlng, timezone, tzofset, ayanid);
				horo = (Horo)jRes.Value;
				//DateTime today = DateTime.Now;
				//JsonResult jRes2 = (JsonResult)await GetcuspsEx2(string.Format("{0}|{1}|{2}", today.Day, today.Month, today.Year), string.Format("{0}|{1}|{2}", today.Hour, today.Minute, today.Second), latlng, timezone, tzofset, ayanid);
				//Horo horo2 = (Horo)jRes2.Value;

				//SUN
				string astClient = Path.Combine(_env.ContentRootPath, @"Content/astroclient");

				foreach (var pls in horo.planetPos)
				{
					foreach (var pl in pls.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC")
						{
							asg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Su")
						{
							ssg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Mo")
						{
							msg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Ju")
						{
							jsg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Me")
						{
							mesg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Ma")
						{
							masg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Ve")
						{
							vsg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Sa")
						{
							sasg = pls.Key;
						}
					}
				}
				//Task tf = new Task(() =>
				//{

				//});
				//tf.RunSynchronously();
				//Task.WaitAll(tf);
				//SUN
				Dictionary<string, int> t1 = await calcAkPtsEx2("Su", asg, calcHno(asg, ssg), horo);
				//MOON
				Dictionary<string, int> t2 = await calcAkPtsEx2("Mo", asg, calcHno(asg, msg), horo);

				//JUPITER
				Dictionary<string, int> t3 = await calcAkPtsEx2("Ju", asg, calcHno(asg, jsg), horo);

				//VENUS
				Dictionary<string, int> t4 = await calcAkPtsEx2("Ve", asg, calcHno(asg, vsg), horo);

				//MERCURY
				Dictionary<string, int> t5 = await calcAkPtsEx2("Me", asg, calcHno(asg, mesg), horo);

				//MARS
				Dictionary<string, int> t6 = await calcAkPtsEx2("Ma", asg, calcHno(asg, masg), horo);

				//SATURN
				Dictionary<string, int> t7 = await calcAkPtsEx2("Sa", asg, calcHno(asg, sasg), horo);

				//await Task.WhenAll(t1, t2, t3, t4, t5, t6, t7);

				t1.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t2.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t3.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t4.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t5.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t6.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t7.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				int r1 = 0, r2 = 0;
				bool asc = false;
				string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
					}
					if (horo.planetPos.ContainsKey(ras[r1]))
					{
						foreach (string pl in horo.planetPos[ras[r1]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								akv.houSgn["1"] = ras[r1];
							}
						}
					}
					if (r2 == 2) akv.houSgn["2"] = ras[r1];
					else if (r2 == 3) akv.houSgn["3"] = ras[r1];
					else if (r2 == 4) akv.houSgn["4"] = ras[r1];
					else if (r2 == 5) akv.houSgn["5"] = ras[r1];
					else if (r2 == 6) akv.houSgn["6"] = ras[r1];
					else if (r2 == 7) akv.houSgn["7"] = ras[r1];
					else if (r2 == 8) akv.houSgn["8"] = ras[r1];
					else if (r2 == 9) akv.houSgn["9"] = ras[r1];
					else if (r2 == 10) akv.houSgn["10"] = ras[r1];
					else if (r2 == 11) akv.houSgn["11"] = ras[r1];
					else if (r2 == 12)
					{
						akv.houSgn["12"] = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				return new JsonResult(akv);
			}
			catch (Exception eX)
			{
				akv.akPts[eX.Message] = -1;
				return new JsonResult(akv);
			}

		}
		public async Task<IActionResult> AstakvargaEx(Horo horo)
		{
			_logger.LogInformation("Astakvarga");
			Astakavarga akv = new Astakavarga();
			akv.akPts = new Dictionary<string, int>();
			akv.houSgn = new Dictionary<string, string>();
			try
			{
				string asg = string.Empty, ssg = string.Empty, msg = string.Empty, jsg = string.Empty, mesg = string.Empty, masg = string.Empty, vsg = string.Empty, sasg = string.Empty;

				//SUN
				string astClient = Path.Combine(_env.ContentRootPath, @"Content/astroclient");

				foreach (var pls in horo.planetPos)
				{
					foreach (var pl in pls.Value.Split('|'))
					{
						if (pl.Split(' ')[1] == "AC")
						{
							asg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Su")
						{
							ssg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Mo")
						{
							msg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Ju")
						{
							jsg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Me")
						{
							mesg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Ma")
						{
							masg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Ve")
						{
							vsg = pls.Key;
						}
						else if (pl.Split(' ')[1] == "Sa")
						{
							sasg = pls.Key;
						}
					}
				}
				//SUN
				Dictionary<string, int> t1 = await calcAkPtsEx2("Su", asg, calcHno(asg, ssg), horo);
				//MOON
				Dictionary<string, int> t2 = await calcAkPtsEx2("Mo", asg, calcHno(asg, msg), horo);
				//JUPITER
				Dictionary<string, int> t3 = await calcAkPtsEx2("Ju", asg, calcHno(asg, jsg), horo);
				//VENUS
				Dictionary<string, int> t4 = await calcAkPtsEx2("Ve", asg, calcHno(asg, vsg), horo);
				//MERCURY
				Dictionary<string, int> t5 = await calcAkPtsEx2("Me", asg, calcHno(asg, mesg), horo);
				//MARS
				Dictionary<string, int> t6 = await calcAkPtsEx2("Ma", asg, calcHno(asg, masg), horo);
				//SATURN
				Dictionary<string, int> t7 = await calcAkPtsEx2("Sa", asg, calcHno(asg, sasg), horo);
				t1.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t2.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t3.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t4.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t5.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t6.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				t7.ToList().ForEach(x => akv.akPts.Add(x.Key, x.Value));
				int r1 = 0, r2 = 0;
				bool asc = false;
				string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
					}
					if (horo.planetPos.ContainsKey(ras[r1]))
					{
						foreach (string pl in horo.planetPos[ras[r1]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								akv.houSgn["1"] = ras[r1];
							}
						}
					}
					if (r2 == 2) akv.houSgn["2"] = ras[r1];
					else if (r2 == 3) akv.houSgn["3"] = ras[r1];
					else if (r2 == 4) akv.houSgn["4"] = ras[r1];
					else if (r2 == 5) akv.houSgn["5"] = ras[r1];
					else if (r2 == 6) akv.houSgn["6"] = ras[r1];
					else if (r2 == 7) akv.houSgn["7"] = ras[r1];
					else if (r2 == 8) akv.houSgn["8"] = ras[r1];
					else if (r2 == 9) akv.houSgn["9"] = ras[r1];
					else if (r2 == 10) akv.houSgn["10"] = ras[r1];
					else if (r2 == 11) akv.houSgn["11"] = ras[r1];
					else if (r2 == 12)
					{
						akv.houSgn["12"] = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}

				return new JsonResult(akv);
			}
			catch (Exception eX)
			{
				akv.akPts[eX.Message] = -1;
				return new JsonResult(akv);
			}

		}
		async Task<Dictionary<string, int>> calcAkPtsEx2(string lord, string asg, int asn, Horo horo)
		{
			try
			{
				//await Task.Run(() =>
				//{
				Dictionary<string, int> dctAk = new Dictionary<string, int>();
				dctAk[lord + "-1"] = 0;
				dctAk[lord + "-2"] = 0;
				dctAk[lord + "-3"] = 0;
				dctAk[lord + "-4"] = 0;
				dctAk[lord + "-5"] = 0;
				dctAk[lord + "-6"] = 0;
				dctAk[lord + "-7"] = 0;
				dctAk[lord + "-8"] = 0;
				dctAk[lord + "-9"] = 0;
				dctAk[lord + "-10"] = 0;
				dctAk[lord + "-11"] = 0;
				dctAk[lord + "-12"] = 0;
				string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };

				string astClient = Path.Combine(_env.ContentRootPath, @"Content/astroclient");
				using (StreamReader rdr = new StreamReader(string.Format(@"{0}\{1}-bds.json", astClient, lord), Encoding.UTF8))
				{
					string dasp = rdr.ReadToEnd();
					Dictionary<string, string> dctLord = JsonConvert.DeserializeObject<Dictionary<string, string>>(dasp);

					foreach (var itm in dctLord)
					{
						string fsg = string.Empty;
						string fsn = ((itm.Key.Contains('-') == false) ? itm.Key : itm.Key.Split('-')[1]);
						foreach (var pls in horo.planetPos)
						{
							foreach (var pl in pls.Value.Split('|'))
							{
								if (pl.Split(' ')[1] == fsn)
								{
									fsg = pls.Key;
									break;
								}
							}
							if (fsg != string.Empty) break;
						}
						string[] hno = itm.Value.Split(',');
						foreach (var h in hno)
						{
							if (h == "1")
							{
								string ky = string.Format("{0}-{1}", lord, asn);
								if (dctAk.ContainsKey(ky))
									dctAk[ky] += 1;
								else
									dctAk[ky] = 1;
							}
							else
							{
								var sn = calcSHno(fsg, Convert.ToInt32(h));
								int hn = calcHno(asg, sn.Split('|')[0]);
								string ky = string.Format("{0}-{1}", lord, hn);
								if (dctAk.ContainsKey(ky))
									dctAk[ky] += 1;
								else
									dctAk[ky] = 1;
							}
						}
					}
				}
				return dctAk;
				//});
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				Dictionary<string, int> dE = new Dictionary<string, int>();
				dE[eX.Message] = -1;
				return dE;
			}
		}

		async Task<Dictionary<string, int>> calcAkPts(string lord, string asg, int asn, Horo horo)
		{
			try
			{
				//await Task.Run(() =>
				//{
				Dictionary<string, int> dctAk = new Dictionary<string, int>();
				dctAk[lord + "-1"] = 0;
				dctAk[lord + "-2"] = 0;
				dctAk[lord + "-3"] = 0;
				dctAk[lord + "-4"] = 0;
				dctAk[lord + "-5"] = 0;
				dctAk[lord + "-6"] = 0;
				dctAk[lord + "-7"] = 0;
				dctAk[lord + "-8"] = 0;
				dctAk[lord + "-9"] = 0;
				dctAk[lord + "-10"] = 0;
				dctAk[lord + "-11"] = 0;
				dctAk[lord + "-12"] = 0;
				string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };

				string astClient = Path.Combine(_env.ContentRootPath, @"Content/astroclient");
				using (StreamReader rdr = new StreamReader(string.Format(@"{0}\{1}-bds.json", astClient, lord), Encoding.UTF8))
				{
					string dasp = rdr.ReadToEnd();
					Dictionary<string, string> dctLord = JsonConvert.DeserializeObject<Dictionary<string, string>>(dasp);

					string fsg = string.Empty;
					foreach (var pls in horo.planetPos)
					{
						foreach (var pl in pls.Value.Split('|'))
						{
							if (pl.Split(' ')[1] == lord)
							{
								fsg = pls.Key;
								break;
							}
						}
						if (fsg != string.Empty) break;
					}
					foreach (var itm in dctLord)
					{
						string[] hno = itm.Value.Split(',');
						foreach (var h in hno)
						{
							if (h == "1")
							{
								string ky = string.Format("{0}-{1}", lord, asn);
								if (dctAk.ContainsKey(ky))
									dctAk[ky] += 1;
								else
									dctAk[ky] = 1;
							}
							else
							{
								var sn = calcSHno(fsg, Convert.ToInt32(h));
								int hn = calcHno(asg, sn.Split('|')[0]);
								string ky = string.Format("{0}-{1}", lord, hn);
								if (dctAk.ContainsKey(ky))
									dctAk[ky] += 1;
								else
									dctAk[ky] = 1;
							}
						}
					}
				}
				return dctAk;
				//});
			}
			catch (Exception eX)
			{
				Dictionary<string, int> dE = new Dictionary<string, int>();
				dE[eX.Message] = -1;
				return dE;
			}
		}
		async Task<Dictionary<string, int>> calcAkPtsEx(string lord, string nls, string tls, int nlp, int tlp, Horo horo)
		{
			try
			{
				//await Task.Run(() =>
				//{
				Dictionary<string, int> dctAk = new Dictionary<string, int>();
				dctAk[lord + "-1"] = 0;
				dctAk[lord + "-2"] = 0;
				dctAk[lord + "-3"] = 0;
				dctAk[lord + "-4"] = 0;
				dctAk[lord + "-5"] = 0;
				dctAk[lord + "-6"] = 0;
				dctAk[lord + "-7"] = 0;
				dctAk[lord + "-8"] = 0;
				dctAk[lord + "-9"] = 0;
				dctAk[lord + "-10"] = 0;
				dctAk[lord + "-11"] = 0;
				dctAk[lord + "-12"] = 0;
				//string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };

				string astClient = Path.Combine(_env.ContentRootPath, @"Content/astroclient");
				using (StreamReader rdr = new StreamReader(string.Format(@"{0}\{1}-bds.json", astClient, lord), Encoding.UTF8))
				{
					string dasp = rdr.ReadToEnd();
					Dictionary<string, string> dctLord = JsonConvert.DeserializeObject<Dictionary<string, string>>(dasp);

					foreach (var itm in dctLord)
					{
						int hn = -1;
						string[] hno = itm.Value.Split(',');
						if (itm.Key.Contains('-'))
						{
							string sn = itm.Key.Split('-')[1];
							string fsg = string.Empty;
							foreach (var pls in horo.planetPos)
							{
								foreach (var pl in pls.Value.Split('|'))
								{
									if (pl.Split(' ')[1] == sn)
									{
										fsg = pls.Key;
										break;
									}
								}
								if (fsg != string.Empty) break;
							}
							hn = calcHno(fsg, tls);
						}
						foreach (var h in hno)
						{
							if (!itm.Key.Contains('-'))
							{
								if (Math.Abs(nlp - tlp) == Convert.ToInt32(h))
								{
									string ky = string.Format("{0}-{1}", lord, h);
									if (dctAk.ContainsKey(ky))
										dctAk[ky] += 1;
									else
										dctAk[ky] = 1;
								}
							}
							else if (hn == Convert.ToInt32(h))
							{
								string ky = string.Format("{0}-{1}", lord, h);
								if (dctAk.ContainsKey(ky))
									dctAk[ky] += 1;
								else
									dctAk[ky] = 1;
							}
						}
					}
				}
				return dctAk;
				//});
			}
			catch (Exception eX)
			{
				Dictionary<string, int> dE = new Dictionary<string, int>();
				dE[eX.Message] = -1;
				return dE;
			}
		}
		//[HttpPost("BlogPost")]
		//public async Task<Blog> BlogPost([FromBody] Blog blog)
		//{
		//	try
		//	{
		//		Console.WriteLine("Getting DB...");
		//		var db = client.GetDatabase("myypub");
		//		var dbAst = await Task.Run(() => { return db.GetCollection<Blog>("Blog"); });
		//		return await dbAst.InsertOneAsync(blog)

		//	}
		//	catch (Exception eX)
		//	{

		//	}
		//}
		[HttpGet("AstroStories")]
		public async Task<List<Blog>> AstroStories()
		{
			_logger.LogInformation("AstroStories");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbAst = await Task.Run(() => { return db.GetCollection<Blog>("Blog"); });
				var results = dbAst.Find(new BsonDocument()).Project(u => new Blog { uuid = u.uuid, title = u.title, img = u.img, createdt = u.createdt, story = "" }).ToList().AsQueryable();
				var qAstUser =
								(from e in results
								 select e).ToList();
				if (qAstUser != null)
				{
					return qAstUser;
				}
				else
				{
					List<Blog> lst = new List<Blog>();
					var ast = new Blog
					{
						title = "X"
					};
					lst.Add(ast);
					return lst;
				}

			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var ast = new Blog
				{
					title = eX.Message
				};
				List<Blog> lst = new List<Blog>();
				lst.Add(ast);
				return lst;
			}
		}
		//       try
		//       {
		//           //var posts = Enumerable.Empty<FeedItem>();
		//           var rssFeed = XDocument.Load(@"http://www.126news.com/Publish/astrology.xml");
		//           if (rssFeed != null)
		//           {
		//XNamespace ns = "http://www.w3.org/2005/Atom";
		//var posts = from item in rssFeed.Descendants("item")
		//			select new FeedItem
		//			{
		//				title = item.Element("title").Value,
		//				image = item.Element("enclosure").Attribute("url").Value,
		//				pubDate = item.Element("pubDate").Value,
		//				content = item.Element("description").Value,
		//				byline = item.Element(ns + "author").Element(ns + "name").Value,
		//				bylineUrl = item.Element(ns + "author").Element(ns + "uri").Value
		//                           };
		//               return new JsonResult(posts.ToList());
		//           }
		//           else
		//           {
		//               return new JsonResult("ERROR: NOT FOUND");
		//           }
		//       }
		//       catch (Exception eX)
		//       {
		//           var st = new StackTrace(eX, true);
		//           // Get the top stack frame
		//           var frame = st.GetFrame(st.FrameCount - 1);
		//           // Get the line number from the stack frame
		//           var line = frame.GetFileLineNumber();

		//           return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
		//       }
		//}
		[HttpGet("LatestNews")]
		public ActionResult LatestNews(string category)
		{
			_logger.LogInformation("LatestNews");
			int np = 0;
			string sp = string.Empty;
			try
			{
				//var posts = Enumerable.Empty<FeedItem>();
				var rssFeed = XDocument.Load(string.Format(@"http://www.126news.com/Publish/{0}.xml", category));

				var posts = from item in rssFeed.Descendants("item")
							select new FeedItem
							{
								title = item.Element("title").Value,
								image = item.Element("enclosure").Attribute("url").Value,
								pubDate = item.Element("pubDate").Value,
								content = item.Element("description").Value
							};
				foreach (var post in posts)
				{
					np++;
					sp = post.content;
					Console.WriteLine(post.content);
				}
				return new JsonResult(posts);
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();

				return new JsonResult(string.Format("ERROR: {0} LINE {1}", eX.Message, line));
			}
		}
		[HttpGet("GetQuota")]
		public async Task<Quota> GetQuota(string uuid)
		{
			_logger.LogInformation("GetQuote");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var astUsers = await Task.Run(() => { return db.GetCollection<Quota>("Quota"); });
				var filter = Builders<Quota>.Filter.Eq("uuid", uuid);
				try
				{
					long cnt = astUsers.CountDocuments(filter);
					if (cnt > 0L)
					{
						var plan = astUsers.Find<Quota>(filter).FirstOrDefault();
						return plan;
					}
					else
					{
						var plan = new Quota
						{
							uuid = uuid,
							qta = 0
						};
						return plan;
					}
				}
				catch (Exception eX)
				{
					var plan = new Quota
					{
						uuid = eX.Message,
						qta = 0
					};
					return plan;
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				// Get the top stack frame
				var frame = st.GetFrame(st.FrameCount - 1);
				// Get the line number from the stack frame
				var line = frame.GetFileLineNumber();
				string err = string.Format("ERROR: {0} LINE {1}", eX.Message, line);
				var plan = new Quota
				{
					uuid = err,
					qta = 0
				};
				return plan;
			}
		}
		[HttpGet("SetQuota")]
		public async Task<Quota> SetQuota(string uuid, int qta)
		{
			_logger.LogInformation("SetQuote");
			try
			{
				Console.WriteLine("Getting DB...");
				var db = client.GetDatabase("myypub");
				var dbPlan = await Task.Run(() => { return db.GetCollection<Quota>("Quota"); });
				var filter = Builders<Quota>.Filter.Eq("uuid", uuid);
				var update = Builders<Quota>.Update.Set("qta", qta);
				try
				{
					long cnt = dbPlan.CountDocuments(filter);
					if (cnt > 0L)
					{
						var quo = await dbPlan.FindOneAndUpdateAsync<Quota>(filter, update);
						return quo;
					}
					else
					{
						var quo = new Quota
						{
							uuid = uuid,
							qta = 0
						};
						return quo;
					}
				}
				catch (Exception eX)
				{
					var quo = new Quota
					{
						uuid = eX.Message,
						qta = 0
					};
					return quo;
				}
			}
			catch (Exception eX)
			{
				var quo = new Quota
				{
					uuid = eX.Message,
					qta = 0
				};
				return quo;
			}
		}
		[HttpGet("AnalyzeUserData")]
		public async Task<ActionResult> AnalyzeUserData(string uid)
		{
			_logger.LogInformation("AnalyzeUserData");
			try
			{
				if (uid == "vhoroo")
				{
					var db = client.GetDatabase("myypub");
					var dbPlan = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
					string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
					string fl = string.Format(@"{0}\plan.json", astClient);
					//Dictionary<string, string> dctSrc = new Dictionary<string, string>();
					try
					{
						string json = System.IO.File.ReadAllText(fl);
						var people = JsonConvert.DeserializeObject<List<People>>(json);
						foreach (var p in people)
						{
							string cdobs = string.Empty;
							if (p.dobs.Trim() != string.Empty)
							{
								foreach (var dob in p.dobs.Split('|'))
								{
									if (dob == string.Empty || dob.Contains("undefined") || dob.Contains("null") || dob.Contains("::")) continue;
									string dtm = dob.Split('L')[0];
									string latlng = "";
									try
									{
										latlng = dob.Split('L')[1].Split('@')[0];
									}
									catch
									{
										//if (dctSrc.ContainsKey(p.uuid))
										//{
										//	dctSrc[p.uuid] += string.Format("|{0}", dtm);
										//}
										//else
										//{
										//	dctSrc[p.uuid] += string.Format("{0}", dtm);
										//}
										latlng = dob.Split('L')[1];
									}
									string tz = dob.Split('L')[1].Split('@')[1].Split('#')[0];
									if (dtm.Split('T')[1].Contains('.')) continue;
									string tm = dtm.Split('T')[1].TrimEnd('Z');
									uint hh = 0, mm = 0, ss = 0;
									try
									{
										hh = Convert.ToUInt32(tm.Split(':')[0]);
										mm = Convert.ToUInt32(tm.Split(':')[1]);
										ss = Convert.ToUInt32(tm.Split(':')[2]);
										if (hh > 23 || mm > 59 || ss > 59) continue;
										//if (hh == 24 && (mm > 0 || ss > 0)) continue;
									}
									catch
									{
										//if (dctSrc.ContainsKey(p.uuid))
										//{
										//	dctSrc[p.uuid] += string.Format("|{0}", dtm);
										//}
										//else
										//{
										//	dctSrc[p.uuid] += string.Format("{0}", dtm);
										//}
										continue;
									}
									if (tz == "undefined" || tz == "Asia/Kuala_" || tz == "America/" || tz == "Europe/" || tz == "Africa/" || tz == "America/St_")
									{

										//if (dctSrc.ContainsKey(p.uuid))
										//{
										//	dctSrc[p.uuid] += string.Format("|{0}", tz);
										//}
										//else
										//{
										//	dctSrc[p.uuid] += string.Format("{0}", tz);
										//}
										continue;
									}
									string nam = dtm;
									try
									{
										nam = dob.Split('L')[1].Split('@')[1].Split('#')[1].Split('&')[0];
									}
									catch
									{

									}
									uint day = 0, mon = 0, year = 0;
									try
									{
										day = Convert.ToUInt32(dtm.Split('T')[0].Split('-')[2]);
										mon = Convert.ToUInt32(dtm.Split('T')[0].Split('-')[1]);
										year = Convert.ToUInt32(dtm.Split('T')[0].Split('-')[0]);
										if (mon > 12 || day > 31 || year > 9999) continue;
									}
									catch
									{
										//if (dctSrc.ContainsKey(p.uuid))
										//{
										//	dctSrc[p.uuid] += string.Format("|{0}", dtm);
										//}
										//else
										//{
										//	dctSrc[p.uuid] += string.Format("{0}", dtm);
										//}
										continue;
									}
									try
									{
										DateTime cdt = new DateTime((int)year, (int)mon, (int)day, (int)hh, (int)mm, (int)ss);
									}
									catch
									{
										//if (dctSrc.ContainsKey(p.uuid))
										//{
										//	dctSrc[p.uuid] += string.Format("|{0}", dtm);
										//}
										//else
										//{
										//	dctSrc[p.uuid] += string.Format("{0}", dtm);
										//}
										continue;
									}
									try
									{

										//BirthStar bS = GetBStarEx(string.Format("{0}|{1}|{2}", day, mon, year), dtm.Split('T')[1].TrimEnd('Z').Replace(':', '|'), latlng.Replace(',', '|').Replace("º", "").Replace("\'", "").Replace("\"", ""), tz, string.Empty, 4);
										//if (bS.birthSign.Trim() == string.Empty || bS.birthStar.Trim() == string.Empty)
										//{
										//	BirthStar bS1 = GetBStarEx(string.Format("{0}|{1}|{2}", day, mon, year), dtm.Split('T')[1].TrimEnd('Z').Replace(':', '|'), latlng.Replace(',', '|').Replace("º", "").Replace("\'", "").Replace("\"", ""), tz, string.Empty, 4);
										//}
										//if(dctSrc.ContainsKey(p.uuid))
										//{
										//	dctSrc[p.uuid] += string.Format("|{0},{1}", bS.birthSign, bS.birthStar);
										//}
										//else
										//{
										//	dctSrc[p.uuid] += string.Format("{0},{1}", bS.birthSign, bS.birthStar);
										//}
										if (cdobs != string.Empty) cdobs += string.Format("|{0}", dob);
										else cdobs = dob;
										//dctSrc.Add(string.Format("{0}-{1}", nam, Guid.NewGuid().ToString()), string.Format("{0},{1}", bS.birthSign, bS.birthStar));
									}
									catch
									{
										//BirthStar bS = GetBStarEx(string.Format("{0}|{1}|{2}", day, mon, year), dtm.Split('T')[1].TrimEnd('Z').Replace(':', '|'), latlng.Replace(',', '|'), tz, string.Empty, 4);
										return new JsonResult(string.Format(" Exception {0} {1} {2}", dtm, latlng, tz));

									}
								}
							}
							//if(p.dobs.Trim() != cdobs.Trim())
							{
								var filter = Builders<Plan>.Filter.Eq("uuid", p.uuid);
								var update = Builders<Plan>.Update.Set("dobs", cdobs);
								var quo = await dbPlan.FindOneAndUpdateAsync<Plan>(filter, update);
							}
						}
						//string csv = String.Join(
						//	Environment.NewLine,
						//	dctSrc.Select(d => $"{d.Key};{d.Value}")
						//);
						//System.IO.File.WriteAllText(string.Format(@"{0}\people.csv", astClient), csv);
						return new JsonResult("success");

					}
					catch (JsonException eX)
					{
						var st = new StackTrace(eX, true);
						var frame = st.GetFrame(st.FrameCount - 1);
						var line = frame.GetFileLineNumber();
						return new JsonResult(string.Format("{0} {1}", eX.Message, line.ToString()));
					}

				}
				else
				{
					return new JsonResult("failed");
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("{0} {1}", eX.Message, line.ToString()));
			}
		}
		string dms(double x)
		{
			int d = 0, m = 0, s = 0;
			d = Convert.ToInt32(x.ToString().Split('.')[0]);
			if (x.ToString().Split('.').Count() > 1)
			{
				string ms = string.Format("0.{0}", Convert.ToInt32(x.ToString().Split('.')[1]));
				double dm = Convert.ToDouble(ms) * 60;
				m = Convert.ToInt32(dm.ToString().Split('.')[0]);
				if (dm.ToString().Split('.').Count() > 1)
				{
					string ss = string.Format("0.{0}", Convert.ToInt32(x.ToString().Split('.')[1]));
					double ds = Convert.ToDouble(ss) * 60;
					s = Convert.ToInt32(ds.ToString().Split('.')[0]);
				}
			}
			return string.Format("{0}.{1}.{2}", d, m, s);
		}
		private static string EncodingHack(string str)
		{
			var encoding = Encoding.BigEndianUnicode;
			var bytes = encoding.GetBytes(str);
			var sb = new StringBuilder();
			sb.Append((char)254);
			sb.Append((char)255);
			for (int i = 0; i < bytes.Length; ++i)
			{
				sb.Append((char)bytes[i]);
			}
			return sb.ToString();
		}
		[HttpGet("GetAppVersion")]
		public async Task<AppVersion> GetAppVersion()
		{
			string jsn = string.Empty;
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string astf = string.Format(@"{0}\appver.json", astClient);
			using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
			{
				jsn = rdra.ReadToEnd();
			}
			return JsonConvert.DeserializeObject<AppVersion>(jsn);
		}
		[HttpGet("GetAppMsg")]
		public async Task<AppMessage> GetAppMsg()
		{
			string jsn = string.Empty;
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string astf = string.Format(@"{0}\appmsg.json", astClient);
			using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
			{
				jsn = rdra.ReadToEnd();
			}
			return JsonConvert.DeserializeObject<AppMessage>(jsn);
		}
		[HttpGet("GetSampleReport")]
		public async Task<IActionResult> GetSampleReport(string lang)
		{
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string astf = string.Format(@"{0}\SampleReport({1}).pdf", astClient, lang);
			return PhysicalFile(astf, "application/pdf");
		}
		[HttpPost("GeneratePDFDoc")]
		public async Task<IActionResult> GeneratePDFDoc([FromBody] ReportParams rParms)
		{
			_logger.LogInformation("GeneratePDFDoc");
			return await CreatePdfRep(rParms);
		}
		[HttpPost("GeneratePDFDocEx")]
		public async Task<IActionResult> GeneratePDFDocEx([FromBody] ReportParams rParms)
		{
			_logger.LogInformation("GeneratePDFDocEx");
			if (rParms.name == "John Doe") return await GetSampleReport(rParms.lang);
			else return await CreatePdfRep(rParms);
		}
		private async Task<IActionResult> CreatePdfRep(ReportParams rParms)
		{
			#region Memory
			Dictionary<string, double> dctOrb = new Dictionary<string, double>();
			Dictionary<string, int> zstart = new Dictionary<string, int>();
			Dictionary<int, string> dctHou = new Dictionary<int, string>();
			Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
			Dictionary<string, string> dctPlSym = new Dictionary<string, string>();
			Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
			Dictionary<string, string> dctPlVHou = new Dictionary<string, string>();
			Horo h = new Horo();
			Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
			PdfDocument document = new PdfDocument();
			LayoutHelper helper = new LayoutHelper(document, XUnit.FromCentimeter(1.9), XUnit.FromCentimeter(3.67));
			XPdfFontOptions opts = new XPdfFontOptions(PdfFontEncoding.Unicode);
			XUnit left = XUnit.FromCentimeter(2.5);
			const int headerFontSize = 20;
			const int subFontSize = 16;
			const int normalFontSize = 10;
			const int smallFontSize = 8;
			XUnit top = helper.GetLinePosition(normalFontSize + 2, normalFontSize);
			double lineHeight = 20;
			string fnt = string.Empty;
			string fntDef = "Roboto";
			switch (rParms.lang)
			{
				case "en":
					fnt = "Roboto";
					break;
				case "hi":
					fnt = "Nirmala UI";
					break;
				case "ta":
					fnt = "Nirmala UI";
					break;
				case "te":
					fnt = "Mandali";
					break;
				default:
					fnt = "Roboto";
					break;
			}
			XFont fontHeader = new XFont(fnt, headerFontSize, XFontStyle.Bold, opts);
			XFont fontBold = new XFont(fnt, normalFontSize, XFontStyle.Bold, opts);
			XFont fontNormal = new XFont(fnt, normalFontSize, XFontStyle.Regular, opts);
			XFont fontSNor = new XFont(fnt, 8, XFontStyle.Regular, opts);
			XFont fontNote = new XFont(fnt, smallFontSize, XFontStyle.Bold, opts);
			XFont fontSub = new XFont(fnt, subFontSize, XFontStyle.Bold, opts);
			XFont fontDef = new XFont(fntDef, subFontSize, XFontStyle.Bold, opts);
			XFont fontSbsr = new XFont(fntDef, 14, XFontStyle.Bold, opts);
			XFont fontMPer = new XFont(fntDef, 10, XFontStyle.Bold, opts);
			XFont fontSPer = new XFont(fntDef, 8, XFontStyle.Bold, opts);
			var brush = new XSolidBrush(XColor.FromArgb(255, 255, 255, 255));
			var brush3 = new XSolidBrush(XColor.FromArgb(255, 211, 84, 0));
			var vbrh = new XSolidBrush(XColor.FromArgb(255, 211, 84, 0));
			var vpen = new XPen(XColor.FromArgb(255, 211, 84, 0));
			XUnit tblWidth = helper.Page.Width - 30;
			XUnit tblHeight = helper.Page.Height;
			double ht = 5;
			double cx = tblWidth / 2;
			#endregion
			bool sbsr = false;
			var db = client.GetDatabase("myypub");
			var astUsers = await Task.Run(() => { return db.GetCollection<Plan>("Plan"); });
			try
			{
				var plan =
								(from e in astUsers.AsQueryable<Plan>()
								 where e.uuid == rParms.uuid
								 select e).ToList().FirstOrDefault();
				if (plan.name == "con.mypubz.eportal.astrologer" || plan.name != "com.mypubz.eportal.adfree" || plan.name != "com.mypubz.eportal.year" || plan.name != "com.mypubz.eportal.month")
				{
					sbsr = true;
				}
			}
			catch
			{
				helper.tf.DrawString("Unauthorized request. If you are seeing this message you are either not using the service from authorized device or our service could not identify your device. Please send this report to info@vedichoroo.com.", fontSbsr, XBrushes.Red, new XRect(cx, ht, tblWidth, lineHeight * 10), XStringFormats.TopLeft);
				Guid guid = Guid.NewGuid();
				MemoryStream vstm = new MemoryStream();
				document.Save(vstm, false);
				return File(vstm, "application/pdf", string.Format("{0}.pdf", (new Guid()).ToString()));
			}
			try
			{
				//	//check if the user is authorized
				#region CALC
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				string astf = string.Empty;
				string astof = string.Empty;
				switch (rParms.lang)
				{
					case "ta":
						astf = string.Format(@"{0}\ta-dct.json", astClient);
						astof = string.Format(@"{0}\ta-astro.json", astClient);
						break;
					case "en":
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
					case "te":
						astf = string.Format(@"{0}\te-dct.json", astClient);
						astof = string.Format(@"{0}\te-astro.json", astClient);
						break;
					case "hi":
						astf = string.Format(@"{0}\hi-dct.json", astClient);
						astof = string.Format(@"{0}\hi-astro.json", astClient);
						break;
					default:
						astf = string.Format(@"{0}\en-dct.json", astClient);
						astof = string.Format(@"{0}\en-astro.json", astClient);
						break;
				}
				string adct = string.Empty;
				string aodct = string.Empty;
				using (StreamReader rdra = new StreamReader(astf, Encoding.UTF8))
				using (StreamReader rdra2 = new StreamReader(astof, Encoding.UTF8))
				{
					adct = rdra.ReadToEnd();
					aodct = rdra2.ReadToEnd();
				}
				Dictionary<string, string> dctAst = JsonConvert.DeserializeObject<Dictionary<string, string>>(adct);
				Dictionary<string, string> dctAsto = JsonConvert.DeserializeObject<Dictionary<string, string>>(aodct);
				string hinf = string.Empty;
				using (StreamReader rdr = new StreamReader(string.Format(@"{0}\hinf.json", astClient), Encoding.UTF8))
				{
					hinf = rdr.ReadToEnd();
				}
				Dictionary<string, string> dctHINF = JsonConvert.DeserializeObject<Dictionary<string, string>>(hinf);
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				string plst = string.Empty;
				string tz = TZConvert.IanaToWindows(rParms.timezone);
				TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
				int d = Convert.ToInt32(rParms.dob.Split('|')[0]);
				int m = Convert.ToInt32(rParms.dob.Split('|')[1]);
				int y = Convert.ToInt32(rParms.dob.Split('|')[2]);
				int hour = Convert.ToInt32(rParms.tob.Split('|')[0]);
				int min = Convert.ToInt32(rParms.tob.Split('|')[1]);
				int sec = Convert.ToInt32(rParms.tob.Split('|')[2]);
				double lat = Convert.ToDouble(rParms.latlng.Split('|')[0]);
				double lng = Convert.ToDouble(rParms.latlng.Split('|')[1]);
				string ayan = string.Empty;
				if (((AYANMSAS)rParms.ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)rParms.ayanid != AYANMSAS.LAHIRI))
				{
					TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
					double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
					ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)rParms.ayanid);
				}
				int dof = rParms.dstofset ?? 0;
				double tof = rParms.tzofset ?? dof;
				Horoscope mHoro = await getHoroscope(y, m, d, hour, min, sec, lat, lng, tz, (int)tof, ayan, rParms.ayanid, true);
				string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
				int rpos = 0;
				string asc_deg = string.Empty;
				string asc_sgn = string.Empty;
				string masc_sgn = string.Empty;
				string sasc_sgn = string.Empty;
				foreach (string sign in signs)
				{
					rpos++;
					if (mHoro.planetsPos.ContainsKey(sign))
					{
						var pls = mHoro.planetsPos[sign].Split('|');
						for (var k = 0; k < pls.Length; k++)
						{
							if (pls[k].Split(' ')[1] == "MEAN_NODE")
							{
								var kpos = rpos + 6;
								if (kpos > 12) kpos = (kpos - 12);
								if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
								{
									var eP = mHoro.planetsPos[signs[kpos - 1]];
									mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
								}
								else
								{
									mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
								}
								mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
							}
							else if (pls[k].Split(' ')[1] == "AC")
							{
								asc_deg = pls[k].Split(' ')[0];
								asc_sgn = sign;
							}
							else if (pls[k].Split(' ')[1] == "Mo")
							{
								masc_sgn = sign;
							}
							else if (pls[k].Split(' ')[1] == "Su")
							{
								sasc_sgn = sign;
							}
						}
					}
				}
				h.name = rParms.name;
				h.gender = rParms.gender;
				h.planetPos = mHoro.planetsPos;
				h.planetDecl = mHoro.planetsDecl;
				h.planetSped = mHoro.planetSped;
				h.dob = rParms.dob;
				h.tob = rParms.tob;
				h.latlng = rParms.latlng;
				h.timezone = rParms.timezone;
				switch (rParms.ayanid)
				{
					case (int)AYANMSAS.BVRAMAN:
						h.ayanamsa = "B V Raaman";
						break;
					case (int)AYANMSAS.FAGAN:
						h.ayanamsa = "Fagan Bradley";
						break;
					case (int)AYANMSAS.KHULLAR:
						h.ayanamsa = "KP Khullar";
						break;
					case (int)AYANMSAS.KPNEW:
						h.ayanamsa = "KP New";
						break;
					case (int)AYANMSAS.KPOLD:
						h.ayanamsa = "KP Old";
						break;
					case (int)AYANMSAS.LAHIRI:
						h.ayanamsa = "N C Lahiri";
						break;
					default:
						h.ayanamsa = "N C Lahiri";
						break;
				}
				dctPlNames.Add("Su", "Sun");
				dctPlNames.Add("Mo", "Moon");
				dctPlNames.Add("Ju", "Jupiter");
				dctPlNames.Add("Me", "Mercury");
				dctPlNames.Add("Ve", "Venus");
				dctPlNames.Add("Ma", "Mars");
				dctPlNames.Add("Sa", "Saturn");
				dctPlNames.Add("MEAN_NODE", "MEAN NODE");
				dctPlNames.Add("TRUE_NODE", "TRUE NODE");
				dctPlNames.Add("Ra", "Rahu");
				dctPlNames.Add("Ke", "Ketu");
				dctPlSym.Add("Su", "☉");
				dctPlSym.Add("Mo", "☽");
				dctPlSym.Add("Me", "☿");
				dctPlSym.Add("Ve", "♀");
				dctPlSym.Add("Ma", "♂");
				dctPlSym.Add("Ju", "♃");
				dctPlSym.Add("Sa", "♄");
				dctPlSym.Add("Ur", "♅");
				dctPlSym.Add("Ne", "♆");
				dctPlSym.Add("Pl", "♇");
				Dictionary<string, string> plpos = h.planetPos;
				string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
				int r1 = 0, r2 = 0;
				bool asc = false;
				string asc_h = string.Empty;
				string mon_h = string.Empty;
				string sun_h = string.Empty;
				string hou12 = string.Empty;
				string hou4 = string.Empty, hou9 = string.Empty, hou10 = string.Empty, hou5 = string.Empty, hou6 = string.Empty, hou2 = string.Empty, hou3 = string.Empty, hou8 = string.Empty, hou7 = string.Empty, hou11 = string.Empty;
				string ah7 = string.Empty;
				for (r1 = 0; r1 < 12; r1++)
				{
					if (asc)
					{
						r2++;
						ras[r1] += "|" + (r2).ToString();
						dctHou[r2] = ras[r1];
					}
					if (plpos.ContainsKey(ras[r1].Split('|')[0]))
					{
						foreach (string pl in plpos[ras[r1].Split('|')[0]].Split('|'))
						{
							if (pl.Split(' ')[1] == "AC")
							{
								asc = true;
								r2++;
								ras[r1] += "|" + (r2).ToString();
								asc_h = ras[r1];
								dctHou[r2] = ras[r1];
							}
						}
					}
					if (r2 == 2) hou2 = ras[r1];
					else if (r2 == 3) hou3 = ras[r1];
					else if (r2 == 4) hou4 = ras[r1];
					else if (r2 == 5) hou5 = ras[r1];
					else if (r2 == 6) hou6 = ras[r1];
					else if (r2 == 7)
					{
						hou7 = ras[r1];
						ah7 = ras[r1];
					}
					else if (r2 == 8) hou8 = ras[r1];
					else if (r2 == 9) hou9 = ras[r1];
					else if (r2 == 10) hou10 = ras[r1];
					else if (r2 == 11) hou11 = ras[r1];
					else if (r2 == 12)
					{
						hou12 = ras[r1];
						break;
					}
					if (r1 == 11) r1 = -1;
				}
				string rJ = string.Format(@"{0}\o_rashis.json", astClient);
				Dictionary<string, string> rashis;
				using (StreamReader r4 = new StreamReader(rJ))
				{
					string json4 = r4.ReadToEnd();
					rashis = JsonConvert.DeserializeObject<Dictionary<string, string>>(json4);
					foreach (string ra in ras)
					{
						bool bpl = false;
						string pkey = string.Empty;
						if (plpos.ContainsKey(ra.Split('|')[0]))
						{
							foreach (string pl in plpos[ra.Split('|')[0]].Split('|'))
							{
								int hno = Convert.ToInt32(ra.Split('|')[3]);
								string lordship = string.Empty;
								switch (hno)
								{
									case 1:
										lordship = "BOTH";
										break;
									case 5:
									case 9:
										lordship = "TRI";
										break;
									case 4:
									case 7:
									case 10:
										lordship = "KEN";
										break;
									default:
										break;
								}
								if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
								{  //consider only true  
									string[] pld = pl.Split(' ')[0].Split('.');
									PlanetHouse pHou = new PlanetHouse
									{
										code = pl.Split(' ')[1],
										name = dctPlNames[pl.Split(' ')[1]],
										hno = Convert.ToInt32(ra.Split('|')[3]),
										mhno = 0,
										shno = 0,
										pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
										dmspos = string.Format("{0}°{1}'{2}\"", pld[0], pld[1], pld[2]),
										sign = ra.Split('|')[0],
										rashi = rashis[ra.Split('|')[0]].ToString().Split('|')[1],
										signtype = ra.Split('|')[1],
										lordship = lordship,
										houselord = ra.Split('|')[2]
									};
									dctPlHou[pl.Split(' ')[1]] = pHou;
									dctPlVHou[pl.Split(' ')[1] + "-1"] = string.Format("{0}-{1}", pHou.hno, pHou.sign);
								}
							}
						}
					}
				}
				#endregion
				PlParams dParms = new PlParams();
				dParms.name = rParms.name;
				dParms.gen = rParms.gender;
				dParms.mHoro = mHoro;
				dParms.dctHou = dctHou;
				dParms.dctPlHou = dctPlHou;
				dParms.lang = rParms.lang;
				#region COVERPAGE
				ReportParams rp;
				//XImage xImg1 = XImage.FromFile(string.Format(@"{0}\my-ganesh.png", astClient));
				if (!String.IsNullOrEmpty(rParms.cimg))
				{
					XImage xImg1 = XImage.FromFile(string.Format(@"{0}\my-ganesh.png", astClient));
					helper.Gfx.DrawImage(xImg1, cx - (xImg1.PointWidth / 2), ht);
					//XImage xImg2 = XImage.FromFile(string.Format(@"{0}\my-sai.jpg", astClient));
					XImage xImg2 = await downloadFile(rParms.cimg);
					helper.Gfx.DrawImage(xImg2, cx - (xImg2.PointWidth / 2), tblHeight / 2 - xImg2.PointHeight / 2);
					string sastn = string.Format("Astrologer: {0}", rParms.cnme);
					XSize szcnt = helper.Gfx.MeasureString(sastn, fontSub);
					helper.Gfx.DrawString(sastn, fontSub, XBrushes.Black, cx - szcnt.Width / 2, tblHeight - 40, XStringFormats.Default);
					string sconeml = string.Format("Contact: {0} Email: {1}", String.IsNullOrEmpty(rParms.cnum) ? "" : rParms.cnum, String.IsNullOrEmpty(rParms.ceml) ? "" : rParms.ceml);
					XSize szcot = helper.Gfx.MeasureString(sconeml, fontSub);
					helper.Gfx.DrawString(sconeml, fontSub, XBrushes.Black, cx - szcot.Width / 2, tblHeight - 20, XStringFormats.Default);
					helper.GetLinePosition(tblHeight);
				}
				#endregion
				#region BIRTHCHART
				string[] grhs = { "Su", "Mo", "Ma", "Me", "Ju", "Ve", "Sa", "Ra", "Ke" };
				int[] zods = { 0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360 };
				XImage xImg = XImage.FromFile(string.Format(@"{0}\my-ganesh.png", astClient));
				helper.Gfx.DrawImage(xImg, cx - (xImg.PointWidth / 2), ht);
				ht += xImg.PixelHeight + 10;
				Birth binf = GetBirthInfo(h);
				if (string.IsNullOrEmpty(binf.name)) binf.name = rParms.name;
				if (binf.name.Contains("ERROR:")) return new JsonResult(binf.name);
				binf.name = rParms.name;
				XSize szlb = helper.Gfx.MeasureString(dctAst["name"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["name"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(binf.name, fontDef, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["date of birth"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["date of birth"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(binf.dob, fontDef, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["place of birth"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["place of birth"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(rParms.pob, fontDef, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["lagna"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["lagna"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(dctAst[binf.lagna.ToLower()], fontSub, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["lagna lord"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["lagna lord"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(dctAst[binf.lagna_lord.ToLower()], fontSub, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["sun sign"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["sun sign"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(dctAst[binf.sun_sign.ToLower()], fontSub, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["moon sign"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["moon sign"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(dctAst[binf.moon_sign.ToLower()], fontSub, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["birth star"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["birth star"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(string.Format("{0}", string.Format("{0} {1} {2}", dctAst[binf.birth_star.Split(' ')[0].ToLower()], binf.birth_star.Split(' ')[1], dctAst["pada"])), fontSub, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["tithi"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["tithi"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(dctAst[binf.tithi.ToLower()], fontSub, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["moon phase"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["moon phase"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(dctAst[binf.moon_phase.ToLower()], fontSub, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["yoga"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["yoga"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(binf.yoga, fontDef, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight;
				szlb = helper.Gfx.MeasureString(dctAst["karana"], fontSub);
				helper.Gfx.DrawString(string.Format("{0} :", dctAst["karana"]), fontSub, vbrh, cx - szlb.Width - 2, ht, XStringFormats.Default);
				helper.Gfx.DrawString(binf.karana, fontDef, XBrushes.Black, cx + 8, ht, XStringFormats.Default);
				ht += lineHeight + 10;
				cx = 15;
				//Birth Chart
				double cw = 350;
				double ch = 350;
				if (rParms.chtyp == "sind")
					DrawChart(rParms.name, rParms.latlng, helper, cx + (tblWidth - cw) / 2, ht, cw, ch, mHoro.planetsPos, dctAst, fnt);//, asc_sgn, asc_deg);
				else
					DrawNIChart(rParms.name, rParms.latlng, helper, cx + (tblWidth - cw) / 2, ht, cw, ch, mHoro.planetsPos, asc_sgn, dctAst, fnt);//, asc_deg);
				ht += ch;
				helper.GetLinePosition(tblHeight);
				ht = lineHeight + 10;
				XColor clr = new XColor();
				clr.R = 211;
				clr.G = 84;
				clr.B = 0;
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
				double txtp = cx + 1;
				double tht = ht + 12;
				helper.Gfx.DrawString(dctAst["planet"].ToUpper(), fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
				txtp += tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawString(dctAst["pos"].ToUpper(), fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
				txtp += tblWidth.Point * (10 / (double)100);
				helper.Gfx.DrawString(dctAst["rashi"].ToUpper(), fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
				txtp += tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawString(dctAst["nakshatra"].ToUpper(), fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
				txtp += tblWidth.Point * (25 / (double)100);
				helper.Gfx.DrawString(dctAst["pada"].ToUpper(), fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
				txtp += tblWidth.Point * (5 / (double)100);
				helper.Gfx.DrawString(dctAst["nakshatra lord"].ToUpper(), fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
				ht += lineHeight;
				double colw = tblWidth.Point * (20 / (double)100);
				foreach (var lrd in grhs)
				{
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					tht = ht + 12;
					txtp = cx + 1;
					helper.Gfx.DrawString(dctAst[lrd], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					colw = tblWidth.Point * (10 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctPlHou[lrd].dmspos, fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					colw = tblWidth.Point * (20 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[dctPlHou[lrd].rashi.ToLower()], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					colw = tblWidth.Point * (25 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					BirthStar star = calcBirthStar(dctPlHou[lrd].pos, dctPlHou[lrd].sign);
					helper.Gfx.DrawString(dctAst[star.birthStar], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					colw = tblWidth.Point * (5 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(star.pada.ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					colw = tblWidth.Point * (20 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[star.ruler.ToLower()], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					ht += lineHeight;
					cx = 15;
				}
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				tht = ht + 12;
				txtp = cx + 1;
				helper.Gfx.DrawString(dctAst["AC"], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				colw = tblWidth.Point * (10 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(string.Format("{0}°{1}'{2}\"", asc_deg.Split('.')[0], asc_deg.Split('.')[1], asc_deg.Split('.')[2]), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[asc_sgn.ToLower()], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				colw = tblWidth.Point * (25 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				double asd = dmsToDec(Convert.ToInt32(asc_deg.Split('.')[0]), Convert.ToInt32(asc_deg.Split('.')[1]), Convert.ToInt32(asc_deg.Split('.')[2]));
				BirthStar astar = calcBirthStar(asd, asc_sgn);
				helper.Gfx.DrawString(dctAst[astar.birthStar], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				colw = tblWidth.Point * (5 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(astar.pada.ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[astar.ruler.ToLower()], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				ht += lineHeight;
				cx = 15;
				ht += lineHeight + 5;
				cx = 15;
				foreach (var ph in dctPlHou)
				{
					string pst = string.Empty;
					PlanetStrength ps = checkStrength(ph.Value);
					string ds = descStrength(ph.Value, dctAst, rParms.lang);
					int dslc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, ds, fontBold, tblWidth);
					switch (ps)
					{
						case PlanetStrength.ENEMY:
							helper.tf.DrawString(descStrength(ph.Value, dctAst, rParms.lang), fontBold, XBrushes.Red, new XRect(cx, ht, tblWidth, fontBold.Height * dslc), XStringFormats.TopLeft);
							ht += fontBold.Height * dslc;
							break;
						case PlanetStrength.DEBILIATED:
							helper.tf.DrawString(descStrength(ph.Value, dctAst, rParms.lang), fontBold, XBrushes.Red, new XRect(cx, ht, tblWidth, fontBold.Height * dslc), XStringFormats.TopLeft);
							ht += fontBold.Height * dslc;
							break;
						case PlanetStrength.FRIEND:
							helper.tf.DrawString(descStrength(ph.Value, dctAst, rParms.lang), fontBold, XBrushes.DarkGreen, new XRect(cx, ht, tblWidth, fontBold.Height * dslc), XStringFormats.TopLeft);
							ht += fontBold.Height * dslc;
							break;
						case PlanetStrength.EXALTED:
							helper.tf.DrawString(descStrength(ph.Value, dctAst, rParms.lang), fontBold, XBrushes.Blue, new XRect(cx, ht, tblWidth, fontBold.Height * dslc), XStringFormats.TopLeft);
							ht += fontBold.Height * dslc;
							break;
						case PlanetStrength.MOOLTRIKONA:
							helper.tf.DrawString(descStrength(ph.Value, dctAst, rParms.lang), fontBold, XBrushes.Green, new XRect(cx, ht, tblWidth, fontBold.Height * dslc), XStringFormats.TopLeft);
							ht += fontBold.Height * dslc;
							break;
						case PlanetStrength.OWN:
							helper.tf.DrawString(descStrength(ph.Value, dctAst, rParms.lang), fontBold, XBrushes.DarkBlue, new XRect(cx, ht, tblWidth, fontBold.Height * dslc), XStringFormats.TopLeft);
							ht += fontBold.Height * dslc;
							break;
						default:
							break;
					}
				}
				#endregion
				#region SUDARSHANCHAKRA
				helper.GetLinePosition(tblHeight);
				double scw = tblWidth - 10;
				double sch = scw;
				ht = lineHeight + 40;
				DrawSChakra(rParms.name, rParms.latlng, helper, cx + (tblWidth - scw) / 2, ht, scw, sch, mHoro.planetsPos, asc_sgn, masc_sgn, sasc_sgn, dctAst, fnt);//, asc_deg);
				ht += ch;
				helper.GetLinePosition(tblHeight);
				#endregion
				#region astkvarga
				//JsonResult jRes = (JsonResult)await Astakvarga(rParms.dob, rParms.tob, rParms.latlng, rParms.timezone,  tof, rParms.ayanid);
				JsonResult jRes = (JsonResult)await AstakvargaEx(h);
				Astakavarga asv = (Astakavarga)jRes.Value;
				string desc = dctAsto["ashtakavarga"];
				ht = lineHeight + 10;
				cx = 15.0;
				helper.Gfx.DrawString(dctAst["ashtakavarga"], fontHeader, XBrushes.Black, cx, ht, XStringFormats.Default);
				ht += lineHeight;
				int lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontBold, tblWidth);
				helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, fontBold.Height * lc), XStringFormats.TopLeft);
				ht += fontBold.Height * lc;
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
				txtp = tblWidth * (10 / (double)100);
				tht = ht + 12;
				for (int i = 1; i < 13; i++)
				{
					cx += txtp;
					helper.Gfx.DrawString(string.Format("{0}({1})", i, dctAst[asv.houSgn[i.ToString()].ToLower()].Substring(0, 2)), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
					txtp = tblWidth * (7.5 / (double)100);

				}
				string[] lrds = { "Su", "Mo", "Ma", "Me", "Ju", "Ve", "Sa" };
				int[] hous = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
				Dictionary<int, int> dctHpts = new Dictionary<int, int>();
				foreach (var hou in hous)
					dctHpts[hou] = 0;
				foreach (var p in lrds)
				{
					ht += lineHeight;
					tht = ht + 12;
					cx = 15;
					colw = tblWidth.Point * (10 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[p], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					for (int i = 1; i < 13; i++)
					{
						cx += colw;
						colw = tblWidth.Point * (7.5 / (double)100);
						helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
						string ky = string.Format("{0}-{1}", p, i);
						helper.Gfx.DrawString(asv.akPts[ky].ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
						dctHpts[i] += asv.akPts[ky];
					}
				}
				ht += lineHeight;
				tht = ht + 12;
				cx = 15;
				colw = tblWidth.Point * (10 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["total"].ToUpper(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				foreach (var hou in hous)
				{
					cx += colw;
					colw = tblWidth.Point * (7.5 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctHpts[hou].ToString(), fontBold, (dctHpts[hou] < 25) ? XBrushes.Red : ((dctHpts[hou] < 30) ? XBrushes.LightGreen : XBrushes.Green), cx + 1, tht, XStringFormats.Default);
				}
				ht += lineHeight + 2;
				cx = 15;
				desc = dctAsto["avk-rul"];
				lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontBold, tblWidth);
				helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
				//helper.GetLinePosition(tblHeight);

				Dictionary<string, double> dctPts = new Dictionary<string, double>();
				foreach (var lrd in lrds)
					dctPts[lrd] = 0.0;
				#endregion
				#region shadbala
				ht += lineHeight * lc;
				cx = 15.0;
				helper.Gfx.DrawString(dctAst["shadbala"], fontHeader, XBrushes.Black, cx, ht, XStringFormats.Default);
				ht += lineHeight;

				desc = dctAsto["shadbala"];
				lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontBold, tblWidth);
				helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
				ht += fontBold.Height * lc + 10;
				string[] lrds_f = { "SUN", "MOON", "MARS", "MERCURY", "JUPITER", "VENUS", "SATURN" };
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds_f)
				{
					cx += txtp;
					helper.Gfx.DrawString(dctAst[lrd.ToLower()].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
					txtp = tblWidth * (11.4 / (double)100);

				}
				ht += lineHeight;
				//jRes = (JsonResult)await Shadbala(rParms.dob, rParms.tob, rParms.latlng, rParms.timezone, tof, rParms.ayanid);
				jRes = (JsonResult)await ShadbalaEx(rParms.dob, rParms.tob, rParms.latlng, rParms.timezone, h);
				Shadbala sdb = (Shadbala)jRes.Value;
				Dictionary<string, double> dctStan = new Dictionary<string, double>();
				foreach (var lrd in lrds) dctStan[lrd] = 0.0;
				cx = 15;
				colw = tblWidth.Point * (20 / (double)100);
				tht = ht + 12;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["ucha"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.uchBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.uchBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["saptavargaja"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.sptvBala[lrd].ToString(), fontNormal, (sdb.sptvBala[lrd] < 13.13) ? XBrushes.Red : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.sptvBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["ojayugma"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.ojayBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.ojayBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["kendradi"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.kenBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.kenBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["drekkana"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.drekBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.drekBala[lrd];
				}
				foreach (var lrd in lrds) dctStan[lrd] = dctPts[lrd];
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["sthanabala"], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					switch (lrd)
					{
						case "Ju":
						case "Me":
						case "Su":
							helper.Gfx.DrawString(dctStan[lrd].ToString(), fontBold, (dctStan[lrd] >= 165) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Mo":
						case "Ve":
							helper.Gfx.DrawString(dctStan[lrd].ToString(), fontBold, (dctStan[lrd] >= 133) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Ma":
						case "Sa":
							helper.Gfx.DrawString(dctStan[lrd].ToString(), fontBold, (dctStan[lrd] >= 96) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						default:
							helper.Gfx.DrawString(dctStan[lrd].ToString(), fontBold, XBrushes.Black, cx, tht, XStringFormats.Default);
							break;
					}
				}
				//dikbala
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["dikbala"], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					switch (lrd)
					{
						case "Ju":
						case "Me":
						case "Su":
							helper.Gfx.DrawString(sdb.dikBala[lrd].ToString(), fontBold, (sdb.dikBala[lrd] >= 35) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Mo":
						case "Ve":
							helper.Gfx.DrawString(sdb.dikBala[lrd].ToString(), fontBold, (sdb.dikBala[lrd] >= 50) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Ma":
						case "Sa":
							helper.Gfx.DrawString(sdb.dikBala[lrd].ToString(), fontBold, (sdb.dikBala[lrd] >= 30) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						default:
							helper.Gfx.DrawString(sdb.dikBala[lrd].ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
					}
					dctPts[lrd] += sdb.dikBala[lrd];
				}
				//kalabala
				Dictionary<string, double> dctKal = new Dictionary<string, double>();
				foreach (var lrd in lrds) dctKal[lrd] = 0;
				ht += lineHeight;
				cx = 15;
				colw = tblWidth.Point * (20 / (double)100);
				tht = ht + 12;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["natonnata"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.natoBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.natoBala[lrd];
					dctKal[lrd] += sdb.natoBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["tribhaga"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.triBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.triBala[lrd];
					dctKal[lrd] += sdb.triBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["paksha"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.pakBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.pakBala[lrd];
					dctKal[lrd] += sdb.pakBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["varsh mas din hora"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.hvmaBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.hvmaBala[lrd];
					dctKal[lrd] += sdb.hvmaBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["ayana"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.ayanBala[lrd].ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.ayanBala[lrd];
					dctKal[lrd] += sdb.ayanBala[lrd];
				}
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["kalabala"], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					switch (lrd)
					{
						case "Ju":
						case "Me":
						case "Su":
							helper.Gfx.DrawString(dctKal[lrd].ToString(), fontBold, (dctKal[lrd] >= 50) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Mo":
						case "Ve":
							helper.Gfx.DrawString(dctKal[lrd].ToString(), fontBold, (dctKal[lrd] >= 30) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Ma":
						case "Sa":
							helper.Gfx.DrawString(dctKal[lrd].ToString(), fontBold, (dctKal[lrd] >= 40) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						default:
							helper.Gfx.DrawString(dctKal[lrd].ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
					}
				}
				//chestabala
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["chestabala"], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					switch (lrd)
					{
						case "Ju":
						case "Me":
						case "Su":
							helper.Gfx.DrawString(sdb.chestBala[lrd].ToString(), fontBold, (sdb.chestBala[lrd] >= 112) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Mo":
						case "Ve":
							helper.Gfx.DrawString(sdb.chestBala[lrd].ToString(), fontBold, (sdb.chestBala[lrd] >= 100) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Ma":
						case "Sa":
							helper.Gfx.DrawString(sdb.chestBala[lrd].ToString(), fontBold, (sdb.chestBala[lrd] >= 67) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						default:
							helper.Gfx.DrawString(sdb.chestBala[lrd].ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
					}
					dctPts[lrd] += sdb.chestBala[lrd];
				}
				//Naisargikabala
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["naisargika bala"], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					switch (lrd)
					{
						case "Ju":
						case "Me":
						case "Su":
							helper.Gfx.DrawString(sdb.naiskBala[lrd].ToString(), fontBold, (sdb.naiskBala[lrd] >= 30) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Mo":
						case "Ve":
							helper.Gfx.DrawString(sdb.naiskBala[lrd].ToString(), fontBold, (sdb.naiskBala[lrd] >= 40) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Ma":
						case "Sa":
							helper.Gfx.DrawString(sdb.naiskBala[lrd].ToString(), fontBold, (sdb.naiskBala[lrd] >= 20) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						default:
							helper.Gfx.DrawString(sdb.naiskBala[lrd].ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
					}
					dctPts[lrd] += sdb.naiskBala[lrd];
				}
				//Drgbala
				ht += lineHeight;
				cx = 15;
				tht = ht + 12;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["drg bala"], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				txtp = tblWidth * (20 / (double)100);
				tht = ht + 12;
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sdb.drgBala[lrd].ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					dctPts[lrd] += sdb.drgBala[lrd];
				}
				ht += lineHeight;
				tht = ht + 12;
				cx = 15;
				colw = tblWidth.Point * (20 / (double)100);
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["total"], fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				foreach (var lrd in lrds)
				{
					cx += colw;
					colw = tblWidth.Point * (11.4 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					switch (lrd)
					{
						case "Ju":
						case "Me":
						case "Su":
							helper.Gfx.DrawString(dctPts[lrd].ToString(), fontBold, (dctPts[lrd] >= 392) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Mo":
						case "Ve":
							helper.Gfx.DrawString(dctPts[lrd].ToString(), fontBold, (dctPts[lrd] >= 353) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						case "Ma":
						case "Sa":
							helper.Gfx.DrawString(dctPts[lrd].ToString(), fontBold, (dctPts[lrd] >= 253) ? XBrushes.Green : XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
						default:
							helper.Gfx.DrawString(dctPts[lrd].ToString(), fontBold, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							break;
					}
				}
				helper.GetLinePosition(tblHeight);
				desc = dctAsto["shd-rul"];
				ht = lineHeight + 10;
				cx = 15.0;
				lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontBold, tblWidth);
				helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
				desc = dctAsto["shd-rul2"];
				ht += fontBold.Height * lc;
				cx = 15.0;
				lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontBold, tblWidth);
				helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
				ht += fontBold.Height * lc;
				#endregion
				#region planetaryaspects
				ht += lineHeight + 10;
				helper.Gfx.DrawString(dctAsto["planetary aspects"], fontHeader, XBrushes.Black, cx, ht, XStringFormats.Default);
				ht += fontHeader.Height;
				double rad = 80;
				double cht = ht + 125;
				XPoint[] xpt = new XPoint[12];
				XPoint[] xpt2 = new XPoint[12];
				XPoint[] xpt3 = new XPoint[12];
				double fpos = 0.0;
				foreach (var hp in mHoro.housePos)
				{
					int i = Convert.ToInt32(hp.Key);
					string s1 = hp.Value;
					double d1 = 0.0;
					double hps = dmsToDec(Convert.ToInt32(s1.Split('°')[0]), Convert.ToInt32(s1.Split('°')[1].Split('\'')[0]), Convert.ToInt32(s1.Split('°')[1].Split('\'')[1].Split('"')[0]));
					if (i == 1) fpos = hps;
					d1 = 180 - hps;
					double thta = (d1) * Math.PI / (double)180;
					double xp1 = 30 * Math.Cos(thta);
					double yp1 = 30 * Math.Sin(thta);
					double xp2 = 125 * Math.Cos(thta);
					double yp2 = 125 * Math.Sin(thta);
					double xp3 = 100 * Math.Cos(thta);
					double yp3 = 100 * Math.Sin(thta);
					double xp6 = 75 * Math.Cos(thta);
					double yp6 = 75 * Math.Sin(thta);
					xpt[i - 1].X = 11 + 125 + xp2;
					xpt[i - 1].Y = ht + 125 + yp2;
					xpt2[i - 1].X = 11 + 125 + xp3;
					xpt2[i - 1].Y = ht + 125 + yp3;
					xpt3[i - 1].X = 11 + 125 + xp6;
					xpt3[i - 1].Y = ht + 125 + yp6;
					double ang = 0.0;
					string s2 = (i < 12) ? mHoro.housePos[(i + 1).ToString()] : mHoro.housePos[(1).ToString()];
					double d2 = dmsToDec(Convert.ToInt32(s2.Split('°')[0]), Convert.ToInt32(s2.Split('°')[1].Split('\'')[0]), Convert.ToInt32(s2.Split('°')[1].Split('\'')[1].Split('"')[0]));
					if (d2 < fpos)
					{
						ang = -(d2 + (360 - hps));
						helper.Gfx.DrawPie(vpen, new XRect(15, ht, 250, 250), d1, ang);
					}
					else
					{
						d2 = 180 - d2;
						ang = d2 - d1;
						helper.Gfx.DrawPie(vpen, new XRect(15, ht, 250, 250), d1, ang);
					}
					string hou = asc_h;
					switch (i)
					{
						case 1:
							hou = asc_h;
							break;
						case 2:
							hou = hou2;
							break;
						case 3:
							hou = hou3;
							break;
						case 4:
							hou = hou4;
							break;
						case 5:
							hou = hou5;
							break;
						case 6:
							hou = hou6;
							break;
						case 7:
							hou = hou7;
							break;
						case 8:
							hou = hou8;
							break;
						case 9:
							hou = hou9;
							break;
						case 10:
							hou = hou10;
							break;
						case 11:
							hou = hou11;
							break;
						case 12:
							hou = hou12;
							break;
						default:
							break;
					}

					double thta2 = (d1 - (ang / 2)) * Math.PI / (double)180;
					double xp4 = 120 * Math.Cos(thta2);
					double yp4 = 120 * Math.Sin(thta2);
					string fl3 = string.Format("{0}\\{1}.png", astClient, (hou.Split('|')[0] == "sa") ? "sg" : hou.Split('|')[0]);
					if (System.IO.File.Exists(fl3))
						helper.DrawImage(fl3, (int)(125 + xp4) + 11, (int)(ht + 125 + yp4), 18, 18);
					double xp5 = 30 * Math.Cos(thta2);
					double yp5 = 30 * Math.Sin(thta2);
					helper.tf.DrawString(i.ToString(), fontNote, XBrushes.Black, new XRect(125 + xp5 + 11, (ht + 125) + yp5, 10, fontNote.Height), XStringFormats.TopLeft);
					if (plpos.ContainsKey(hou.Split('|')[0]))
					{
						foreach (string pl in plpos[hou.Split('|')[0]].Split('|'))
						{
							if (!mHoro.plnPos.ContainsKey(pl.Split(' ')[1])) continue;
							string[] pld = pl.Split(' ')[0].Split('.');
							string pp = string.Empty;
							if (dctPlSym.ContainsKey(pl.Split(' ')[1]))
								pp = string.Format("{0} {1}°{2}'{3}\"", dctPlSym[pl.Split(' ')[1]], pld[0], pld[1], pld[2]);
							else
								pp = string.Format("{0} {1}°{2}'{3}\"", pl.Split(' ')[1], pld[0], pld[1], pld[2]);
							double dlng = 0.0;
							if (pl.Split(' ')[1] != "AC")
								dlng = dmsToDec(Convert.ToInt32(mHoro.plnPos[pl.Split(' ')[1]].dms_lng.Split('°')[0]), Convert.ToInt32(mHoro.plnPos[pl.Split(' ')[1]].dms_lng.Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.plnPos[pl.Split(' ')[1]].dms_lng.Split('\'')[1].Split('.')[0]));
							else
								dlng = dmsToDec(Convert.ToInt32(mHoro.plnPos[pl.Split(' ')[1]].dms_lng.Split('°')[0]), Convert.ToInt32(mHoro.plnPos[pl.Split(' ')[1]].dms_lng.Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.plnPos[pl.Split(' ')[1]].dms_lng.Split('\'')[1].Split('\"')[0]));
							double symp2 = 180 - dlng;
							double theta = (symp2) * Math.PI / (double)180;
							double xp = 90 * Math.Cos(theta);
							double yp = 90 * Math.Sin(theta);
							string fl = string.Format("{0}\\{1}.png", astClient, pl.Split(' ')[1]);
							if (System.IO.File.Exists(fl))
								helper.DrawImage(fl, (int)(125 + xp) + 11, (int)(ht + 125 + yp), 18, 18);
						}
					}
				}
				helper.Gfx.DrawClosedCurve(vpen, xpt);
				helper.Gfx.DrawClosedCurve(vpen, xpt2);
				helper.Gfx.DrawClosedCurve(vpen, XBrushes.White, xpt3);
				dctOrb["Su-Mo"] = 13.5;
				dctOrb["Su-Me"] = 11.0;
				dctOrb["Su-Ve"] = 11.0;
				dctOrb["Su-Ma"] = 11.5;
				dctOrb["Su-Ju"] = 12.0;
				dctOrb["Su-Sa"] = 12.0;
				dctOrb["Su-Ur"] = 10.0;
				dctOrb["Su-Ne"] = 10.0;
				dctOrb["Su-Pl"] = 10.0;
				dctOrb["Mo-Me"] = 9.5;
				dctOrb["Mo-Ve"] = 9.5;
				dctOrb["Mo-Ma"] = 10.0;
				dctOrb["Mo-Ju"] = 10.5;
				dctOrb["Mo-Ur"] = 8.5;
				dctOrb["Mo-Ne"] = 8.5;
				dctOrb["Mo-Pl"] = 8.5;
				dctOrb["Me-Ve"] = 7.0;
				dctOrb["Me-Ma"] = 7.5;
				dctOrb["Me-Ju"] = 8.0;
				dctOrb["Me-Sa"] = 8.0;
				dctOrb["Me-Ur"] = 6.0;
				dctOrb["Me-Ne"] = 6.0;
				dctOrb["Me-Pl"] = 6.0;
				dctOrb["Ve-Ma"] = 7.5;
				dctOrb["Ve-Ju"] = 8.0;
				dctOrb["Ve-Sa"] = 8.0;
				dctOrb["Ve-Ur"] = 6.0;
				dctOrb["Ve-Ne"] = 6.0;
				dctOrb["Ve-Pl"] = 6.0;
				dctOrb["Ma-Ju"] = 8.5;
				dctOrb["Ma-Sa"] = 8.5;
				dctOrb["Ma-Ur"] = 6.5;
				dctOrb["Ma-Ne"] = 6.5;
				dctOrb["Ma-Pl"] = 6.5;
				dctOrb["Ju-Sa"] = 9.0;
				dctOrb["Ju-Ur"] = 7.0;
				dctOrb["Ju-Ne"] = 7.0;
				dctOrb["Ju-Pl"] = 7.0;
				dctOrb["Ma-Sa"] = 8.5;
				dctOrb["Ma-Ur"] = 6.5;
				dctOrb["Ma-Ne"] = 6.5;
				dctOrb["Sa-Ur"] = 7.0;
				dctOrb["Sa-Ne"] = 7.0;
				dctOrb["Sa-Pl"] = 7.0;
				dctOrb["Ur-Ne"] = 5.0;
				dctOrb["Ur-Pl"] = 5.0;
				dctOrb["Ne-Pl"] = 5.0;
				foreach (var ph in dctPlHou)
				{
					if (!string.IsNullOrEmpty(ph.Value.aspts)) continue;
					foreach (var ph2 in dctPlHou)
					{
						if (ph.Key != ph2.Key)
						{
							double ob = 0.0;
							string ky = string.Format("{0}-{1}", ph.Key, ph2.Key);
							string ky2 = string.Format("{0}-{1}", ph2.Key, ph.Key);
							if (dctOrb.ContainsKey(ky)) ob = dctOrb[ky];
							else if (dctOrb.ContainsKey(ky2)) ob = dctOrb[ky2];
							else continue;
							double dl2 = dmsToDec(Convert.ToInt32(mHoro.plnPos[ph2.Key].dms_lng.Split('°')[0]), Convert.ToInt32(mHoro.plnPos[ph2.Key].dms_lng.Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.plnPos[ph2.Key].dms_lng.Split('\'')[1].Split('.')[0]));
							double dl1 = dmsToDec(Convert.ToInt32(mHoro.plnPos[ph.Key].dms_lng.Split('°')[0]), Convert.ToInt32(mHoro.plnPos[ph.Key].dms_lng.Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.plnPos[ph.Key].dms_lng.Split('\'')[1].Split('.')[0]));

							if (dl2 >= dl1 - ob && dl2 <= dl1 + ob)
							{
								dctPlHou[ph.Key].aspts += string.Format("CONJ-{0},", ph2.Key);
							}
							else if (dl2 >= calcAng(dl1, 180) - ob && dl2 <= calcAng(dl1, 180) + ob)
							{
								dctPlHou[ph.Key].aspts += string.Format("OPP-{0},", ph2.Key);
							}
							else if (dl2 >= calcAng(dl1, 120) - ob && dl2 <= calcAng(dl1, 120) + ob)
							{
								dctPlHou[ph.Key].aspts += string.Format("TRI-{0},", ph2.Key);
							}
							else if (dl2 >= calcAng(dl1, 90) - ob && dl2 <= calcAng(dl1, 90) + ob)
							{
								dctPlHou[ph.Key].aspts += string.Format("SQR-{0},", ph2.Key);
							}
							else if (dl2 >= calcAng(dl1, 60) - ob && dl2 <= calcAng(dl1, 60) + ob)
							{
								dctPlHou[ph.Key].aspts += string.Format("SXT-{0},", ph2.Key);
							}
						}
					}
				}
				string sopp = string.Empty;
				string ssqr = string.Empty;
				string sconj = string.Empty;
				string strn = string.Empty;
				string ssxt = string.Empty;
				string svist = string.Empty;
				string cjf = string.Empty;
				string sft = string.Empty;
				string hrd = string.Empty;
				if (rParms.lang == "en") cjf = string.Format(@"{0}\en-CONJ.json", astClient);
				else if (rParms.lang == "hi") cjf = string.Format(@"{0}\hi-CONJ.json", astClient);
				else if (rParms.lang == "ta") cjf = string.Format(@"{0}\ta-CONJ.json", astClient);
				else if (rParms.lang == "te") cjf = string.Format(@"{0}\te-CONJ.json", astClient);
				if (rParms.lang == "en") sft = string.Format(@"{0}\en-SOFT.json", astClient);
				else if (rParms.lang == "hi") sft = string.Format(@"{0}\hi-SOFT.json", astClient);
				else if (rParms.lang == "ta") sft = string.Format(@"{0}\ta-SOFT.json", astClient);
				else if (rParms.lang == "te") sft = string.Format(@"{0}\te-SOFT.json", astClient);
				if (rParms.lang == "en") hrd = string.Format(@"{0}\en-HARD.json", astClient);
				else if (rParms.lang == "hi") hrd = string.Format(@"{0}\hi-HARD.json", astClient);
				else if (rParms.lang == "ta") hrd = string.Format(@"{0}\ta-HARD.json", astClient);
				else if (rParms.lang == "te") hrd = string.Format(@"{0}\te-HARD.json", astClient);
				using (StreamReader r3 = new StreamReader(cjf))
				using (StreamReader r4 = new StreamReader(sft))
				using (StreamReader r5 = new StreamReader(hrd))
				{
					string jsn = r3.ReadToEnd();
					dynamic dyconj = JsonConvert.DeserializeObject(jsn);
					jsn = r4.ReadToEnd();
					dynamic dysft = JsonConvert.DeserializeObject(jsn);
					jsn = r5.ReadToEnd();
					dynamic dyhrd = JsonConvert.DeserializeObject(jsn);
					double ht1 = ht + 25;
					double xt1 = 250 + 41;
					int acnt = 0;
					foreach (var ph in dctPlHou)
					{
						if (string.IsNullOrEmpty(ph.Value.aspts)) continue;
						foreach (var asp in ph.Value.aspts.Split(','))
						{
							if (asp.Trim() == string.Empty) continue;
							double dl1 = dmsToDec(Convert.ToInt32(mHoro.plnPos[ph.Key].dms_lng.Split('°')[0]), Convert.ToInt32(mHoro.plnPos[ph.Key].dms_lng.Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.plnPos[ph.Key].dms_lng.Split('\'')[1].Split('.')[0]));
							double dl2 = dmsToDec(Convert.ToInt32(mHoro.plnPos[asp.Split('-')[1]].dms_lng.Split('°')[0]), Convert.ToInt32(mHoro.plnPos[asp.Split('-')[1]].dms_lng.Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.plnPos[asp.Split('-')[1]].dms_lng.Split('\'')[1].Split('.')[0]));
							dl1 = 180 - dl1;
							double tta1 = (dl1) * Math.PI / (double)180;
							double xp1 = 75 * Math.Cos(tta1);
							double yp1 = 75 * Math.Sin(tta1);
							dl2 = 180 - dl2;
							double tta2 = (dl2) * Math.PI / (double)180;
							double xp2 = 75 * Math.Cos(tta2);
							double yp2 = 75 * Math.Sin(tta2);
							XSize sz = helper.Gfx.MeasureString(dctAst[ph.Value.name.ToLower()], fontBold);
							XSize sz2 = helper.Gfx.MeasureString(dctAst[asp.Split('-')[1]], fontBold);
							string fl = string.Empty;
							fl = string.Format("{0}\\opp.png", astClient);
							if (acnt > 11)
							{
								acnt = 0;
								ht1 = ht + 25;
								xt1 += 91;
							}
							switch (asp.Split('-')[0])
							{
								case "CONJ":
									helper.Gfx.DrawLine(vpen, 125 + 11 + xp1, 125 + ht + yp1, 125 + 11 + xp2, 125 + ht + yp2);
									helper.Gfx.DrawString(dctAst[ph.Value.name.ToLower()], fontBold, XBrushes.Black, new XRect(xt1, (ht1 + 25), sz.Width, sz.Height), XStringFormats.TopLeft);
									fl = string.Format("{0}\\conj.png", astClient);
									if (System.IO.File.Exists(fl))
										helper.DrawImage(fl, (int)(xt1 + sz.Width + 2), (int)(ht1 + 25), 16, 16);
									helper.Gfx.DrawString(dctAst[asp.Split('-')[1]], fontBold, XBrushes.Black, new XRect(xt1 + sz.Width + 24, (ht1 + 25), sz2.Width, sz2.Height), XStringFormats.TopLeft);
									ht1 += sz.Height + 5;
									try
									{
										string ky = string.Format("{0}-{1}", ph.Key, asp.Split('-')[1]);
										if (!svist.Contains(("CONJ-" + ky)))
										{
											string kv = dyconj[ky];
											if (string.IsNullOrEmpty(kv))
											{
												ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
												if (!svist.Contains(("CONJ-" + ky))) kv = dyconj[ky];
											}
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (sconj == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["conjunctiom"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["conjunctiom"], dctAst[asp.Split('-')[1]]);
												sconj += stg + kv;
												svist += "CONJ-" + ky;
											}
										}
									}
									catch
									{
										string ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
										if (!svist.Contains(("CONJ-" + ky)))
										{
											string stg = (sconj == string.Empty) ?
												string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["conjunction"], dctAst[asp.Split('-')[1]]) :
												string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["conjunction"], dctAst[asp.Split('-')[1]]);
											string kv = dyconj[ky];
											if (!string.IsNullOrEmpty(kv))
											{
												sconj += stg + kv;
												svist += "CONJ-" + ky;
											}
										}
									}
									break;
								case "OPP":
									helper.Gfx.DrawLine(vpen, 125 + 11 + xp1, 125 + ht + yp1, 125 + 11 + xp2, 125 + ht + yp2);
									helper.Gfx.DrawString(dctAst[ph.Value.name.ToLower()], fontBold, XBrushes.Black, new XRect(xt1, (ht1 + 25), sz.Width, sz.Height), XStringFormats.TopLeft);
									fl = string.Format("{0}\\opp.png", astClient);
									if (System.IO.File.Exists(fl))
										helper.DrawImage(fl, (int)(xt1 + sz.Width + 2), (int)(ht1 + 25), 16, 16);
									helper.Gfx.DrawString(dctAst[asp.Split('-')[1]], fontBold, XBrushes.Black, new XRect(xt1 + sz.Width + 24, (ht1 + 25), sz2.Width, sz2.Height), XStringFormats.TopLeft);
									ht1 += sz.Height + 5;
									try
									{
										string ky = string.Format("{0}-{1}", ph.Key, asp.Split('-')[1]);
										if (!svist.Contains("OPP-" + ky))
										{
											string kv = dyhrd[ky];
											if (string.IsNullOrEmpty(kv))
											{
												ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
												if (!svist.Contains(("OPP-" + ky))) kv = dyhrd[ky];
											}
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (sopp == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["opposition"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["opposition"], dctAst[asp.Split('-')[1]]);
												sopp += (kv.IndexOf('|') != -1) ?
													stg + kv.Split('|')[1] : stg + kv;
												svist += "OPP-" + ky;
											}
										}
									}
									catch
									{
										string ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
										if (!svist.Contains("OPP-" + ky))
										{
											string kv = dyhrd[ky];
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (sopp == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["opposition"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["opposition"], dctAst[asp.Split('-')[1]]);
												sopp += (kv.IndexOf('|') != -1) ?
													stg + kv.Split('|')[1] : stg + kv;
												svist += "OPP-" + ky;
											}
										}
									}
									break;
								case "TRI":
									helper.Gfx.DrawLine(XPens.Red, 125 + 11 + xp1, 125 + ht + yp1, 125 + 11 + xp2, 125 + ht + yp2);
									helper.Gfx.DrawString(dctAst[ph.Value.name.ToLower()], fontBold, XBrushes.Black, new XRect(xt1, (ht1 + 25), sz.Width, sz.Height), XStringFormats.TopLeft);
									fl = string.Format("{0}\\tri.png", astClient);
									if (System.IO.File.Exists(fl))
										helper.DrawImage(fl, (int)(xt1 + sz.Width + 2), (int)(ht1 + 25), 16, 16);
									helper.Gfx.DrawString(dctAst[asp.Split('-')[1]], fontBold, XBrushes.Black, new XRect(xt1 + sz.Width + 24, (ht1 + 25), sz2.Width, sz2.Height), XStringFormats.TopLeft);
									ht1 += sz.Height + 5;
									try
									{
										string ky = string.Format("{0}-{1}", ph.Key, asp.Split('-')[1]);
										if (!svist.Contains("TRI-" + ky))
										{
											string kv = dysft[ky];
											if (string.IsNullOrEmpty(kv))
											{
												ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
												if (!svist.Contains(("TRI-" + ky))) kv = dysft[ky];
											}
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (strn == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["trine"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["trine"], dctAst[asp.Split('-')[1]]);
												strn += stg + kv;
												svist += "TRI-" + ky;
											}
										}
									}
									catch
									{
										string ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
										if (!svist.Contains("TRI-" + ky))
										{
											string kv = dysft[ky];
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (strn == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["trine"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["trine"], dctAst[asp.Split('-')[1]]);
												strn += stg + kv;
												svist += "TRI-" + ky;
											}
										}
									}
									break;
								case "SQR":
									helper.Gfx.DrawLine(XPens.Blue, 125 + 11 + xp1, 125 + ht + yp1, 125 + 11 + xp2, 125 + ht + yp2);
									helper.Gfx.DrawString(dctAst[ph.Value.name.ToLower()], fontBold, XBrushes.Black, new XRect(xt1, (ht1 + 25), sz.Width, sz.Height), XStringFormats.TopLeft);
									fl = string.Format("{0}\\sqr.png", astClient);
									if (System.IO.File.Exists(fl))
										helper.DrawImage(fl, (int)(xt1 + sz.Width + 2), (int)(ht1 + 25), 16, 16);
									helper.Gfx.DrawString(dctAst[asp.Split('-')[1]], fontBold, XBrushes.Black, new XRect(xt1 + sz.Width + 24, (ht1 + 25), sz2.Width, sz2.Height), XStringFormats.TopLeft);
									ht1 += sz.Height + 5;
									try
									{
										string ky = string.Format("{0}-{1}", ph.Key, asp.Split('-')[1], ph.Key);
										if (!svist.Contains("SQR-" + ky))
										{
											string kv = dyhrd[ky];
											if (string.IsNullOrEmpty(kv))
											{
												ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
												if (!svist.Contains(("SQR-" + ky))) kv = dyhrd[ky];
											}
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (ssqr == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["square"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["square"], dctAst[asp.Split('-')[1]]);
												ssqr += stg + kv.Split('|')[0];
												svist += "SQR" + ky;
											}
										}
									}
									catch
									{
										string ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
										if (!svist.Contains("SQR-" + ky))
										{
											string kv = dyhrd[ky];
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (ssqr == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["square"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["square"], dctAst[asp.Split('-')[1]]);
												ssqr += stg + kv.Split('|')[0];
												svist += "SQR" + ky;
											}
										}
									}
									break;
								case "SXT":
									helper.Gfx.DrawLine(XPens.Green, 125 + 11 + xp1, 125 + ht + yp1, 125 + 11 + xp2, 125 + ht + yp2);
									helper.Gfx.DrawString(dctAst[ph.Value.name.ToLower()], fontBold, XBrushes.Black, new XRect(xt1, (ht1 + 25), sz.Width, sz.Height), XStringFormats.TopLeft);
									fl = string.Format("{0}\\sxt.png", astClient);
									if (System.IO.File.Exists(fl))
										helper.DrawImage(fl, (int)(xt1 + sz.Width + 2), (int)(ht1 + 25), 16, 16);
									helper.Gfx.DrawString(dctAst[asp.Split('-')[1]], fontBold, XBrushes.Black, new XRect(xt1 + sz.Width + 24, (ht1 + 25), sz2.Width, sz2.Height), XStringFormats.TopLeft);
									ht1 += sz.Height + 5;
									try
									{
										string ky = string.Format("{0}-{1}", ph.Key, asp.Split('-')[1]);
										if (!svist.Contains("SXT-" + ky))
										{
											string kv = dysft[ky];
											if (string.IsNullOrEmpty(kv))
											{
												ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
												if (!svist.Contains(("SXT-" + ky))) kv = dysft[ky];
											}
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (ssxt == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["sextile"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["sextile"], dctAst[asp.Split('-')[1]]);
												ssxt += stg + kv;
												svist += "SXT-" + ky;
											}
										}
									}
									catch
									{
										string ky = string.Format("{0}-{1}", asp.Split('-')[1], ph.Key);
										if (!svist.Contains("SXT-" + ky))
										{
											string kv = dysft[ky];
											if (!string.IsNullOrEmpty(kv))
											{
												string stg = (ssxt == string.Empty) ?
													string.Format("{0} {1} {2} ", dctAst[ph.Key], dctAst["sextile"], dctAst[asp.Split('-')[1]]) :
													string.Format(". {0} {1} {2} ", dctAst[ph.Key], dctAst["sextile"], dctAst[asp.Split('-')[1]]);
												ssxt += stg + kv;
												svist += "SXT-" + ky;
											}
										}
									}
									break;
								default:
									break;
							}
							acnt++;
						}
					}
				}
				ht += 250 + lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}

				if (strn != string.Empty)
				{
					string st = string.Format("{0}(", dctAst["trine"]);
					XSize sz = helper.Gfx.MeasureString(st, fontSub);
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15, ht, sz.Width, sz.Height), XStringFormats.TopLeft);
					string fl = string.Format("{0}\\tri.png", astClient);
					if (System.IO.File.Exists(fl))
						helper.DrawImage(fl, (int)(11 + sz.Width), (int)(ht), 18, 18);
					st = ")";
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15 + sz.Width + 18, ht, fontSub.Size, fontSub.Size), XStringFormats.TopLeft);
					ht += sz.Height;
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, strn, fontNormal, tblWidth);
					if ((ht + (fontNormal.Height * lc)) >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(strn, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc;
				}
				if (ssxt != string.Empty)
				{
					string st = string.Format("{0}(", dctAst["sextile"]);
					XSize sz = helper.Gfx.MeasureString(st, fontSub);
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15, ht, sz.Width, sz.Height), XStringFormats.TopLeft);
					string fl = string.Format("{0}\\sxt.png", astClient);
					if (System.IO.File.Exists(fl))
						helper.DrawImage(fl, (int)(11 + sz.Width), (int)(ht), 18, 18);
					st = ")";
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15 + sz.Width + 18, ht, fontSub.Size, fontSub.Size), XStringFormats.TopLeft);
					ht += sz.Height;
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, ssxt, fontNormal, tblWidth);
					if ((ht + (fontNormal.Height * lc)) >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(ssxt, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc;
				}
				if (sconj != string.Empty)
				{
					string st = string.Format("{0}(", dctAst["conjunction"]);
					XSize sz = helper.Gfx.MeasureString(st, fontSub);
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15, ht, sz.Width, sz.Height), XStringFormats.TopLeft);
					string fl = string.Format("{0}\\conj.png", astClient);
					if (System.IO.File.Exists(fl))
						helper.DrawImage(fl, (int)(11 + sz.Width), (int)(ht), 18, 18);
					st = ")";
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15 + sz.Width + 18, ht, fontSub.Size, fontSub.Size), XStringFormats.TopLeft);
					ht += sz.Height;
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, sconj, fontNormal, tblWidth);
					if ((ht + (fontNormal.Height * lc)) >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(sconj, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc;
				}
				if (sopp != string.Empty)
				{
					string st = string.Format("{0}(", dctAst["opposition"]);
					XSize sz = helper.Gfx.MeasureString(st, fontSub);
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15, ht, sz.Width, sz.Height), XStringFormats.TopLeft);
					string fl = string.Format("{0}\\opp.png", astClient);
					if (System.IO.File.Exists(fl))
						helper.DrawImage(fl, (int)(11 + sz.Width), (int)(ht), 18, 18);
					st = ")";
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15 + sz.Width + 18, ht, fontSub.Size, fontSub.Size), XStringFormats.TopLeft);
					ht += sz.Height;
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, sopp, fontNormal, tblWidth);
					if ((ht + (fontNormal.Height * lc)) >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(sopp, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc;
				}
				if (ssqr != string.Empty)
				{
					string st = string.Format("{0}(", dctAst["square"]);
					XSize sz = helper.Gfx.MeasureString(st, fontSub);
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15, ht, sz.Width, sz.Height), XStringFormats.TopLeft);
					string fl = string.Format("{0}\\sqr.png", astClient);
					if (System.IO.File.Exists(fl))
						helper.DrawImage(fl, (int)(11 + sz.Width), (int)(ht), 18, 18);
					st = ")";
					helper.Gfx.DrawString(st, fontSub, XBrushes.Black, new XRect(15 + sz.Width + 18, ht, fontSub.Size, fontSub.Size), XStringFormats.TopLeft);
					ht += sz.Height;
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, ssqr, fontNormal, tblWidth);
					if ((ht + (fontNormal.Height * lc)) >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(ssqr, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc;
				}
				#endregion
				#region KP
				//KP
				//helper.GetLinePosition(tblHeight);
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				cx = 15;
				helper.Gfx.DrawString(string.Format("{0} {1} & {2} {3}", dctAst["kp"], dctAst["planet"], dctAst["house"], dctAst["significators"]), fontHeader, XBrushes.Black, cx, ht, XStringFormats.Default);
				ht += fontHeader.Height;
				helper.Gfx.DrawString(string.Format("{0} & {1} {2}", dctAst["planet"], dctAst["its"], dctAst["sub lords"]), fontSub, XBrushes.Black, new XRect(15, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
				ht += fontSub.Height;
				string[] subl = { "PLANET", "POS", "SIGN", "SIGN LORD", "STAR LORD", "SUB LORD", "SUB SUB LORD" };
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
				txtp = tblWidth * (14.28 / (double)100);
				tht = ht + 12;
				foreach (var sb in subl)
				{
					helper.Gfx.DrawString(dctAst[sb.ToLower()].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
					txtp = tblWidth * (14.28 / (double)100);
					cx += txtp;
				}
				ht += lineHeight;
				colw = tblWidth.Point * (14.28 / (double)100);
				foreach (var ph in dctPlHou)
				{
					if (ht >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					cx = 15;
					tht = ht + 12;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[ph.Value.name.ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(ph.Value.dmspos, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[ph.Value.rashi.ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					double dl = dmsToDec(zstart[ph.Value.sign] + Convert.ToInt32(ph.Value.dmspos.Split('°')[0]), Convert.ToInt32(ph.Value.dmspos.Split('°')[1].Split('\'')[0]), Convert.ToInt32(ph.Value.dmspos.Split('\'')[1].Split('\"')[0]));
					string subz = getSUBZ(ph.Value.sign, dl);
					dctPlHou[ph.Key].signl = subz.Split('-')[0];
					dctPlHou[ph.Key].starl = subz.Split('-')[1];
					dctPlHou[ph.Key].subl = subz.Split('-')[2];
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[subz.Split('-')[0].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[subz.Split('-')[1].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[subz.Split('-')[2].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					string sbsb = getSubSub(dl, string.Format("{0}-{1}", subz.Split('-')[1], subz.Split('-')[2]));
					if (sbsb != string.Empty)
						helper.Gfx.DrawString(dctAst[sbsb.ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					ht += lineHeight;
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				Dictionary<int, House> dctHlords = new Dictionary<int, House>();
				helper.Gfx.DrawString(string.Format("{0} {1} & {2} {3}", dctAst["house"], dctAst["cusps"], dctAst["its"], dctAst["sub lords"]), fontSub, XBrushes.Black, new XRect(15, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
				ht += fontSub.Height;
				string[] hsubl = { "CUSP", "POS", "SIGN", "SIGN LORD", "STAR LORD", "SUB LORD", "SUB SUB LORD" };
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
				txtp = tblWidth * (14.28 / (double)100);
				tht = ht + 12;
				cx = 15;
				foreach (var sb in hsubl)
				{
					helper.Gfx.DrawString(dctAst[sb.ToLower()], fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
					txtp = tblWidth * (14.28 / (double)100);
					cx += txtp;
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				colw = tblWidth.Point * (14.28 / (double)100);
				foreach (var ph in mHoro.housePos)
				{
					string zh = string.Empty;
					switch (ph.Key)
					{
						case "1":
							zh = asc_h;
							break;
						case "2":
							zh = hou2;
							break;
						case "3":
							zh = hou3;
							break;
						case "4":
							zh = hou4;
							break;
						case "5":
							zh = hou5;
							break;
						case "6":
							zh = hou6;
							break;
						case "7":
							zh = hou7;
							break;
						case "8":
							zh = hou8;
							break;
						case "9":
							zh = hou10;
							break;
						case "10":
							zh = hou10;
							break;
						case "11":
							zh = hou11;
							break;
						case "12":
							zh = hou12;
							break;
						default:
							break;
					}
					cx = 15;
					tht = ht + 12;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(ph.Key, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(ph.Value, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[rashis[zh.Split('|')[0]].Split('|')[1].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					double dl = dmsToDec(Convert.ToInt32(ph.Value.Split('°')[0]), Convert.ToInt32(ph.Value.Split('°')[1].Split('\'')[0]), Convert.ToInt32(ph.Value.Split('\'')[1].Split('\"')[0]));
					string subz = getSUB(dl);
					House hl = new House();
					hl.hno = Convert.ToInt32(ph.Key);
					hl.pos = dl;
					hl.sign = zh.Split('|')[0];
					hl.signl = subz.Split('-')[0];
					hl.starl = subz.Split('-')[1];
					hl.subl = subz.Split('-')[0];
					dctHlords[hl.hno] = hl;
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[subz.Split('-')[0].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[subz.Split('-')[1].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[subz.Split('-')[2].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					string sbsb = getSubSub(dl, string.Format("{0}-{1}", subz.Split('-')[1], subz.Split('-')[2]));
					helper.Gfx.DrawString(dctAst[sbsb], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					ht += lineHeight;
					if (ht >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
				}
				cx = 15;
				tht = ht + 12;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["ascendant"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(string.Format("{0}°{1}'{2}\"", zstart[asc_sgn] + Convert.ToInt32(asc_deg.Split('.')[0]), asc_deg.Split('.')[1], asc_deg.Split('.')[2]), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(rashis[asc_sgn].Split('|')[1], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				double zd = dmsToDec(zstart[asc_sgn] + Convert.ToInt32(asc_deg.Split('.')[0]), Convert.ToInt32(asc_deg.Split('.')[1]), Convert.ToInt32(asc_deg.Split('.')[2]));
				string sbz = getSUB(zd);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[sbz.Split('-')[0].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[sbz.Split('-')[1].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[sbz.Split('-')[2].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[getSubSub(zd, string.Format("{0}-{1}", sbz.Split('-')[1], sbz.Split('-')[2]))], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				ht += lineHeight;
				double dsu = dmsToDec(zstart[dctPlHou["Su"].sign] + Convert.ToInt32(dctPlHou["Su"].dmspos.Split('°')[0]), Convert.ToInt32(dctPlHou["Su"].dmspos.Split('°')[1].Split('\'')[0]), Convert.ToInt32(dctPlHou["Su"].dmspos.Split('\'')[1].Split('\"')[0]));
				double dmo = dmsToDec(zstart[dctPlHou["Mo"].sign] + Convert.ToInt32(dctPlHou["Mo"].dmspos.Split('°')[0]), Convert.ToInt32(dctPlHou["Mo"].dmspos.Split('°')[1].Split('\'')[0]), Convert.ToInt32(dctPlHou["Mo"].dmspos.Split('\'')[1].Split('\"')[0]));
				double fop = calcFortuna(dsu, dmo, zd);
				cx = 15;
				tht = ht + 12;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst["fortuna"], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				string fdm = dms(Math.Round(fop, 2));
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(string.Format("{0}°{1}'{2}\"", fdm.Split('.')[0], fdm.Split('.')[1], fdm.Split('.')[2]), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				int fhn = -1;
				foreach (var hp in mHoro.housePos)
				{
					int v_iter = Convert.ToInt32(hp.Key);
					int cur_h = (v_iter == 12) ? 1 : v_iter + 1;
					double mins1 = dmsToDec(Convert.ToInt32(mHoro.housePos[hp.Key].Split('°')[0]), Convert.ToInt32(mHoro.housePos[hp.Key].Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.housePos[hp.Key].Split('\'')[1].Split('\"')[0]));
					double mins2 = dmsToDec(Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('°')[0]), Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('\'')[1].Split('\"')[0]));
					if (mins2 < mins1)
					{
						if (fop >= 0) { fhn = cur_h; break; }
					}
					else
					{
						if (fop >= mins1 && fop < mins2) { fhn = v_iter; break; }
					}
				}
				string fhou = string.Empty;
				switch (fhn)
				{
					case 1:
						fhou = asc_h;
						break;
					case 2:
						fhou = hou2;
						break;
					case 3:
						fhou = hou3;
						break;
					case 4:
						fhou = hou4;
						break;
					case 5:
						fhou = hou5;
						break;
					case 6:
						fhou = hou6;
						break;
					case 7:
						fhou = hou7;
						break;
					case 8:
						fhou = hou8;
						break;
					case 9:
						fhou = hou9;
						break;
					case 10:
						fhou = hou10;
						break;
					case 11:
						fhou = hou11;
						break;
					case 12:
						fhou = hou12;
						break;
					default:
						break;
				}
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[rashis[fhou.Split('|')[0]].Split('|')[1].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				sbz = getSUB(fop);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[sbz.Split('-')[0].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[sbz.Split('-')[1].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				helper.Gfx.DrawString(dctAst[sbz.Split('-')[2].ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				cx += colw;
				helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
				string fsbsb = getSubSub(fop, string.Format("{0}-{1}", sbz.Split('-')[1], sbz.Split('-')[2]));
				helper.Gfx.DrawString(dctAst[fsbsb.ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				foreach (var ph in dctPlHou)
				{
					double zp = dmsToDec(zstart[ph.Value.sign] + Convert.ToInt32(ph.Value.dmspos.Split('°')[0]), Convert.ToInt32(ph.Value.dmspos.Split('°')[1].Split('\'')[0]), Convert.ToInt32(ph.Value.dmspos.Split('\'')[1].Split('\"')[0]));
					foreach (var hp in mHoro.housePos)
					{
						int v_iter = Convert.ToInt32(hp.Key);
						int cur_h = (v_iter == 12) ? 1 : v_iter + 1;
						double mins1 = dmsToDec(Convert.ToInt32(mHoro.housePos[hp.Key].Split('°')[0]), Convert.ToInt32(mHoro.housePos[hp.Key].Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.housePos[hp.Key].Split('\'')[1].Split('\"')[0]));
						double mins2 = dmsToDec(Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('°')[0]), Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('°')[1].Split('\'')[0]), Convert.ToInt32(mHoro.housePos[cur_h.ToString()].Split('\'')[1].Split('\"')[0]));
						if (mins2 < mins1)
						{
							if (zp > 0 && zp < mins2 || zp >= mins2 && zp < 360) { dctPlHou[ph.Key].phno = cur_h; break; }
						}
						else
						{
							if (zp >= mins1 && zp < mins2) { dctPlHou[ph.Key].phno = v_iter; break; }
						}
					}
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				cx = 15;
				helper.Gfx.DrawString(string.Format("{0} {1}", dctAst["planet"], dctAst["significators"]), fontSub, XBrushes.Black, new XRect(15, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
				ht += fontSub.Height;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				string[] psgs = { "PLANET", "L1", "L2", "L3", "L4" };
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
				txtp = tblWidth * (15 / (double)100);
				tht = ht + 12;
				cx = 15;
				foreach (var sb in psgs)
				{
					helper.Gfx.DrawString(dctAst[sb.ToLower()].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
					txtp = tblWidth * (21.25 / (double)100);
					cx += txtp;
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				foreach (var ph in dctPlHou)
				{
					List<int> lstsgs = new List<int>();
					cx = 15;
					tht = ht + 12;
					colw = tblWidth * (15 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[ph.Value.name.ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					BirthStar str = calcBirthStar(ph.Value.pos, ph.Value.sign);
					cx += colw;
					colw = tblWidth * (21.25 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					string ru = str.ruler.Substring(0, 2);
					ru = string.Format("{0}{1}", char.ToUpper(ru[0]), ru[1]);
					var sl_hno = get_hno_by_pos(zstart[dctPlHou[ru].sign] + dctPlHou[ru].pos, mHoro.housePos);
					var hno = get_hno_by_pos(zstart[dctPlHou[ph.Value.code].sign] + ph.Value.pos, mHoro.housePos);
					var sl_own_hnos = get_own_houses(ru, mHoro.housePos);
					var pl_own_hnos = get_own_houses(ph.Value.code, mHoro.housePos);
					dctPlHou[ph.Key].dsigs = new Dictionary<string, string>();
					dctPlHou[ph.Key].dsigs["L1"] = sl_hno.ToString();
					dctPlHou[ph.Key].dsigs["L2"] = hno.ToString();
					dctPlHou[ph.Key].dsigs["L3"] = sl_own_hnos;
					dctPlHou[ph.Key].dsigs["L4"] = pl_own_hnos;
					helper.Gfx.DrawString(sl_hno.ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					//helper.Gfx.DrawString(dctHou[dctPlHou[ru].phno].Split('|')[3], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					//lstsgs.Add(Convert.ToInt32(dctHou[dctPlHou[ru].phno].Split('|')[3]));
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(hno.ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					//helper.Gfx.DrawString(ph.Value.phno.ToString(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					//	if (!lstsgs.Contains(ph.Value.phno)) lstsgs.Add(ph.Value.phno);
					//string oh = string.Empty;
					//foreach(var r in ras)
					//{
					//if (r.Split('|')[2] == ru)
					//{
					//oh += r.Split('|')[3] + ',';
					//if (!lstsgs.Contains(Convert.ToInt32(r.Split('|')[3]))) lstsgs.Add(Convert.ToInt32(r.Split('|')[3]));
					//}
					//}
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(sl_own_hnos, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					//helper.Gfx.DrawString(oh, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					//oh = string.Empty;
					//foreach (var r in ras)
					//{
					//if (r.Split('|')[2] == ph.Value.code)
					//{
					//oh += r.Split('|')[3] + ',';
					//if (!lstsgs.Contains(Convert.ToInt32(r.Split('|')[3]))) lstsgs.Add(Convert.ToInt32(r.Split('|')[3]));
					//}
					//}
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(pl_own_hnos, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					ht += lineHeight;
					lstsgs.Add(sl_hno);
					lstsgs.Add(hno);
					foreach (var oh in sl_own_hnos.Split(',')) if (oh.Trim() != string.Empty) lstsgs.Add(Convert.ToInt32(oh));
					foreach (var oh in pl_own_hnos.Split(',')) if (oh.Trim() != string.Empty) lstsgs.Add(Convert.ToInt32(oh));
					lstsgs.Sort();
					string p_sigs = String.Join(",", lstsgs.ToArray());
					Dictionary<string, string> d1 = await analyzeLifEvts(dctPlNames[ph.Key].ToLower(), p_sigs);
					dctPlHou[ph.Key].lifevts = new Dictionary<string, string>();
					d1.ToList().ForEach(x => dctPlHou[ph.Key].lifevts.Add(x.Key, x.Value));
					dctPlHou[ph.Key].sigs = lstsgs.ToArray();
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				cx = 15;
				helper.Gfx.DrawString(string.Format("{0} {1}", dctAst["house"], dctAst["significators"]), fontSub, XBrushes.Black, new XRect(15, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
				ht += fontSub.Height;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				string[] hsgs = { "HOUSE", "L1", "L2", "L3", "L4" };
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
				txtp = tblWidth * (15 / (double)100);
				tht = ht + 12;
				cx = 15;
				foreach (var sb in hsgs)
				{
					helper.Gfx.DrawString(dctAst[sb.ToLower()], fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
					txtp = tblWidth * (21.25 / (double)100);
					cx += txtp;
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				foreach (var hp in dctHlords)
				{
					string l2s = string.Empty;
					string l1s = string.Empty;
					string l3s = string.Empty;
					string l4s = string.Empty;
					foreach (var ph in dctPlHou)
					{
						if (ph.Value.hno == hp.Key)
						{
							l2s += dctAst[ph.Value.name.ToLower()] + ",";
							if (hp.Value.starl == ph.Value.name) l1s += dctAst[ph.Value.name.ToLower()] + ',';
						}
						if (hp.Value.signl == ph.Value.name) l3s += dctAst[ph.Value.name.ToLower()] + ',';
					}
					l4s = dctAst[hp.Value.signl.ToLower()];
					cx = 15;
					tht = ht + 12;
					colw = tblWidth * (15 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(hp.Key.ToString().ToLower(), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					colw = tblWidth * (21.25 / (double)100);
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(l1s, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(l2s, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(l3s, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					cx += colw;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(l4s, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
					ht += lineHeight;
					if (ht >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				cx = 15;
				helper.Gfx.DrawString(string.Format("{0} {1} & {2}", dctAst["kp"], dctAst["house groups"], dctAst["events"]), fontSub, XBrushes.Black, new XRect(15, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
				ht += fontSub.Height;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				desc = dctAsto["kp-hg"];
				lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontBold, tblWidth);
				helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
				ht += fontBold.Height * lc + 5;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				string[] hgt = { "SIGNIFICATOR", "HOUSE GROUP", "LIFE EVENT" };
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
				txtp = tblWidth * (15 / (double)100);
				tht = ht + 12;
				cx = 15;
				foreach (var sb in hgt)
				{
					helper.Gfx.DrawString(dctAst[sb.ToLower()].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
					txtp = tblWidth * (15 / (double)100);
					cx += txtp;
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				cx = 15;
				foreach (var ph in dctPlHou)
				{
					if (ph.Value.lifevts != null)
						foreach (var hg in ph.Value.lifevts)
						{
							cx = 15;
							tht = ht + 12;
							colw = tblWidth * (15 / (double)100);
							helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
							helper.Gfx.DrawString(dctAst[ph.Value.name.ToLower()], fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							cx += colw;
							helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
							helper.Gfx.DrawString(hg.Key, fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							cx += colw;
							colw = tblWidth * (70 / (double)100);
							helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
							helper.Gfx.DrawString(hg.Value, fontMPer, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							ht += lineHeight;
							if (ht > tblHeight - lineHeight)
							{
								helper.GetLinePosition(tblHeight);
								ht = lineHeight;
							}
						}
				}
				double mpos = dctPlHou["Mo"].pos;
				BirthStar bS = calcBirthStar(mpos, dctPlHou["Mo"].sign);
				int msi = Convert.ToInt32(rashis[dctPlHou["Mo"].sign].ToString().Split('|')[0]);
				int nsi = Convert.ToInt32(rashis[bS.startSign].ToString().Split('|')[0]);
				JsonResult oV = (JsonResult)await CalcVim(string.Format("{0}-{1}-{2}T{3}", rParms.dob.Split('|')[2], rParms.dob.Split('|')[1], rParms.dob.Split('|')[0], rParms.tob.Replace('|', ':')), bS.ruler, dctPlHou["Mo"].pos, Convert.ToDouble(bS.startDeg), msi, nsi, rParms.lang);
				Dictionary<string, Dasha> vDas = (Dictionary<string, Dasha>)oV.Value;
				string mdas = string.Empty;
				string adas = string.Empty;
				string pdas = string.Empty;
				string pend = string.Empty;
				foreach (var das in vDas)
				{
					if (das.Value.style == "mdasc") mdas = das.Key;
					else if (das.Value.style == "adasc") adas = das.Key;
					else if (das.Value.style == "pdasc")
					{
						pdas = das.Key;
						var dts = das.Value.per.Split("To");
						pend = string.Format("{0}-{1}-{2}", dts[1].Trim().Split("/")[0], dts[1].Trim().Split("/")[1], dts[1].Trim().Split("/")[2]);
					}
				}
				if (mdas != string.Empty)
				{
					mdas = string.Format("{0}{1}", char.ToUpper(mdas[0]), mdas[1]);
					adas = string.Format("{0}{1}", char.ToUpper(adas.Split('-')[1][0]), adas.Split('-')[1][1]);
					pdas = string.Format("{0}{1}", char.ToUpper(pdas.Split('-')[2][0]), pdas.Split('-')[2][1]);
					cx = 15;
					ht += lineHeight;
					if (ht >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.Gfx.DrawString(dctAst["current dasha & events"], fontSub, XBrushes.Black, new XRect(15, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
					ht += fontSub.Height;
					if (ht >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					desc = dctAsto["kp-hg2"];
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
					helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc + 5;
					desc = dctAsto["kp-das"].Replace("[0]", dctAst[dctPlHou[mdas].name.ToLower()]).Replace("[1]", dctAst[dctPlHou[adas].name.ToLower()]).Replace("[2]", dctAst[dctPlHou[pdas].name.ToLower()]);
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontBold, tblWidth);
					if (ht >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(desc, fontBold, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontBold.Height * lc + 5;
					if (!sbsr)
					{
						helper.tf.DrawString("Please subscribe to get full report.", fontSbsr, XBrushes.Red, new XRect(cx, ht, tblWidth, lineHeight), XStringFormats.TopLeft);
						ht += lineHeight;
					}
					else
					{
						//List<int> lstDs = new List<int>();
						//lstDs.AddRange(dctPlHou[mdas].sigs);
						//lstDs.Sort();
						//lstDs = lstDs.Distinct().ToList();
						//string sigs = String.Join(',', lstDs);
						Dictionary<string, string> dsigs = new Dictionary<string, string>();
						foreach (var itm in dctPlHou[mdas].lifevts)
						{
							dsigs[itm.Key] = itm.Value;
						}
						foreach (var itm in dctPlHou[adas].lifevts)
						{
							dsigs[itm.Key] = itm.Value;
						}
						foreach (var itm in dctPlHou[pdas].lifevts)
						{
							dsigs[itm.Key] = itm.Value;
						}
						//foreach (var itm in dctPlHou[mdas].sigs)
						//{
						//	dsigs[itm.ToString()] = dctHINF[itm.ToString()];
						//}
						//if (adas != mdas)
						//{
						//	foreach (var itm in dctPlHou[adas].sigs)
						//	{
						//		dsigs[itm.ToString()] = dctHINF[itm.ToString()];
						//	}
						//}
						//if (pdas != mdas && pdas != adas)
						//{
						//	foreach (var itm in dctPlHou[pdas].sigs)
						//	{
						//		dsigs[itm.ToString()] = dctHINF[itm.ToString()];
						//	}
						//}
						List<Transit2> lT2 = await GetDashTransEx(dctPlNames[mdas], dctPlNames[adas], dctPlNames[pdas], pend, rParms.latlng, rParms.timezone, rParms.ayanid);
						helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
						txtp = tblWidth * (15 / (double)100);
						tht = ht + 12;
						cx = 15;
						if (dsigs.Count() > 0)
						{
							string[] hgt2 = { "HOUSE GROUP", "LIFE EVENT", "PROBABILITY" };
							foreach (var sb in hgt2)
							{
								switch (sb)
								{
									case "HOUSE GROUP":
										helper.Gfx.DrawString(dctAst[sb.ToLower()].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
										txtp = tblWidth * (15 / (double)100);
										break;
									case "LIFE EVENT":
										helper.Gfx.DrawString(dctAst[sb.ToLower()].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
										txtp = tblWidth * (70 / (double)100);
										break;
									case "PROBABILITY":
										helper.Gfx.DrawString(sb, fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
										txtp = tblWidth * (15 / (double)100);
										break;
									default:
										txtp = tblWidth * (15 / (double)100);
										break;
								}
								cx += txtp;
							}
						}
						ht += lineHeight;
						if (ht >= tblHeight - 10)
						{
							helper.GetLinePosition(tblHeight);
							ht = lineHeight + 10;
						}
						cx = 15;
						string vlrds = string.Empty;
						foreach (var sg in dsigs)
						{
							string slrds = string.Empty;
							var lst1 = sg.Key.Split('-').Select(c => int.Parse(c));
							//var rl = dctPlHou[mdas].sigs.Where(x => lst1.Contains(x));
							//if (rl.Count() > 0) slrds += dctPlHou[mdas].name + ",";
							//rl = dctPlHou[adas].sigs.Where(x => lst1.Contains(x));
							//if (rl.Count() > 0) slrds += dctPlHou[adas].name + ",";
							//rl = dctPlHou[pdas].sigs.Where(x => lst1.Contains(x));
							//if (rl.Count() > 0) slrds += dctPlHou[pdas].name + ",";
							if (dctPlHou[mdas].lifevts.ContainsKey(sg.Key)) slrds = mdas;
							else if (dctPlHou[adas].lifevts.ContainsKey(sg.Key)) slrds = adas;
							else slrds = pdas;
							string tdts = string.Empty;
							Dictionary<string, string> dctTrns = new Dictionary<string, string>();
							string tvisits = string.Empty;
							foreach (var trn in lT2)
							{
								if (trn.sssl == string.Empty) continue;
								foreach (var ssl in trn.sssl.Split(','))
								{
									if (ssl.IndexOf('|') == -1) continue;
									if (ssl.Split('-')[1] == dctPlNames[slrds].ToLower())
									{
										string slrd = string.Format("{0}{1}", char.ToUpper(ssl.Split('-')[2][0]), ssl.Split('-')[2][1]);
										int nh = Convert.ToInt32(sg.Key.Split('-')[0]) - 1;
										if (nh == 0) nh = 12;
										//else nh = nh - 1;
										bool bneg = false;
										foreach (var ng in dctPlHou[slrd].sigs)
										{
											if (ng == nh) bneg = true;
										}
										if (!bneg)
										{
											string vst = string.Format("{0}-{1}-{2}", ssl.Split('|')[0], ssl.Split('|')[1].Split('-')[2].Split(' ')[1], ssl.Split('|')[1].Split('-')[1]);
											if (tvisits.IndexOf(vst) == -1)
											{
												dctTrns[vst] = trn.date;
												tdts += trn.date + ",";
											}
											else
											{
												dctTrns[vst] = string.Format("{0}-{1}", dctTrns[vst].Split('-')[0], trn.date);
											}
											tvisits += vst;
										}
									}
								}
							}
							//tdts = string.Format("{0}", tdts.TrimEnd(','));
							string tdesc = string.Empty;
							Dictionary<string, string> dctPlTrns = new Dictionary<string, string>();
							foreach (var dtrn in dctTrns)
							{
								string tky = string.Format("{0}", dtrn.Key.Split('-')[3]);
								if (!dctPlTrns.ContainsKey(tky))
									dctPlTrns[tky] = string.Format("{0}|{1}", dtrn.Value, dtrn.Key.Split('-')[4]);
								else
								{
									dctPlTrns[tky] += string.Format("&{0}|{1}", dtrn.Value, dtrn.Key.Split('-')[4]);
								}
							}
							if (vlrds.IndexOf(slrds) == -1)
							{
								foreach (var dptns in dctPlTrns)
								{
									string tpl = dctPlNames[dptns.Key];
									string tzd = string.Empty;
									string tdt = string.Empty;
									foreach (var dpts in dptns.Value.Split('&'))
									{
										if (tzd.IndexOf(dctAst[dpts.Split('|')[1]]) == -1)
											tzd += string.Format("{0} ", dctAst[dpts.Split('|')[1]]);
										tdt += string.Format("{0} ", dpts.Split('|')[0]);
									}
									tdesc += string.Format("Transit of {0} in {1} during {2}", tpl, tzd, tdt);
								}
							}
							if (tdesc != string.Empty)
								desc = string.Format("{0}. This event could happen during {1}", sg.Value, tdesc);
							else
								desc = string.Format("{0}. Event dates same as above mentioned for {1}", sg.Value, dctPlNames[slrds]);

							cx = 15;
							tht = ht + fontNormal.Height;
							colw = tblWidth * (15 / (double)100);
							lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth - (cx + colw));
							if (ht + fontNormal.Height + (fontNormal.Height * lc) >= tblHeight - 40)
							{
								helper.GetLinePosition(tblHeight);
								ht = lineHeight + 10;
							}
							//helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
							helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, fontNormal.Height * (lc + 1)));
							helper.Gfx.DrawString(string.Format("{0}({1})", sg.Key, slrds), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							cx += colw;
							colw = tblWidth * (70 / (double)100);
							//helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
							helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, fontNormal.Height * (lc + 1)));
							helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx + 1, ht, colw, fontNormal.Height * lc), XStringFormats.TopLeft);
							string pbt = string.Empty;
							if (sg.Key.Split('-')[0] == dctPlHou[slrds].dsigs["L1"]) pbt = "High";
							else if (sg.Key.Split('-')[0] == dctPlHou[slrds].dsigs["L2"]) pbt = "Medium";
							else
							{
								foreach (var l3s in dctPlHou[slrds].dsigs["L3"].Split(","))
									if (sg.Key.Split('-')[0] == l3s) pbt = "Low";
								if (pbt == string.Empty) pbt = "Very Low";
							}
							cx += colw;
							colw = tblWidth * (15 / (double)100);
							//helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
							helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, fontNormal.Height * (lc + 1)));
							helper.tf.DrawString(pbt, fontNormal, XBrushes.Black, new XRect(cx + 1, ht, tblWidth - cx, fontNormal.Height * lc), XStringFormats.TopLeft);
							//helper.Gfx.DrawString(sg.Value, fontMPer, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							ht += fontNormal.Height * lc + 5;
							if (ht > tblHeight - lineHeight)
							{
								helper.GetLinePosition(tblHeight);
								ht = lineHeight;
							}
							vlrds += slrds;
						}
						string nvlrds = string.Empty;
						if (nvlrds.IndexOf(mdas) == -1 && vlrds.IndexOf(mdas) == -1) nvlrds = mdas;
						if (nvlrds.IndexOf(adas) == -1 && vlrds.IndexOf(adas) == -1) nvlrds += string.Format("|{0}", adas);
						if (nvlrds.IndexOf(pdas) == -1 && vlrds.IndexOf(pdas) == -1) nvlrds += string.Format("|{0}", pdas);
						nvlrds = nvlrds.Trim('|');
						if (nvlrds != string.Empty)
						{
							cx = 15;
							string[] hgt3 = { "HOUSE(S)", "LIFE EVENT" };
							foreach (var sb in hgt3)
							{
								switch (sb)
								{
									case "HOUSE(S)":
										helper.Gfx.DrawString(sb, fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
										txtp = tblWidth * (15 / (double)100);
										break;
									case "LIFE EVENT":
										helper.Gfx.DrawString(dctAst[sb.ToLower()].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
										txtp = tblWidth * (85 / (double)100);
										break;
									default:
										helper.Gfx.DrawString(dctAst[sb.ToLower()].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
										txtp = tblWidth * (15 / (double)100);
										break;
								}
								cx += txtp;
							}
							//ht += lineHeight;
							cx = 15;
							foreach (var ld in nvlrds.Split('|'))
							{
								string bsh = (dctPlHou[ld].dsigs["L1"] != string.Empty) ? dctPlHou[ld].dsigs["L1"] : dctPlHou[ld].dsigs["L2"];
								Dictionary<string, string> dctTrns = new Dictionary<string, string>();
								string tvisits = string.Empty;
								foreach (var trn in lT2)
								{
									if (trn.sssl == string.Empty) continue;
									foreach (var ssl in trn.sssl.Split(','))
									{
										if (ssl.IndexOf('|') == -1) continue;
										if (ssl.Split('-')[1] == dctPlNames[ld].ToLower())
										{
											string slrd = string.Format("{0}{1}", char.ToUpper(ssl.Split('-')[2][0]), ssl.Split('-')[2][1]);
											int nh = Convert.ToInt32(bsh) - 1;
											if (nh == 0) nh = 12;
											bool bneg = false;
											foreach (var ng in dctPlHou[slrd].sigs)
											{
												if (ng == nh) bneg = true;
											}
											if (!bneg)
											{
												string vst = string.Format("{0}-{1}-{2}", ssl.Split('|')[0], ssl.Split('|')[1].Split('-')[2].Split(' ')[1], ssl.Split('|')[1].Split('-')[1]);
												if (tvisits.IndexOf(vst) == -1)
												{
													dctTrns[vst] = trn.date;
													//tdts += trn.date + ",";
												}
												else
												{
													dctTrns[vst] = string.Format("{0}-{1}", dctTrns[vst].Split('-')[0], trn.date);
												}
												tvisits += vst;
											}
										}
									}
								}
								string tdesc = string.Empty;
								Dictionary<string, string> dctPlTrns = new Dictionary<string, string>();
								foreach (var dtrn in dctTrns)
								{
									string tky = string.Format("{0}", dtrn.Key.Split('-')[3]);
									if (!dctPlTrns.ContainsKey(tky))
										dctPlTrns[tky] = string.Format("{0}|{1}", dtrn.Value, dtrn.Key.Split('-')[4]);
									else
									{
										dctPlTrns[tky] += string.Format("&{0}|{1}", dtrn.Value, dtrn.Key.Split('-')[4]);
									}
								}
								foreach (var dptns in dctPlTrns)
								{
									string tpl = dctPlNames[dptns.Key];
									string tzd = string.Empty;
									string tdt = string.Empty;
									foreach (var dpts in dptns.Value.Split('&'))
									{
										if (tzd.IndexOf(dctAst[dpts.Split('|')[1]]) == -1)
											tzd += string.Format("{0} ", dctAst[dpts.Split('|')[1]]);
										tdt += string.Format("{0} ", dpts.Split('|')[0]);
									}
									tdesc += string.Format("Transit of {0} in {1} during {2}", tpl, tzd, tdt);
								}
								if (tdesc != string.Empty)
									desc = string.Format("{0}. This event could happen during {1}", dctHINF[bsh], tdesc);
								else
									desc = string.Format("{0}. Event dates same as above mentioned for {1}", dctHINF[bsh], dctPlNames[ld]);
								cx = 15;
								tht = ht + fontNormal.Height;
								colw = tblWidth * (15 / (double)100);
								lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth - (cx + colw));
								if (ht + fontSub.Height + (fontNormal.Height * lc) >= tblHeight - 40)
								{
									helper.GetLinePosition(tblHeight);
									ht = lineHeight + 10;
									tht = ht + fontNormal.Height;
								}
								//helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
								helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, fontNormal.Height * (lc + 1)));
								helper.Gfx.DrawString(string.Format("{0}({1})", bsh, ld), fontNormal, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
								cx += colw;
								colw = tblWidth * (85 / (double)100);
								//helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
								helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, fontNormal.Height * (lc + 1)));
								helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx + 1, ht, tblWidth - cx, fontNormal.Height * lc), XStringFormats.TopLeft);
								ht += fontNormal.Height * lc + 5;
								if (ht > tblHeight - lineHeight)
								{
									helper.GetLinePosition(tblHeight);
									ht = lineHeight;
								}
							}
						}

					}
				}
				ht += lineHeight;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				//cx = 15;
				//foreach (var sig in dctPlHou[mdas].sigs) bstw += string.Format("{0} ", dctHINF[sig.ToString()]);
				//string kdesc = string.Format("According to your chart the dasha lord {0} bestows {1} during below time frame(s)", dctPlNames[mdas], bstw);
				//lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, kdesc, fontNormal, tblWidth);
				//if (ht + fontSub.Height + (fontNormal.Height * lc) >= tblHeight - 40)
				//{
				//	helper.GetLinePosition(tblHeight);
				//	ht = lineHeight + 10;
				//}

				//helper.tf.DrawString(kdesc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
				//ht += fontNormal.Height * lc + 10;
				//if (ht > tblHeight - lineHeight)
				//{
				//	helper.GetLinePosition(tblHeight);
				//	ht = lineHeight;
				//}
				//ht += lineHeight;
				//foreach (var ts in lT2)
				//{
				//	foreach(var ss in ts.sssl.Split(','))
				//	{
				//		if(ss.Split('|')[0].Split('-')[1] == dctPlNames[mdas].ToLower())
				//		{
				//			helper.tf.DrawString(ts.date, fontMPer, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight), XStringFormats.TopLeft);
				//			ht += lineHeight;
				//			if (ht > tblHeight - lineHeight)
				//			{
				//				helper.GetLinePosition(tblHeight);
				//				ht = lineHeight;
				//			}

				//		}
				//	}
				//}
				#endregion
				#region vim
				cx = 15;
				//Vimsottari Dasha
				if (ht + lineHeight > tblHeight - 20)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight;
				}
				helper.Gfx.DrawString(dctAst["vimshottari dasha"], fontHeader, XBrushes.Black, new XRect(15, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height;
				desc = dctAsto["vim"];
				lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
				if (ht + (lineHeight * lc) > tblHeight - lineHeight)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight;
				}
				helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
				ht += fontNormal.Height * lc + 5;
				desc = dctAsto["vim-2"];
				lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
				if (ht + lineHeight + (lineHeight * lc) + (lineHeight * 11) > tblHeight - 20)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight;
				}
				helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
				ht += fontNormal.Height * lc + 5;
				double vr = ht;
				double cxh = 10;
				colw = tblWidth * (32 / (double)100);
				double acol1 = tblWidth * (16 / (double)100);
				double acol2 = tblWidth * (16 / (double)100);
				tht = ht + 12;
				bool ant = false;
				double vdh = (11 * lineHeight);
				foreach (var das in vDas)
				{
					if (!das.Key.Contains('-'))
					{
						if (ant) cx += colw + 2;
						if (cx + colw >= tblWidth)
						{
							cx = 15;
							ht += lineHeight;
							tht = ht + 12;
							vr = ht + 10;
							if (vr + vdh > tblHeight - lineHeight)
							{
								helper.GetLinePosition(tblHeight);
								ht = lineHeight;
								vr = ht + 10;
							}
						}
						ht = vr;
						tht = ht + 12;
						helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(cx, ht, colw, lineHeight));
						string tx = string.Format("{0} {1}", dctAst[das.Key.ToLower()].ToUpper(), dctAst["dasha"].ToUpper());
						XSize dtx = helper.Gfx.MeasureString(tx, fontBold);
						XSize dtx2 = helper.Gfx.MeasureString(das.Value.per, fontBold);
						helper.Gfx.DrawString(tx, fontBold, XBrushes.White, cx + (colw - dtx.Width) / 2, tht, XStringFormats.Default);
						ht += lineHeight;
						tht = ht + 12;
						helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
						helper.Gfx.DrawString(das.Value.per, fontMPer, XBrushes.Black, cx + 1 + (colw - dtx2.Width) / 2, tht, XStringFormats.Default);
					}
					else
					{
						if (das.Key.Split('-').Count() == 2)
						{
							ht += lineHeight;
							tht = ht + 12;
							helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, acol1, lineHeight));
							helper.Gfx.DrawString(das.Value.lord, fontSNor, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
							helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx + acol1, ht, acol2, lineHeight));
							helper.Gfx.DrawString(das.Value.per, fontSNor, XBrushes.Black, cx + acol1 + 1, tht, XStringFormats.Default);
							if (!ant) ant = true;
						}
					}
				}
				ht += lineHeight + 10;
				helper.Gfx.DrawString(string.Format("{0} & {1}", dctAst["anthar dasha"], dctAst["pratyantar dasha"]), fontSub, XBrushes.Black, new XRect(15, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
				ht += fontSub.Height;
				acol1 = tblWidth * (14 / (double)100);
				acol2 = tblWidth * (18 / (double)100);
				foreach (var das in vDas)
				{
					int cnt = das.Key.Split('-').Count();
					if (cnt == 2)
					{
						if (ant) cx += colw + 2;
						if (cx + colw >= tblWidth)
						{
							cx = 15;
							ht += lineHeight;
							tht = ht + 12;
							vr = ht + 10;
							if (vr + vdh > tblHeight - lineHeight)
							{
								helper.GetLinePosition(tblHeight);
								ht = lineHeight;
								vr = ht + 10;
							}
						}
						ht = vr;
						tht = ht + 12;
						helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(cx, ht, colw, lineHeight));
						XSize dtx = helper.Gfx.MeasureString(das.Value.lord, fontBold);
						XSize dtx2 = helper.Gfx.MeasureString(das.Value.per, fontBold);
						helper.Gfx.DrawString(das.Value.lord, fontBold, XBrushes.White, cx + (colw - dtx.Width) / 2, tht, XStringFormats.Default);
						ht += lineHeight;
						tht = ht + 12;
						helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
						helper.Gfx.DrawString(das.Value.per, fontSPer, XBrushes.Black, cx + 1 + (colw - dtx2.Width) / 2, tht, XStringFormats.Default);
					}
					else if (cnt == 3)
					{
						ht += lineHeight;
						tht = ht + 12;
						helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, acol1, lineHeight));
						helper.Gfx.DrawString(string.Format("{0}-{1}-{2}", das.Value.lord.Split('-')[0].Substring(0, 2), dctAst[das.Value.lord.Split('-')[1]].Substring(0, 2), dctAst[das.Value.lord.Split('-')[2]].Substring(0, 2)), fontSNor, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
						helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx + acol1, ht, acol2, lineHeight));
						helper.Gfx.DrawString(das.Value.per, fontSNor, XBrushes.Black, cx + acol1 + 1, tht, XStringFormats.Default);
						if (!ant) ant = true;
					}
				}
				#endregion
				#region varga
				//Varga Charts
				double vgb = (tblWidth / 2) - 20;
				ht += lineHeight + 10;
				if (ht >= tblHeight - vgb - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				cx = 15;
				helper.Gfx.DrawString(dctAst["varga charts"], fontHeader, XBrushes.Black, new XRect(15, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height + 10;
				int nvg = 0;
				Dictionary<string, string> dctShod = new Dictionary<string, string>();
				string[] vrgs = { "1|RASHI", "2|HORA", "3|DRESHKANA", "4|CHATHURTHAMSA", "7|SAPTAMSA", "9|NAVAMSA", "10|DASAMSA", "12|DWADASAMSA", "16|SHODASAMSA", "20|VIMSAMSA", "24|CHATURVIMSAMSA", "27|SAPTAVIMSAMSA", "30|TRIMASAMSA", "40|KHAVEDAMSA", "45|AKSHAVEDAMSA", "60|SHASTAMSA" };
				foreach (var vg in vrgs)
				{
					nvg++;
					string vgn = vg.Split('|')[0];
					int ndivs = Convert.ToInt32(vgn);
					if (vgn != "1")
					{
						JsonResult jOb = (vgn != "2") ? (JsonResult)CalcDivChart(mHoro.planetsPos, ndivs) : (JsonResult)CalcHoraChart(mHoro.planetsPos);
						Dictionary<string, string> ppos = (Dictionary<string, string>)(jOb.Value);
						if (rParms.chtyp == "nind")
						{
							string vas = string.Empty;
							string vap = string.Empty;
							foreach (var pp in ppos)
							{
								foreach (var pln in pp.Value.Split('|'))
								{
									string p = pln.Split(' ')[1];
									if (p == "AC")
									{
										vas = pp.Key;
										vap = pln.Split(' ')[0];
										break;
									}
									if (vas != string.Empty) break;
								}
							}
							DrawVNIChart(dctAst[vg.Split('|')[1].ToLower()].ToUpper(), helper, cx, ht, vgb, vgb, ppos, vas, vap, dctAst, fnt);
						}
						else DrawVChart(dctAst[vg.Split('|')[1].ToLower()].ToUpper(), helper, cx, ht, vgb, vgb, ppos, dctAst, fnt);
						UpdateShdv(ppos, ref dctPlVHou, ndivs);
					}
					else
					{
						if (rParms.chtyp == "nind")
							DrawVNIChart(dctAst["rashi"].ToUpper(), helper, cx, ht, vgb, vgb, mHoro.planetsPos, asc_sgn, asc_deg, dctAst, fnt);
						else
							DrawVChart(dctAst["rashi"].ToUpper(), helper, cx, ht, vgb, vgb, mHoro.planetsPos, dctAst, fnt);
					}
					if (nvg % 2 == 0)
					{
						ht += vgb + 15;
						cx = 15;
					}
					else
					{
						cx += vgb + 15;
					}
					if (ht + vgb >= tblHeight - 20)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
						cx = 15;
					}
				}
				cx = 15;
				helper.Gfx.DrawString(dctAst["shodashvarga table"], fontSub, XBrushes.Black, new XRect(cx, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
				ht += fontSub.Height + 10;
				tht = cx + 12;
				helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(cx, ht, tblWidth, lineHeight));
				colw = tblWidth * (8 / (double)100);
				tht = ht + 12;
				helper.Gfx.DrawString(dctAst["planet"].ToUpper(), fontBold, XBrushes.White, cx, tht, XStringFormats.Default);
				cx += colw;
				string[] svgt = { "D1", "D2", "D3", "D4", "D7", "D9", "D10", "D12", "D16", "D20", "D24", "D27", "D30", "D40", "D45", "D60" };
				foreach (var sb in svgt)
				{
					helper.Gfx.DrawString(sb, fontMPer, XBrushes.White, cx, tht, XStringFormats.Default);
					colw = tblWidth * (5.75 / (double)100);
					cx += colw;
				}
				ht += lineHeight;
				tht = ht + 12;
				foreach (var lrd in grhs)
				{
					cx = 15;
					colw = tblWidth * (8 / (double)100);
					tht = ht + 12;
					helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
					helper.Gfx.DrawString(dctAst[lrd], fontBold, XBrushes.Black, cx, tht, XStringFormats.Default);
					cx += colw;
					foreach (var vg in vrgs)
					{
						colw = tblWidth * (5.75 / (double)100);
						string ky = string.Format("{0}-{1}", lrd, vg.Split('|')[0]);
						helper.Gfx.DrawRectangle(vpen, brush, new XRect(cx, ht, colw, lineHeight));
						helper.Gfx.DrawString(dctPlVHou[ky].Replace(dctPlVHou[ky].Split('-')[1], dctAst[dctPlVHou[ky].Split('-')[1]].Substring(0, 2)), fontNote, XBrushes.Black, cx + 1, tht, XStringFormats.Default);
						cx += colw;
					}
					ht += lineHeight;
					tht = ht + 12;
				}

				ht += lineHeight;
				if (ht >= tblHeight - 20)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				#endregion
				if (mdas == string.Empty)
				{
					ht += lineHeight;
					cx = 15;
					helper.Gfx.DrawString("This report cannot generate predictions for future dates.", fontSbsr, XBrushes.Black, new XRect(15, ht, tblWidth, fontSbsr.Height), XStringFormats.TopLeft);
					Guid gu = Guid.NewGuid();
					MemoryStream vstm = new MemoryStream();
					document.Save(vstm, false);
					return File(vstm, "application/pdf", string.Format("{0}.pdf", gu.ToString()));
				}
				#region yogas
				//Yogas
				cx = 15;
				helper.Gfx.DrawString(dctAst["yogas"], fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height + 10;
				if (!sbsr)
				{
					helper.tf.DrawString("Please subscribe to get full report.", fontSbsr, XBrushes.Red, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontSbsr.Height;
				}
				else
				{
					tht = cx + 12;
					JsonResult oY1 = (JsonResult)await GetYogasEx(rParms.dob, rParms.tob, rParms.latlng, rParms.timezone, tof, rParms.ayanid, rParms.lang);
					Dictionary<string, string> ygs = (Dictionary<string, string>)oY1.Value;
					foreach (var yog in ygs)
					{
						desc = yog.Value;
						lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
						if (ht + fontSub.Height + (fontNormal.Height * lc) >= tblHeight - 40)
						{
							helper.GetLinePosition(tblHeight);
							ht = lineHeight + 10;
						}
						string yt = yog.Key;
						if (yog.Key.Contains('-') && !yog.Key.Contains("YOGA"))
						{
							string cpl = string.Empty;
							foreach (var gr in yog.Key.Split('-')) cpl += dctAst[gr.ToLower()] + ",";
							yt = string.Format("{0} of {1}", dctAst["conjunction"], cpl.TrimEnd(','));
						}
						else
						{
							yt = dctAst[yog.Key.Split(',')[0].Split('|')[0]];
						}
						helper.Gfx.DrawString(yt, fontSub, XBrushes.Black, new XRect(cx, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
						ht += fontSub.Height + 10;
						helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
						ht += fontNormal.Height * lc + 10;
					}
				}
				ht += lineHeight;
				if (ht >= tblHeight - 20)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				#endregion
				#region doshas
				//Yogas
				cx = 15;
				helper.Gfx.DrawString(dctAst["doshas"], fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height + 10;
				tht = cx + 12;
				Dictionary<string, Dosha> yogs = await GetDoshasEx(dParms);
				int ndshs = 0;
				foreach (var yog in yogs)
				{
					ht += fontSub.Height + 10;
					helper.Gfx.DrawString(yog.Value.name, fontSub, XBrushes.Black, new XRect(cx, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
					ht += fontSub.Height + 10;
					ndshs++;
					desc = yog.Value.horodesc;
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
					if (ht + fontSub.Height + (fontNormal.Height * lc) >= tblHeight - 40)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					//string yt = yog.Key;
					helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc + 10;
					desc = yog.Value.desc;
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
					if (ht + fontSub.Height + (fontNormal.Height * lc) >= tblHeight - 40)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc + 10;
					helper.Gfx.DrawString(dctAst["remedies"], fontSub, XBrushes.Black, new XRect(cx, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
					ht += fontSub.Height + 10;
					desc = yog.Value.remedies;
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
					if (ht + fontSub.Height + (fontNormal.Height * lc) >= tblHeight - 40)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height * lc + 10;
				}
				if (ndshs == 0)
				{
					helper.tf.DrawString(dctAst["NO-DOSHAS"], fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lineHeight * lc), XStringFormats.TopLeft);
					ht += fontNormal.Height;
				}
				ht += lineHeight;
				if (ht >= tblHeight - 20)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}

				#endregion
				#region predictions(self)
				//Predictions (Self)
				helper.Gfx.DrawString(dctAsto["asc-t"].Replace("[0]", dctAst[asc_sgn]), fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height + 10;
				using (StreamReader sr = new StreamReader(string.Format(@"{0}\{1}-asc.json", astClient, rParms.lang)))
				{
					string jsn = sr.ReadToEnd();
					dynamic ascprd = JsonConvert.DeserializeObject(jsn);
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, ascprd[asc_sgn].ToString(), fontNormal, tblWidth);
					double lh = fontNormal.Height * lc + 5;
					if (ht + lh >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(ascprd[asc_sgn].ToString(), fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lh), XStringFormats.TopLeft);
					ht += lh;
				}
				ht += lineHeight;
				lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, dctAsto["asc-r1"], fontNormal, tblWidth);
				double lht = fontNormal.Height * lc;
				if (ht + lht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				helper.tf.DrawString(dctAsto["asc-r1"], fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lht), XStringFormats.TopLeft);
				ht += lht + 5;
				using (StreamReader sr = new StreamReader(string.Format(@"{0}\{1}-hou.json", astClient, rParms.lang)))
				{
					string jsn = sr.ReadToEnd();
					dynamic ascprd = JsonConvert.DeserializeObject(jsn);
					int lhno = dctPlHou[asc_h.Split('|')[2]].hno;
					string ldsc = dctAsto["asc-r2"].Replace("[0]", dctAst[asc_h.Split('|')[2]]).Replace("[1]", lhno.ToString()).Replace("[2]", ascprd[lhno.ToString()].ToString());
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, ldsc, fontNormal, tblWidth);
					lht = fontNormal.Height * lc;
					if (ht + lht >= tblHeight - 10)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(ldsc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lht), XStringFormats.TopLeft);
					ht += lht + 5;
				}
				ht += lineHeight;
				string pps = string.Empty;
				switch (astar.pada)
				{
					case 1:
						pps = "dharma";
						break;
					case 2:
						pps = "artha";
						break;
					case 3:
						pps = "kama";
						break;
					case 4:
						pps = "moksha";
						break;
					default:
						break;
				}
				string ldr = dctAsto["asc-r3"].Replace("[0]", dctAst["pada"]).Replace("[1]", dctAst[astar.birthStar.ToLower()]).Replace("[2]", astar.pada.ToString()).Replace("[3]", dctAst["pada"]).Replace("[4]", dctAst[pps]).Replace("[5]", dctAsto[pps]);
				lht = fontNormal.Height * lc;
				if (ht + lht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				helper.tf.DrawString(ldr, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lht), XStringFormats.TopLeft);
				ht += lht + 5;
				#endregion
				#region Predictions (Love/Relationship)
				//Predictions (Love/Relationship)
				helper.Gfx.DrawString(dctAst["love & relationship"], fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height + 10;
				if (!sbsr)
				{
					helper.tf.DrawString("Please subscribe to get full report.", fontSbsr, XBrushes.Red, new XRect(cx, ht, tblWidth, lineHeight), XStringFormats.TopLeft);
					ht += fontSbsr.Height;
				}
				else
				{
					JsonResult oD9 = (JsonResult)await AnalyzeD9Ex(rParms.dob, rParms.tob, rParms.latlng, rParms.timezone, rParms.lang, rParms.ayanid);
					var nvms = (Dictionary<string, string>)oD9.Value;
					foreach (var yog in nvms)
					{
						desc = yog.Value;
						lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
						double lh = fontNormal.Height * lc + 5;
						if (ht + lh >= tblHeight - 10)
						{
							helper.GetLinePosition(tblHeight);
							ht = lineHeight + 10;
						}
						if (!yog.Key.Contains('-'))
						{
							helper.Gfx.DrawString(dctAst[yog.Key.ToLower()], fontSub, XBrushes.Black, new XRect(cx, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
							ht += fontSub.Height;
						}
						helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lh), XStringFormats.TopLeft);
						ht += lh;
					}
				}
				ht += lineHeight + 10;
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				#endregion
				#region Predictions(Career)
				//Predictions (Career)
				helper.Gfx.DrawString(dctAst["career"], fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height + 10;
				if (!sbsr)
				{
					helper.tf.DrawString("Please subscribe to get full report.", fontSbsr, XBrushes.Red, new XRect(cx, ht, tblWidth, lineHeight), XStringFormats.TopLeft);
					ht += fontSbsr.Height;
				}
				else
				{
					JsonResult oC = (JsonResult)await AnalyzeDasamsaEx(rParms.dob, rParms.tob, rParms.latlng, rParms.timezone, tof, rParms.ayanid, rParms.lang);
					var dsms = (Dictionary<string, string>)oC.Value;

					foreach (var yog in dsms)
					{
						desc = yog.Value;
						lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
						double lh = fontNormal.Height * lc + 5;
						if (ht + lh >= tblHeight - 10)
						{
							helper.GetLinePosition(tblHeight);
							ht = lineHeight + 10;
						}
						helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lh), XStringFormats.TopLeft);
						ht += lh;
					}
				}
				ht += lineHeight + 10;
				if (ht >= tblHeight - 20)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				#endregion
				#region Predictions(Money)
				//Predictions (Money)
				//Predictions (Assets)
				if (ht + lineHeight >= tblHeight - 20)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				helper.Gfx.DrawString(string.Format("{0}, {1} & {2}", dctAst["wealth"], dctAst["money"], dctAst["assets"]), fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height + 10;
				if (!sbsr)
				{
					helper.tf.DrawString("Please subscribe to get full report.", fontSbsr, XBrushes.Red, new XRect(cx, ht, tblWidth, lineHeight), XStringFormats.TopLeft);
					ht += fontSbsr.Height;
				}
				else
				{
					JsonResult oM = (JsonResult)await AnalyzeMoneyEx(string.Format("{0}|{1}|{2}", mdas, adas, pdas), rParms.dob, rParms.tob, rParms.latlng, rParms.timezone, rParms.lang, rParms.ayanid);
					var mnys = (Dictionary<string, string>)oM.Value;
					foreach (var yog in mnys)
					{
						desc = yog.Value;
						lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
						double lh = fontNormal.Height * lc + 5;
						if (ht + lh >= tblHeight - 10)
						{
							helper.GetLinePosition(tblHeight);
							ht = lineHeight + 10;
						}
						if (!yog.Key.Contains('-'))
						{
							helper.Gfx.DrawString(dctAst[yog.Key.ToLower()], fontSub, XBrushes.Black, new XRect(cx, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
							ht += fontSub.Height;
						}
						helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lh), XStringFormats.TopLeft);
						ht += lh;
					}
					JsonResult oD4 = (JsonResult)await AnalyzeD4Ex(rParms.dob, rParms.tob, rParms.latlng, rParms.timezone, rParms.lang, rParms.ayanid);
					var asts = (Dictionary<string, string>)oD4.Value;
					foreach (var yog in asts)
					{
						desc = yog.Value;
						lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
						double lh = fontNormal.Height * lc + 5;
						if (ht + lh >= tblHeight - 10)
						{
							helper.GetLinePosition(tblHeight);
							ht = lineHeight + 10;
						}
						if (!yog.Key.Contains('-'))
						{
							helper.Gfx.DrawString(dctAst[yog.Key.ToLower()], fontSub, XBrushes.Black, new XRect(cx, ht, tblWidth, fontSub.Height), XStringFormats.TopLeft);
							ht += fontSub.Height;
						}
						helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lh), XStringFormats.TopLeft);
						ht += lh;
					}
				}
				ht += lineHeight;
				#endregion
				#region Predictions(Relationship with Siblings)
				helper.Gfx.DrawString(dctAst["your sibling relation"], fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);

				ht += fontHeader.Height + 10;
				if (!sbsr)
				{
					helper.tf.DrawString("Please subscribe to get full report.", fontSbsr, XBrushes.Red, new XRect(cx, ht, tblWidth, lineHeight), XStringFormats.TopLeft);
					ht += fontSbsr.Height;
				}
				else
				{
					var nvms = await AnalyzeD3Ex(dParms);
					foreach (var yog in nvms)
					{
						desc = yog.Value;
						lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
						double lh = fontNormal.Height * lc + 5;
						if (ht + lh >= tblHeight - 10)
						{
							helper.GetLinePosition(tblHeight);
							ht = lineHeight + 10;
						}
						helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lh), XStringFormats.TopLeft);
						ht += lh;
					}
				}
				#endregion
				#region Predictions(Children)
				helper.Gfx.DrawString(dctAst["children & happiness"], fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);

				ht += fontHeader.Height + 10;
				if (!sbsr)
				{
					helper.tf.DrawString("Please subscribe to get full report.", fontSbsr, XBrushes.Red, new XRect(cx, ht, tblWidth, lineHeight), XStringFormats.TopLeft);
					ht += fontSbsr.Height;
				}
				else
				{
					var nvms = await AnalyzeD7Ex(dParms);
					foreach (var yog in nvms)
					{
						desc = yog.Value;
						lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, desc, fontNormal, tblWidth);
						double lh = fontNormal.Height * lc + 5;
						if (ht + lh >= tblHeight - 10)
						{
							helper.GetLinePosition(tblHeight);
							ht = lineHeight + 10;
						}
						helper.tf.DrawString(desc, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lh), XStringFormats.TopLeft);
						ht += lh;
					}
				}
				#endregion
				#region Transit Predictions
				//Current Transit & Predictions
				cx = 15;
				cw = 350;
				ch = 350;
				if ((tblHeight - ht) < ch + fontHeader.Height + 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = 20;
				}
				helper.Gfx.DrawString(dctAst["predictions for this month"], fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
				ht += fontHeader.Height + 10;
				DateTime today = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, tzInf);
				uint tu1 = Convert.ToUInt32(today.Day);
				uint tu2 = Convert.ToUInt32(today.Month);
				int ti3 = Convert.ToInt32(today.Year);
				uint tu4 = Convert.ToUInt32(today.Hour);
				uint tu5 = Convert.ToUInt32(today.Minute);
				uint tu6 = 0;
				double tu7 = Convert.ToDouble(rParms.latlng.Split('|')[0]);
				double tu8 = Convert.ToDouble(rParms.latlng.Split('|')[1]);
				Horoscope cHoro = await Task.Run(() =>
				{
					Horoscope cHoro = new Horoscope();
					cHoro.init_data_ex2(tu1, tu2, ti3, tu4, tu5, tu6, tu7, tu8, tz, ayan, (uint)rParms.ayanid);
					cHoro.calc_planets_pos(true, Path.Combine(_env.ContentRootPath, @"Content\astroclient"));
					return cHoro;
				});
				rpos = 0;
				string casc_sgn = string.Empty;
				foreach (string sign in signs)
				{
					rpos++;
					if (cHoro.planetsPos.ContainsKey(sign))
					{
						var pls = cHoro.planetsPos[sign].Split('|');
						for (var k = 0; k < pls.Length; k++)
						{
							if (pls[k].Split(' ')[1] == "MEAN_NODE")
							{
								var kpos = rpos + 6;
								if (kpos > 12) kpos = (kpos - 12);
								if (cHoro.planetsPos.ContainsKey(signs[kpos - 1]))
								{
									var eP = cHoro.planetsPos[signs[kpos - 1]];
									cHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
								}
								else
								{
									cHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
								}
								cHoro.planetsPos[sign] = cHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
							}
							else if (pls[k].Split(' ')[1] == "AC") casc_sgn = sign;
						}
					}
				}
				cx = 15;
				cw = 350;
				ch = 350;
				if ((tblHeight - ht) < ch + 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = 20;
				}
				if (rParms.chtyp == "sind")
					DrawChart(dctAst["transit chart"], rParms.latlng, helper, cx + (tblWidth - cw) / 2, ht, cw, ch, cHoro.planetsPos, dctAst, fnt);//, asc_sgn, asc_deg);
				else
					DrawNIChart(dctAst["transit chart"], rParms.latlng, helper, cx + (tblWidth - cw) / 2, ht, cw, ch, cHoro.planetsPos, casc_sgn, dctAst, fnt);
				ht += ch + 10;
				//string mplns = "SuJuMeVeMaRaKe";
				Dictionary<string, string> dctPreds = await GetTransPredsEx2(dctPlHou, dctAst, dctAsto, rParms.latlng, rParms.timezone, rParms.ayanid, rParms.lang);
				foreach (var pred in dctPreds)
				{
					lc = SplitLineCounter.GetSplittedLineCount(helper.Gfx, pred.Value, fontNormal, tblWidth);
					double lh = fontNormal.Height * lc + 5;
					if (ht + lh >= tblHeight - 20)
					{
						helper.GetLinePosition(tblHeight);
						ht = lineHeight + 10;
					}
					helper.tf.DrawString(pred.Value, fontNormal, XBrushes.Black, new XRect(cx, ht, tblWidth, lh), XStringFormats.TopLeft);
					ht += lh;
				}
				ht += lineHeight;
				#endregion
				#region gemstones
				if (ht >= tblHeight - 10)
				{
					helper.GetLinePosition(tblHeight);
					ht = lineHeight + 10;
				}
				using (StreamReader rdr = new StreamReader(string.Format(@"{0}\{1}-gems.json", astClient, rParms.lang)))
				using (StreamReader fbstm = new StreamReader(string.Format(@"{0}\fbens.json", astClient)))
				using (StreamReader fmstm = new StreamReader(string.Format(@"{0}\fmels.json", astClient)))
				{
					string json = rdr.ReadToEnd();
					string jsonfb = fbstm.ReadToEnd();
					string jsonfm = fmstm.ReadToEnd();
					Dictionary<string, Dictionary<string, string>> dctGems = JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, string>>>(json);
					dynamic fbpls = JsonConvert.DeserializeObject(jsonfb);
					dynamic fmpls = JsonConvert.DeserializeObject(jsonfm);
					bool h1w = true;
					bool l1w = true;
					bool h5w = true;
					bool l5w = true;
					bool h9w = true;
					bool l9w = true;
					if (dctHpts[1] > 28)
					{
						h1w = false;
					}
					else if (dctHpts[5] > 29)
					{
						h5w = false;
					}
					else if (dctHpts[9] > 29)
					{
						h9w = false;
					}
					switch (dctHou[1].Split('|')[2])
					{
						case "Su":
							if (dctPts["Su"] > 389) l1w = false;
							break;
						case "Mo":
							if (dctPts["Mo"] > 359) l1w = false;
							break;
						case "Ma":
							if (dctPts["Ma"] > 299) l1w = false;
							break;
						case "Me":
							if (dctPts["Me"] > 419) l1w = false;
							break;
						case "Ju":
							if (dctPts["Ju"] > 389) l1w = false;
							break;
						case "Ve":
							if (dctPts["Ve"] > 329) l1w = false;
							break;
						case "Sa":
							if (dctPts["Sa"] > 299) l1w = false;
							break;
						default:
							break;
					}
					switch (dctHou[5].Split('|')[2])
					{
						case "Su":
							if (dctPts["Su"] > 389) l5w = false;
							break;
						case "Mo":
							if (dctPts["Mo"] > 359) l5w = false;
							break;
						case "Ma":
							if (dctPts["Ma"] > 299) l5w = false;
							break;
						case "Me":
							if (dctPts["Me"] > 419) l5w = false;
							break;
						case "Ju":
							if (dctPts["Ju"] > 389) l5w = false;
							break;
						case "Ve":
							if (dctPts["Ve"] > 329) l5w = false;
							break;
						case "Sa":
							if (dctPts["Sa"] > 299) l5w = false;
							break;
						default:
							break;
					}
					switch (dctHou[9].Split('|')[2])
					{
						case "Su":
							if (dctPts["Su"] > 389) l9w = false;
							break;
						case "Mo":
							if (dctPts["Mo"] > 359) l9w = false;
							break;
						case "Ma":
							if (dctPts["Ma"] > 299) l9w = false;
							break;
						case "Me":
							if (dctPts["Me"] > 419) l9w = false;
							break;
						case "Ju":
							if (dctPts["Ju"] > 389) l9w = false;
							break;
						case "Ve":
							if (dctPts["Ve"] > 329) l9w = false;
							break;
						case "Sa":
							if (dctPts["Sa"] > 299) l9w = false;
							break;
						default:
							break;
					}

					bool isfb = false;
					bool isfm = false;
					//string gem1 = string.Empty, gem5 = string.Empty, gem9 = string.Empty;
					var gems1 = (Dictionary<string, string>?)null;
					var gems5 = (Dictionary<string, string>?)null;
					var gems9 = (Dictionary<string, string>?)null;
					if (fmpls[dctHou[1].Split('|')[0]].ToString().Contains(dctHou[1].Split('|')[2]))
					{
						isfm = true;
					}
					if (fbpls[dctHou[1].Split('|')[0]].ToString().Contains(dctHou[1].Split('|')[2]))
					{
						isfb = true;
					}
					if (h1w && isfb)
					{
						gems1 = (Dictionary<string, string>)dctGems[dctHou[1].Split('|')[2]];
					}
					else if (h1w && !isfm)
					{
						gems1 = (Dictionary<string, string>)dctGems[dctHou[1].Split('|')[2]];
					}
					else if (h1w)
					{
						//?
					}

					if (fmpls[dctHou[5].Split('|')[0]].ToString().Contains(dctHou[5].Split('|')[2]))
					{
						isfm = true;
					}
					if (fbpls[dctHou[5].Split('|')[0]].ToString().Contains(dctHou[5].Split('|')[2]))
					{
						isfb = true;
					}
					if (h5w && isfb)
					{
						gems5 = (Dictionary<string, string>)dctGems[dctHou[5].Split('|')[2]];
					}
					else if (h5w && !isfm)
					{
						gems5 = (Dictionary<string, string>)dctGems[dctHou[5].Split('|')[2]];
					}
					if (h9w && isfb)
					{
						gems9 = (Dictionary<string, string>)dctGems[dctHou[9].Split('|')[2]];
					}
					else if (h9w && !isfm)
					{
						gems9 = (Dictionary<string, string>)dctGems[dctHou[9].Split('|')[2]];
					}
					if (gems1 != null || gems5 != null || gems9 != null)
					{
						helper.Gfx.DrawString(dctAst["gemstone recommendation"], fontHeader, XBrushes.Black, new XRect(cx, ht, tblWidth, fontHeader.Height), XStringFormats.TopLeft);
						ht += fontHeader.Height + 10;
						if (gems1 != null)
						{
							foreach (var g in gems1)
							{
								if (ht >= tblHeight - 10)
								{
									helper.GetLinePosition(tblHeight);
									ht = lineHeight + 10;
								}
								cx = 15;
								helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
								txtp = cx + 1;
								tht = ht + 12;
								helper.Gfx.DrawString(g.Key, fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
								txtp += tblWidth.Point * (25 / (double)100);
								helper.Gfx.DrawString(g.Value, fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
								ht += lineHeight;
								colw = tblWidth.Point * (25 / (double)100);
							}
						}
						if (gems5 != null && gems1 == null)
						{
							foreach (var g in gems5)
							{
								if (ht >= tblHeight - 10)
								{
									helper.GetLinePosition(tblHeight);
									ht = lineHeight + 10;
								}
								cx = 15;
								helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
								txtp = cx + 1;
								tht = ht + 12;
								helper.Gfx.DrawString(g.Key, fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
								txtp += tblWidth.Point * (25 / (double)100);
								helper.Gfx.DrawString(g.Value, fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
								ht += lineHeight;
								colw = tblWidth.Point * (25 / (double)100);
							}
						}
						if (gems9 != null && gems1 == null && gems5 == null)
						{
							foreach (var g in gems9)
							{
								if (ht >= tblHeight - 10)
								{
									helper.GetLinePosition(tblHeight);
									ht = lineHeight + 10;
								}
								cx = 15;
								helper.Gfx.DrawRectangle(vpen, vbrh, new XRect(15, ht, tblWidth, lineHeight));
								txtp = cx + 1;
								tht = ht + 12;
								helper.Gfx.DrawString(g.Key, fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
								txtp += tblWidth.Point * (25 / (double)100);
								helper.Gfx.DrawString(g.Value, fontBold, XBrushes.White, txtp, tht, XStringFormats.Default);
								ht += lineHeight;
								colw = tblWidth.Point * (25 / (double)100);
							}
						}
					}
				}
				#endregion

				// Save the document... 
				//string charts = Path.Combine(astClient, "charts");
				//string pdf = string.Format("{0}\\{1}.pdf", charts, guid.ToString());
				Guid guid = Guid.NewGuid();
				MemoryStream vstrm = new MemoryStream();
				document.Save(vstrm, false);
				return File(vstrm, "application/pdf", string.Format("{0}.pdf", guid.ToString()));
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				string err = string.Format("Encountered an error while genrating report. Please send this report to info@vedichoroo.com. ERROR:{0} {1}", eX.Message, line.ToString());
				helper.tf.DrawString(err, fontSbsr, XBrushes.Red, new XRect(20, ht, tblWidth, lineHeight * 10), XStringFormats.TopLeft);
				Guid guid = Guid.NewGuid();
				MemoryStream vstrm = new MemoryStream();
				document.Save(vstrm, false);
				return File(vstrm, "application/pdf", string.Format("{0}.pdf", guid.ToString()));
				//				return new JsonResult(string.Format("ERROR:{0} {1}", eX.Message, line.ToString()));
			}
		}
		//public async Task<IActionResult> PredictDashTrans(string dob, string tob, string mdas, string adas, string pdas, string pend, string latlng, string timezone, int dstofset, int ayanid)
		//{
		//	try
		//	{
		//		Dictionary<string, PlanetHouse> dctPlHou = new Dictionary<string, PlanetHouse>();
		//		string[] ras = { "ar|M|Ma", "ta|F|Ve", "ge|D|Me", "cn|M|Mo", "le|F|Su", "vi|D|Me", "li|M|Ve", "sc|F|Ma", "sa|D|Ju", "cp|M|Sa", "aq|F|Sa", "pi|D|Ju" };
		//		Dictionary<string, int> zstart = new Dictionary<string, int>();
		//		zstart["ar"] = 0;
		//		zstart["ta"] = 30;
		//		zstart["ge"] = 60;
		//		zstart["cn"] = 90;
		//		zstart["le"] = 120;
		//		zstart["vi"] = 150;
		//		zstart["li"] = 180;
		//		zstart["sc"] = 210;
		//		zstart["sa"] = 240;
		//		zstart["cp"] = 270;
		//		zstart["aq"] = 300;
		//		zstart["pi"] = 330;
		//		string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
		//		Dictionary<string, string> dctPlNames = new Dictionary<string, string>();
		//		dctPlNames.Add("Su", "Sun");
		//		dctPlNames.Add("Mo", "Moon");
		//		dctPlNames.Add("Ju", "Jupiter");
		//		dctPlNames.Add("Me", "Mercury");
		//		dctPlNames.Add("Ve", "Venus");
		//		dctPlNames.Add("Ma", "Mars");
		//		dctPlNames.Add("Sa", "Saturn");
		//		dctPlNames.Add("MEAN_NODE", "MEAN NODE");
		//		dctPlNames.Add("TRUE_NODE", "TRUE NODE");
		//		dctPlNames.Add("Ra", "Rahu");
		//		dctPlNames.Add("Ke", "Ketu");
		//		string tz = TZConvert.IanaToWindows(timezone);
		//		TimeZoneInfo tzInf = TimeZoneInfo.FindSystemTimeZoneById(tz);
		//		int d = Convert.ToInt32(dob.Split('|')[0]);
		//		int m = Convert.ToInt32(dob.Split('|')[1]);
		//		int y = Convert.ToInt32(dob.Split('|')[2]);
		//		int hour = Convert.ToInt32(tob.Split('|')[0]);
		//		int min = Convert.ToInt32(tob.Split('|')[1]);
		//		int sec = Convert.ToInt32(tob.Split('|')[2]);
		//		double lat = Convert.ToDouble(latlng.Split('|')[0]);
		//		double lng = Convert.ToDouble(latlng.Split('|')[1]);
		//		string ayan = string.Empty;
		//		if (((AYANMSAS)ayanid != AYANMSAS.FAGAN) && ((AYANMSAS)ayanid != AYANMSAS.LAHIRI))
		//		{
		//			TimeSpan tzO = tzInf.GetUtcOffset(DateTime.Now);
		//			double tzofset = Convert.ToDouble(string.Format("{0}.{1}", tzO.Hours, tzO.Minutes));
		//			ayan = Ayanmsa.CalcEx(d, m, y, tzofset, (AYANMSAS)ayanid);
		//		}
		//		//int dof = rParms.dstofset ?? 0;
		//		//double tof = rParms.tzofset ?? dof;
		//		Horoscope mHoro = await getHoroscope(y, m, d, hour, min, sec, lat, lng, tz, dstofset, ayan, ayanid, true);
		//		string[] signs = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
		//		int rpos = 0;
		//		foreach (string sign in signs)
		//		{
		//			rpos++;
		//			if (mHoro.planetsPos.ContainsKey(sign))
		//			{
		//				var pls = mHoro.planetsPos[sign].Split('|');
		//				for (var k = 0; k < pls.Length; k++)
		//				{
		//					if (pls[k].Split(' ')[1] == "MEAN_NODE")
		//					{
		//						var kpos = rpos + 6;
		//						if (kpos > 12) kpos = (kpos - 12);
		//						if (mHoro.planetsPos.ContainsKey(signs[kpos - 1]))
		//						{
		//							var eP = mHoro.planetsPos[signs[kpos - 1]];
		//							mHoro.planetsPos[signs[kpos - 1]] = eP + '|' + pls[k].Split(' ')[0] + ' ' + "Ke";
		//						}
		//						else
		//						{
		//							mHoro.planetsPos[signs[kpos - 1]] = pls[k].Split(' ')[0] + ' ' + "Ke";
		//						}
		//						mHoro.planetsPos[sign] = mHoro.planetsPos[sign].Replace("MEAN_NODE", "Ra");
		//					}
		//				}
		//			}
		//		}
		//		Dictionary<string, string> plpos = mHoro.planetsPos;
		//		string rJ = string.Format(@"{0}\o_rashis.json", astClient);
		//		Dictionary<string, string> rashis;
		//		using (StreamReader r4 = new StreamReader(rJ))
		//		{
		//			string json4 = r4.ReadToEnd();
		//			rashis = JsonConvert.DeserializeObject<Dictionary<string, string>>(json4);
		//			foreach (string ra in ras)
		//			{
		//				bool bpl = false;
		//				string pkey = string.Empty;
		//				if (plpos.ContainsKey(ra.Split('|')[0]))
		//				{
		//					foreach (string pl in plpos[ra.Split('|')[0]].Split('|'))
		//					{
		//						int hno = Convert.ToInt32(ra.Split('|')[3]);
		//						string lordship = string.Empty;
		//						switch (hno)
		//						{
		//							case 1:
		//								lordship = "BOTH";
		//								break;
		//							case 5:
		//							case 9:
		//								lordship = "TRI";
		//								break;
		//							case 4:
		//							case 7:
		//							case 10:
		//								lordship = "KEN";
		//								break;
		//							default:
		//								break;
		//						}
		//						if (pl.Split(' ')[1] != "Ur" && pl.Split(' ')[1] != "Pl" && pl.Split(' ')[1] != "me" && pl.Split(' ')[1] != "os" && pl.Split(' ')[1] != "Ne" && pl.Split(' ')[1] != "AC" && pl.Split(' ')[1] != "TRUE_NODE")
		//						{  //consider only true  
		//							string[] pld = pl.Split(' ')[0].Split('.');
		//							PlanetHouse pHou = new PlanetHouse
		//							{
		//								code = pl.Split(' ')[1],
		//								name = dctPlNames[pl.Split(' ')[1]],
		//								hno = Convert.ToInt32(ra.Split('|')[3]),
		//								mhno = 0,
		//								shno = 0,
		//								pos = dmsToDec(Convert.ToInt32(pld[0]), Convert.ToInt32(pld[1]), (pld.Count() > 2) ? Convert.ToInt32(pld[2]) : 0),//Convert.ToDouble(string.Format("{0}.{1}", pld[0], pld[1])),
		//								dmspos = string.Format("{0}°{1}'{2}\"", pld[0], pld[1], pld[2]),
		//								sign = ra.Split('|')[0],
		//								rashi = rashis[ra.Split('|')[0]].ToString().Split('|')[1],
		//								signtype = ra.Split('|')[1],
		//								lordship = lordship,
		//								houselord = ra.Split('|')[2]
		//							};
		//							dctPlHou[pl.Split(' ')[1]] = pHou;
		//						}
		//					}
		//				}
		//			}
		//		}
		//		List<Transit2> lT2 = await GetDashTransEx(dctPlNames[mdas], dctPlNames[adas], dctPlNames[pdas], pend, latlng, timezone, ayanid);
		//		string tdts = string.Empty;
		//		Dictionary<string, string> dctTrns = new Dictionary<string, string>();
		//		string tvisits = string.Empty;
		//		foreach (var trn in lT2)
		//		{
		//			if (trn.sssl == string.Empty) continue;
		//			foreach (var ssl in trn.sssl.Split(','))
		//			{
		//				if (ssl.Split('-')[1] == dctPlNames[slrds].ToLower())
		//				{
		//					string slrd = string.Format("{0}{1}", char.ToUpper(ssl.Split('-')[2][0]), ssl.Split('-')[2][1]);
		//					int nh = Convert.ToInt32(sg.Key.Split('-')[0]) - 1;
		//					if (nh == 0) nh = 12;
		//					//else nh = nh - 1;
		//					bool bneg = false;
		//					foreach (var ng in dctPlHou[slrd].sigs)
		//					{
		//						if (ng == nh) bneg = true;
		//					}
		//					if (!bneg)
		//					{
		//						string vst = string.Format("{0}-{1}-{2}", ssl.Split('|')[0], ssl.Split('|')[1].Split('-')[2].Split(' ')[1], ssl.Split('|')[1].Split('-')[1]);
		//						if (tvisits.IndexOf(vst) == -1)
		//						{
		//							dctTrns[vst] = trn.date;
		//							tdts += trn.date + ",";
		//						}
		//						else
		//						{
		//							dctTrns[vst] = string.Format("{0}-{1}", dctTrns[vst].Split('-')[0], trn.date);
		//						}
		//						tvisits += vst;
		//					}
		//				}
		//			}
		//		}
		//		string tdesc = string.Empty;
		//		Dictionary<string, string> dctPlTrns = new Dictionary<string, string>();
		//		foreach (var dtrn in dctTrns)
		//		{
		//			string tky = string.Format("{0}", dtrn.Key.Split('-')[3]);
		//			if (!dctPlTrns.ContainsKey(tky))
		//				dctPlTrns[tky] = string.Format("{0}|{1}", dtrn.Value, dtrn.Key.Split('-')[4]);
		//			else
		//			{
		//				dctPlTrns[tky] += string.Format("&{0}|{1}", dtrn.Value, dtrn.Key.Split('-')[4]);
		//			}
		//		}
		//		if (vlrds.IndexOf(slrds) == -1)
		//		{
		//			foreach (var dptns in dctPlTrns)
		//			{
		//				string tpl = dctPlNames[dptns.Key];
		//				string tzd = string.Empty;
		//				string tdt = string.Empty;
		//				foreach (var dpts in dptns.Value.Split('&'))
		//				{
		//					if (tzd.IndexOf(dctAst[dpts.Split('|')[1]]) == -1)
		//						tzd += string.Format("{0} ", dctAst[dpts.Split('|')[1]]);
		//					tdt += string.Format("{0} ", dpts.Split('|')[0]);
		//				}
		//				tdesc += string.Format("Transit of {0} in {1} during {2}", tpl, tzd, tdt);
		//			}
		//		}
		//		if (tdesc != string.Empty)
		//			desc = string.Format("{0}. This even could happen during {1}", sg.Value, tdesc);
		//		else
		//			desc = string.Format("{0}. Event dates same as for {0} mentioned above", sg.Value, dctPlNames[slrds]);

		//	}
		//	catch (Exception eX)
		//	{

		//	}
		//}
		public async Task<IActionResult> PredictDasha([FromBody] DashaParams dParms)
		{
			try
			{
				//calc mlrd pos
				//calc alrd pos
				//calc mlrd akv
				//calc alrd akv
				//define the mlrd-alrd combined results
				//identify the major transits during the phase
				//define the impact during the transit
				//find & suggest possible remedies
				return new JsonResult("success");
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				return new JsonResult(string.Format("{0} {1}", eX.Message, line.ToString()));
			}
		}
		public double ConvertToRadians(double angle)
		{
			return (angle * Math.PI) / 180;
		}
		private Task<XImage> downloadFile(string url)
		{
			//Create a stream for the file
			return Task.Run(() =>
			{
				Stream stream = null;
				try
				{

					//This controls how many bytes to read at a time and send to the client
					int bytesToRead = 10000;

					// Buffer to read bytes in chunk size specified above
					byte[] buffer = new Byte[bytesToRead];

					// The number of bytes read
					try
					{
						//Create a WebRequest to get the file
						HttpWebRequest fileReq = (HttpWebRequest)HttpWebRequest.Create(url);

						//Create a response for this request
						HttpWebResponse fileResp = (HttpWebResponse)fileReq.GetResponse();

						if (fileReq.ContentLength > 0)
							fileResp.ContentLength = fileReq.ContentLength;

						//Get the Stream returned from the response
						stream = fileResp.GetResponseStream();
						return XImage.FromStream(stream);
					}
					finally
					{
						if (stream != null)
						{
							//Close the input stream
							stream.Close();
						}
					}
				}
				catch (Exception eX)
				{
					return XImage.FromStream(stream);
				}
			});
		}
		private void UpdateShdv(Dictionary<string, string> plpos, ref Dictionary<string, string> shd, int ndivs)
		{
			bool asc = false;
			int r2 = 0;
			string[] ras = { "ar", "ta", "ge", "cn", "le", "vi", "li", "sc", "sa", "cp", "aq", "pi" };
			for (int r1 = 0; r1 < 12; r1++)
			{
				if (asc)
				{
					r2++;
				}
				if (plpos.ContainsKey(ras[r1]))
				{
					foreach (string pl in plpos[ras[r1]].Split('|'))
					{
						string pls = pl.Split(' ')[1];
						if (pls == "AC")
						{
							asc = true;
							r2++;
						}
						else if (r2 > 1)
						{
							if (pls != "Ur" && pls != "Pl" && pls != "me" && pls != "os" && pls != "Ne" && pls != "AC" && pls != "TRUE_NODE")
							{
								string ky = string.Format("{0}-{1}", pls, ndivs);
								shd[ky] = string.Format("{0}-{1}", r2, ras[r1]);
							}
						}
					}
					if (r2 == 1)
					{
						foreach (string pl in plpos[ras[r1]].Split('|'))
						{
							string pls = pl.Split(' ')[1];
							if (pls != "Ur" && pls != "Pl" && pls != "me" && pls != "os" && pls != "Ne" && pls != "AC" && pls != "TRUE_NODE")
							{
								string ky = string.Format("{0}-{1}", pls, ndivs);
								shd[ky] = string.Format("{0}-{1}", r2, ras[r1]);
							}
						}
					}
				}
				if (r2 == 12)
				{
					break;
				}
				if (r1 == 11) r1 = -1;
			}

		}
		private void DrawChart(string name, string latlng, LayoutHelper helper, double cx, double ht, double cw, double ch, Dictionary<string, string> ppos, Dictionary<string, string> dctAst, string fnt)//, string asc_sgn, string asc_pos)
		{
			try
			{
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				const int normalFontSize = 10;
				XPdfFontOptions opts = new XPdfFontOptions(PdfFontEncoding.Unicode);
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				XFont fontBold = new XFont(fnt, normalFontSize, XFontStyle.Bold, opts);
				XFont fontPP = new XFont("Roboto", 6, XFontStyle.Bold, opts);
				XFont fontPN = new XFont(fnt, 8, XFontStyle.Bold, opts);
				var vbrh = new XSolidBrush(XColor.FromArgb(255, 211, 84, 0));
				var vpen = new XPen(XColor.FromArgb(255, 211, 84, 0));
				double bx = cw / 4;
				helper.Gfx.DrawRectangle(vpen, new XRect(cx, ht, cw, ch));
				helper.Gfx.DrawLine(vpen, cx, ht + bx, cx + cw, ht + bx);
				helper.Gfx.DrawLine(vpen, cx, ht + bx * 2, cx + cw, ht + bx * 2);
				helper.Gfx.DrawLine(vpen, cx, ht + bx * 3, cx + cw, ht + bx * 3);
				helper.Gfx.DrawLine(vpen, cx + bx, ht, cx + bx, ht + ch);
				helper.Gfx.DrawLine(vpen, cx + bx * 2, ht, cx + bx * 2, ht + ch);
				helper.Gfx.DrawLine(vpen, cx + bx * 3, ht, cx + bx * 3, ht + ch);
				helper.Gfx.DrawRectangle(vbrh, new XRect(cx + bx, ht + bx, cw / 2, ch / 2));
				XSize nsz = helper.Gfx.MeasureString(name, fontBold);
				XSize psz = helper.Gfx.MeasureString(latlng.Replace('|', ','), fontBold);
				helper.Gfx.DrawString(name, fontBold, XBrushes.White, cx + bx + (cw / 2 - nsz.Width) / 2, ht + bx + ((ch / 2 + nsz.Height) / 2) - nsz.Height, XStringFormats.Default);
				helper.Gfx.DrawString(latlng.Replace('|', ','), fontBold, XBrushes.White, cx + bx + (cw / 2 - psz.Width) / 2, ht + bx + ((ch / 2 + psz.Height) / 2), XStringFormats.Default);
				double icr = (bx - 18) / (double)2;
				foreach (var z in zstart)
				{
					string fl = string.Format(@"{0}\{1}.png", astClient, z.Key);
					switch (z.Key)
					{
						case "pi":
							helper.DrawImage(fl, (int)(cx + icr), (int)(ht + icr), 18, 18);
							break;
						case "ar":
							helper.DrawImage(fl, (int)(cx + bx + icr), (int)(ht + icr), 18, 18);
							break;
						case "ta":
							helper.DrawImage(fl, (int)(cx + bx * 2 + icr), (int)(ht + icr), 18, 18);
							break;
						case "ge":
							helper.DrawImage(fl, (int)(cx + bx * 3 + icr), (int)(ht + icr), 18, 18);
							break;
						case "aq":
							helper.DrawImage(fl, (int)(cx + icr), (int)(ht + bx + icr), 18, 18);
							break;
						case "cn":
							helper.DrawImage(fl, (int)(cx + bx * 3 + icr), (int)(ht + bx + icr), 18, 18);
							break;
						case "cp":
							helper.DrawImage(fl, (int)(cx + icr), (int)(ht + bx * 2 + icr), 18, 18);
							break;
						case "le":
							helper.DrawImage(fl, (int)(cx + bx * 3 + icr), (int)(ht + bx * 2 + icr), 18, 18);
							break;
						case "sa":
							helper.DrawImage(fl, (int)(cx + icr), (int)(ht + bx * 3 + icr), 18, 18);
							break;
						case "sc":
							helper.DrawImage(fl, (int)(cx + bx + icr), (int)(ht + bx * 3 + icr), 18, 18);
							break;
						case "li":
							helper.DrawImage(fl, (int)(cx + bx * 2 + icr), (int)(ht + bx * 3 + icr), 18, 18);
							break;
						case "vi":
							helper.DrawImage(fl, (int)(cx + bx * 3 + icr), (int)(ht + bx * 3 + icr), 18, 18);
							break;
						default:
							break;
					}
				}
				double r = (cw / (double)2) - 10;
				foreach (var pp in ppos)
				{
					foreach (var pln in pp.Value.Split('|'))
					{
						string code = pln.Split(' ')[1];
						string ps = pln.Split(' ')[0];
						if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "TRUE_NODE")
						{
							string plp = pln.Split(' ')[0];
							double dlng = dmsToDec(zstart[pp.Key] + Convert.ToInt32(ps.Split('.')[0]), Convert.ToInt32(ps.Split('.')[1]), Convert.ToInt32(ps.Split('.')[2]));
							double symp2 = dlng + 240F;
							symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
							double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
							double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + (ch / 2);
							XSize sz = helper.Gfx.MeasureString(code, fontPN);
							helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
						}
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				//return new JsonResult(string.Format("ERROR:{0} {1}", eX.Message, line.ToString()));
			}
		}
		private void DrawVChart(string title, LayoutHelper helper, double cx, double ht, double cw, double ch, Dictionary<string, string> ppos, Dictionary<string, string> dctAst, string fnt)
		{
			try
			{
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				const int normalFontSize = 10;
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				XPdfFontOptions opts = new XPdfFontOptions(PdfFontEncoding.Unicode);
				XFont fontBold = new XFont(fnt, normalFontSize, XFontStyle.Bold, opts);
				XFont fontPP = new XFont("Roboto", 6, XFontStyle.Bold, opts);
				XFont fontPN = new XFont(fnt, 8, XFontStyle.Bold, opts);
				var vbrh = new XSolidBrush(XColor.FromArgb(255, 211, 84, 0));
				var vpen = new XPen(XColor.FromArgb(255, 211, 84, 0));
				double bx = cw / 4;
				helper.Gfx.DrawRectangle(vpen, new XRect(cx, ht, cw, ch));
				helper.Gfx.DrawLine(vpen, cx, ht + bx, cx + cw, ht + bx);
				helper.Gfx.DrawLine(vpen, cx, ht + bx * 2, cx + cw, ht + bx * 2);
				helper.Gfx.DrawLine(vpen, cx, ht + bx * 3, cx + cw, ht + bx * 3);
				helper.Gfx.DrawLine(vpen, cx + bx, ht, cx + bx, ht + ch);
				helper.Gfx.DrawLine(vpen, cx + bx * 2, ht, cx + bx * 2, ht + ch);
				helper.Gfx.DrawLine(vpen, cx + bx * 3, ht, cx + bx * 3, ht + ch);
				helper.Gfx.DrawRectangle(vbrh, new XRect(cx + bx, ht + bx, cw / 2, ch / 2));
				XSize nsz = helper.Gfx.MeasureString(title, fontBold);
				helper.Gfx.DrawString(title, fontBold, XBrushes.White, cx + bx + (cw / 2 - nsz.Width) / 2, ht + bx + ((ch / 2 + nsz.Height) / 2), XStringFormats.Default);
				double icr = (bx - 18) / (double)2;
				foreach (var z in zstart)
				{
					string fl = string.Format(@"{0}\{1}.png", astClient, z.Key);
					switch (z.Key)
					{
						case "pi":
							helper.DrawImage(fl, (int)(cx + icr), (int)(ht + icr), 18, 18);
							break;
						case "ar":
							helper.DrawImage(fl, (int)(cx + bx + icr), (int)(ht + icr), 18, 18);
							break;
						case "ta":
							helper.DrawImage(fl, (int)(cx + bx * 2 + icr), (int)(ht + icr), 18, 18);
							break;
						case "ge":
							helper.DrawImage(fl, (int)(cx + bx * 3 + icr), (int)(ht + icr), 18, 18);
							break;
						case "aq":
							helper.DrawImage(fl, (int)(cx + icr), (int)(ht + bx + icr), 18, 18);
							break;
						case "cn":
							helper.DrawImage(fl, (int)(cx + bx * 3 + icr), (int)(ht + bx + icr), 18, 18);
							break;
						case "cp":
							helper.DrawImage(fl, (int)(cx + icr), (int)(ht + bx * 2 + icr), 18, 18);
							break;
						case "le":
							helper.DrawImage(fl, (int)(cx + bx * 3 + icr), (int)(ht + bx * 2 + icr), 18, 18);
							break;
						case "sa":
							helper.DrawImage(fl, (int)(cx + icr), (int)(ht + bx * 3 + icr), 18, 18);
							break;
						case "sc":
							helper.DrawImage(fl, (int)(cx + bx + icr), (int)(ht + bx * 3 + icr), 18, 18);
							break;
						case "li":
							helper.DrawImage(fl, (int)(cx + bx * 2 + icr), (int)(ht + bx * 3 + icr), 18, 18);
							break;
						case "vi":
							helper.DrawImage(fl, (int)(cx + bx * 3 + icr), (int)(ht + bx * 3 + icr), 18, 18);
							break;
						default:
							break;
					}
				}
				double r = (cw / (double)2) - 10;
				foreach (var pp in ppos)
				{
					foreach (var pln in pp.Value.Split('|'))
					{
						string code = pln.Split(' ')[1];
						string ps = pln.Split(' ')[0];
						if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "TRUE_NODE")
						{
							string plp = pln.Split(' ')[0];
							double dlng = dmsToDec(zstart[pp.Key] + Convert.ToInt32(ps.Split('.')[0]), Convert.ToInt32(ps.Split('.')[1]), Convert.ToInt32(ps.Split('.')[2]));
							double symp2 = dlng + 240F;
							symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
							double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
							double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + (ch / 2);
							XSize sz = helper.Gfx.MeasureString(code, fontPN);
							helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
						}
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				//return new JsonResult(string.Format("ERROR:{0} {1}", eX.Message, line.ToString()));
			}
		}
		private void DrawNIChart(string name, string latlng, LayoutHelper helper, double cx, double ht, double cw, double ch, Dictionary<string, string> ppos, string asc_sgn, Dictionary<string, string> dctAst, string fnt)//, string asc_pos)
		{
			try
			{
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				const int normalFontSize = 10;
				double bx = cw / 4;
				double hbx = bx / (double)2;
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				XPdfFontOptions opts = new XPdfFontOptions(PdfFontEncoding.Unicode);
				XFont fontBold = new XFont("Roboto", normalFontSize, XFontStyle.Bold, opts);
				XFont fontPP = new XFont("Roboto", 6, XFontStyle.Bold, opts);
				XFont fontPN = new XFont(fnt, 8, XFontStyle.Bold, opts);
				var vbrh = new XSolidBrush(XColor.FromArgb(255, 211, 84, 0));
				var vpen = new XPen(XColor.FromArgb(255, 211, 84, 0));
				helper.Gfx.DrawRectangle(vpen, new XRect(cx, ht, cw, ch));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + (bx * 2), ht), new XPoint(cx + (bx * 2), ht + (hbx)), new XPoint(cx + bx, (ht + bx) - hbx), new XPoint(cx + bx, ht + bx));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx, ht + (bx * 2)), new XPoint(cx + hbx, ht + (bx * 2)), new XPoint(cx + bx / 2, ht + bx), new XPoint(cx + bx, ht + bx));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx, ht + (bx * 2)), new XPoint(cx + hbx, ht + (bx * 2)), new XPoint(cx + hbx, ht + (bx * 3)), new XPoint(cx + bx, ht + (bx * 3)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + bx, ht + (bx * 3)), new XPoint(cx + bx, ht + (bx * 3) + hbx), new XPoint(cx + (bx * 2), ht + (bx * 4) - hbx), new XPoint(cx + (bx * 2), ht + (bx * 4)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + (bx * 2), ht + (bx * 4)), new XPoint(cx + (bx * 2), ht + (bx * 3) + hbx), new XPoint(cx + bx * 3, ht + (bx * 3) + hbx), new XPoint(cx + bx * 3, ht + (bx * 3)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + bx * 3, ht + (bx * 3)), new XPoint(cx + (bx * 3) + hbx, ht + (bx * 3)), new XPoint(cx + (bx * 3) + hbx, ht + (bx * 2)), new XPoint(cx + bx * 4, ht + (bx * 2)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + (bx * 4), ht + (bx * 2)), new XPoint(cx + (bx * 3) + hbx, ht + (bx * 2)), new XPoint(cx + (bx * 3) + hbx, ht + (bx)), new XPoint(cx + bx * 3, ht + (bx)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + (bx * 3), ht + bx), new XPoint(cx + (bx * 3), ht + bx - hbx), new XPoint(cx + (bx * 2), ht + hbx), new XPoint(cx + bx * 2, ht));
				helper.Gfx.DrawLine(vpen, cx, ht, cx + bx * 4, ht + bx * 4);
				helper.Gfx.DrawLine(vpen, cx + bx * 4, ht, cx, ht + bx * 4);
				XSize nsz = helper.Gfx.MeasureString(name, fontBold);
				XSize psz = helper.Gfx.MeasureString(latlng.Replace('|', ','), fontBold);
				helper.Gfx.DrawString(name, fontBold, XBrushes.Black, cx + bx + (cw / 2 - nsz.Width) / 2, ht + bx + ((ch / 2 + nsz.Height) / 2) - nsz.Height, XStringFormats.Default);
				helper.Gfx.DrawString(latlng.Replace('|', ','), fontBold, XBrushes.Black, cx + bx + (cw / 2 - psz.Width) / 2, ht + bx + ((ch / 2 + psz.Height) / 2), XStringFormats.Default);
				int icr = 9;
				foreach (var z in zstart)
				{
					string fl = string.Format(@"{0}\{1}.png", astClient, z.Key);
					int hno = calcHno(asc_sgn, z.Key);
					switch (hno)
					{
						case 1:
							helper.DrawImage(fl, (int)(cx + (bx * 2) - icr), (int)(ht + bx) - icr, 18, 18);
							break;
						case 2:
							helper.DrawImage(fl, (int)(cx + bx - icr), (int)(ht + hbx - icr), 18, 18);
							break;
						case 3:
							helper.DrawImage(fl, (int)(cx + hbx - icr), (int)(ht + bx - icr), 18, 18);
							break;
						case 4:
							helper.DrawImage(fl, (int)(cx + bx - icr), (int)(ht + bx * 2 - icr), 18, 18);
							break;
						case 5:
							helper.DrawImage(fl, (int)(cx + hbx - icr), (int)(ht + bx * 3 - icr), 18, 18);
							break;
						case 6:
							helper.DrawImage(fl, (int)(cx + bx - icr), (int)(ht + bx * 3 + hbx - icr), 18, 18);
							break;
						case 7:
							helper.DrawImage(fl, (int)(cx + bx * 2 - icr), (int)(ht + bx * 3 - icr), 18, 18);
							break;
						case 8:
							helper.DrawImage(fl, (int)(cx + bx * 3 - icr), (int)(ht + bx * 3 + hbx - icr), 18, 18);
							break;
						case 9:
							helper.DrawImage(fl, (int)(cx + bx * 3 + hbx - icr), (int)(ht + bx * 3 - icr), 18, 18);
							break;
						case 10:
							helper.DrawImage(fl, (int)(cx + bx * 3 - icr), (int)(ht + bx * 2 - icr), 18, 18);
							break;
						case 11:
							helper.DrawImage(fl, (int)(cx + bx * 3 + hbx - icr), (int)(ht + bx - icr), 18, 18);
							break;
						case 12:
							helper.DrawImage(fl, (int)(cx + (bx * 3)) - icr, (int)(ht + hbx) - icr, 18, 18);
							break;
						default:
							break;
					}
				}
				double ctr = cw / (double)2;
				double r = ctr - 20;
				double ofset = (zstart[asc_sgn]) + 30;
				foreach (var pp in ppos)
				{
					foreach (var pln in pp.Value.Split('|'))
					{
						string code = pln.Split(' ')[1];
						string ps = pln.Split(' ')[0];
						if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "TRUE_NODE")
						{
							string plp = pln.Split(' ')[0];
							double dlng = dmsToDec(zstart[pp.Key] + Convert.ToInt32(ps.Split('.')[0]), Convert.ToInt32(ps.Split('.')[1]), Convert.ToInt32(ps.Split('.')[2]));
							double symp2 = 240F + (ofset - dlng) + 10;
							symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
							double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
							double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + (ch / 2);
							XSize sz = helper.Gfx.MeasureString(code, fontPN);
							helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
						}
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				//return new JsonResult(string.Format("ERROR:{0} {1}", eX.Message, line.ToString()));
			}
		}
		private void DrawSChakra(string name, string latlng, LayoutHelper helper, double cx, double ht, double cw, double ch, Dictionary<string, string> ppos, string asc_sgn, string masc_sgn, string sasc_sgn, Dictionary<string, string> dctAst, string fnt)//, string asc_pos)
		{
			try
			{
				XPoint[] xPt1 = new XPoint[12];
				XPoint[] xPt2 = new XPoint[12];
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				const int normalFontSize = 10;
				double bx = cw / 4;
				double hbx = bx / (double)2;
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				XPdfFontOptions opts = new XPdfFontOptions(PdfFontEncoding.Unicode);
				XFont fontBold = new XFont("Roboto", normalFontSize, XFontStyle.Bold, opts);
				XFont fontPP = new XFont("Roboto", 6, XFontStyle.Bold, opts);
				XFont fontPN = new XFont(fnt, 8, XFontStyle.Bold, opts);
				var vbrh = new XSolidBrush(XColor.FromArgb(255, 211, 84, 0));
				var vpen = new XPen(XColor.FromArgb(255, 211, 84, 0));
				var open = new XPen(XColor.FromArgb(255, 255, 128, 0));
				var bpen = new XPen(XColor.FromArgb(255, 0, 255, 0));
				var rpen = new XPen(XColor.FromArgb(255, 255, 0, 0));
				helper.Gfx.DrawEllipse(rpen, new XRect(cx, ht, cw, ch));
				helper.Gfx.DrawEllipse(bpen, new XRect(cx + 60, ht + 60, cw - 120, ch - 120));
				helper.Gfx.DrawEllipse(open, new XRect(cx + 120, ht + 120, cw - 240, ch - 240));
				helper.Gfx.DrawEllipse(vbrh, new XRect(cx + 180, ht + 180, cw - 360, ch - 360));
				XSize nsz = helper.Gfx.MeasureString("SUDARSHAN CHAKRA", fontBold);
				helper.Gfx.DrawString("SUDARSHAN CHAKRA", fontBold, XBrushes.Black, cx + bx + (cw / 2 - nsz.Width) / 2, ht + bx + ((ch / 2 + nsz.Height) / 2) - nsz.Height, XStringFormats.Default);
				double ctr = (cw - 240) / (double)2;
				double r = ctr - 40;
				double ofset = (zstart[asc_sgn]) + 30;
				foreach (var z in zstart)
				{
					double dlng = zstart[z.Key];
					double symp1 = 255F + (ofset - dlng);
					double symp2 = 240F + (ofset - dlng);
					symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
					symp1 = (symp1 > 360) ? symp1 - 360 : symp1;
					double x = (double)(r * Math.Cos(symp1 * Math.PI / 180F)) + cx + (cw / 2);
					double y = (double)(r * Math.Sin(symp1 * Math.PI / 180F)) + ht + (ch / 2);
					double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
					double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + ht + (ch / 2);
					string fl = string.Format(@"{0}\{1}.png", astClient, z.Key);
					helper.DrawImage(fl, (int)xp, (int)yp, 18, 18);
					if (z.Key == asc_sgn)
					{
						xPt1[0].X = x;
						xPt1[0].Y = y;
					}
					else
					{
						int h = calcHno(asc_sgn, z.Key);
						xPt1[h - 1].X = x;
						xPt1[h - 1].Y = y;
					}

					//XSize sz = helper.Gfx.MeasureString(code, fontPN);
					//helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
				}
				foreach (var pp in ppos)
				{
					foreach (var pln in pp.Value.Split('|'))
					{
						string code = pln.Split(' ')[1];
						string ps = pln.Split(' ')[0];
						if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "TRUE_NODE")
						{
							string plp = pln.Split(' ')[0];
							double dlng = dmsToDec(zstart[pp.Key] + Convert.ToInt32(ps.Split('.')[0]), Convert.ToInt32(ps.Split('.')[1]), Convert.ToInt32(ps.Split('.')[2]));
							double symp2 = 240F + (ofset - dlng) + 10;
							symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
							double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
							double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + (ch / 2);
							XSize sz = helper.Gfx.MeasureString(code, fontPN);
							helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
						}
					}
				}
				ctr = (cw - 120) / (double)2;
				r = ctr - 40;
				ofset = (zstart[masc_sgn]) + 30;
				foreach (var z in zstart)
				{
					double dlng = zstart[z.Key];
					double symp2 = 240F + (ofset - dlng);
					symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
					double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
					double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + ht + (ch / 2);
					string fl = string.Format(@"{0}\{1}.png", astClient, z.Key);
					helper.DrawImage(fl, (int)xp, (int)yp, 18, 18);
					//XSize sz = helper.Gfx.MeasureString(code, fontPN);
					//helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
				}
				foreach (var pp in ppos)
				{
					foreach (var pln in pp.Value.Split('|'))
					{
						string code = pln.Split(' ')[1];
						string ps = pln.Split(' ')[0];
						if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "TRUE_NODE")
						{
							string plp = pln.Split(' ')[0];
							double dlng = dmsToDec(zstart[pp.Key] + Convert.ToInt32(ps.Split('.')[0]), Convert.ToInt32(ps.Split('.')[1]), Convert.ToInt32(ps.Split('.')[2]));
							double symp2 = 240F + (ofset - dlng) + 10;
							symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
							double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
							double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + (ch / 2);
							XSize sz = helper.Gfx.MeasureString(code, fontPN);
							helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
						}
					}
				}
				ctr = (cw) / (double)2;
				r = ctr - 40;
				ofset = (zstart[sasc_sgn]) + 30;

				foreach (var z in zstart)
				{
					double dlng = zstart[z.Key];
					double symp1 = 255F + (ofset - dlng);
					double symp2 = 240F + (ofset - dlng);
					symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
					symp1 = (symp1 > 360) ? symp1 - 360 : symp1;
					double x = (double)(r * Math.Cos(symp1 * Math.PI / 180F)) + cx + (cw / 2);
					double y = (double)(r * Math.Sin(symp1 * Math.PI / 180F)) + ht + (ch / 2);
					symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
					double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
					double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + ht + (ch / 2);
					string fl = string.Format(@"{0}\{1}.png", astClient, z.Key);
					helper.DrawImage(fl, (int)xp, (int)yp, 18, 18);
					if (z.Key == sasc_sgn)
					{
						xPt2[0].X = x;
						xPt2[0].Y = y;
					}
					else
					{
						int h = calcHno(sasc_sgn, z.Key);
						xPt2[h - 1].X = x;
						xPt2[h - 1].Y = y;
					}
					//XSize sz = helper.Gfx.MeasureString(code, fontPN);
					//helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
				}
				foreach (var pp in ppos)
				{
					foreach (var pln in pp.Value.Split('|'))
					{
						string code = pln.Split(' ')[1];
						string ps = pln.Split(' ')[0];
						if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "TRUE_NODE")
						{
							string plp = pln.Split(' ')[0];
							double dlng = dmsToDec(zstart[pp.Key] + Convert.ToInt32(ps.Split('.')[0]), Convert.ToInt32(ps.Split('.')[1]), Convert.ToInt32(ps.Split('.')[2]));
							double symp2 = 240F + (ofset - dlng) + 10;
							symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
							double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
							double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + (ch / 2);
							XSize sz = helper.Gfx.MeasureString(code, fontPN);
							helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
						}
					}
				}
				for (int i = 0; i < 12; i++)
				{
					helper.Gfx.DrawLine(vpen, xPt1[i], xPt2[i]);
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				//return new JsonResult(string.Format("ERROR:{0} {1}", eX.Message, line.ToString()));
			}
		}
		private void DrawVNIChart(string title, LayoutHelper helper, double cx, double ht, double cw, double ch, Dictionary<string, string> ppos, string asc_sgn, string asc_pos, Dictionary<string, string> dctAst, string fnt)
		{
			try
			{
				Dictionary<string, int> zstart = new Dictionary<string, int>();
				zstart["ar"] = 0;
				zstart["ta"] = 30;
				zstart["ge"] = 60;
				zstart["cn"] = 90;
				zstart["le"] = 120;
				zstart["vi"] = 150;
				zstart["li"] = 180;
				zstart["sc"] = 210;
				zstart["sa"] = 240;
				zstart["cp"] = 270;
				zstart["aq"] = 300;
				zstart["pi"] = 330;
				const int normalFontSize = 10;
				double bx = cw / 4;
				double hbx = bx / (double)2;
				string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
				XPdfFontOptions opts = new XPdfFontOptions(PdfFontEncoding.Unicode);
				XFont fontPP = new XFont("Roboto", 6, XFontStyle.Bold, opts);
				XFont fontPN = new XFont(fnt, 8, XFontStyle.Bold, opts);
				XFont fontBold = new XFont(fnt, 10, XFontStyle.Bold, opts);
				var vbrh = new XSolidBrush(XColor.FromArgb(255, 211, 84, 0));
				var vpen = new XPen(XColor.FromArgb(255, 211, 84, 0));
				helper.Gfx.DrawRectangle(vpen, new XRect(cx, ht, cw, ch));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + (bx * 2), ht), new XPoint(cx + (bx * 2), ht + (hbx)), new XPoint(cx + bx, (ht + bx) - hbx), new XPoint(cx + bx, ht + bx));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx, ht + (bx * 2)), new XPoint(cx + hbx, ht + (bx * 2)), new XPoint(cx + bx / 2, ht + bx), new XPoint(cx + bx, ht + bx));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx, ht + (bx * 2)), new XPoint(cx + hbx, ht + (bx * 2)), new XPoint(cx + hbx, ht + (bx * 3)), new XPoint(cx + bx, ht + (bx * 3)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + bx, ht + (bx * 3)), new XPoint(cx + bx, ht + (bx * 3) + hbx), new XPoint(cx + (bx * 2), ht + (bx * 4) - hbx), new XPoint(cx + (bx * 2), ht + (bx * 4)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + (bx * 2), ht + (bx * 4)), new XPoint(cx + (bx * 2), ht + (bx * 3) + hbx), new XPoint(cx + bx * 3, ht + (bx * 3) + hbx), new XPoint(cx + bx * 3, ht + (bx * 3)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + bx * 3, ht + (bx * 3)), new XPoint(cx + (bx * 3) + hbx, ht + (bx * 3)), new XPoint(cx + (bx * 3) + hbx, ht + (bx * 2)), new XPoint(cx + bx * 4, ht + (bx * 2)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + (bx * 4), ht + (bx * 2)), new XPoint(cx + (bx * 3) + hbx, ht + (bx * 2)), new XPoint(cx + (bx * 3) + hbx, ht + (bx)), new XPoint(cx + bx * 3, ht + (bx)));
				helper.Gfx.DrawBezier(vpen, new XPoint(cx + (bx * 3), ht + bx), new XPoint(cx + (bx * 3), ht + bx - hbx), new XPoint(cx + (bx * 2), ht + hbx), new XPoint(cx + bx * 2, ht));
				helper.Gfx.DrawLine(vpen, cx, ht, cx + bx * 4, ht + bx * 4);
				helper.Gfx.DrawLine(vpen, cx + bx * 4, ht, cx, ht + bx * 4);
				XSize nsz = helper.Gfx.MeasureString(title, fontBold);
				helper.Gfx.DrawString(title, fontBold, XBrushes.Black, cx + bx + (cw / 2 - nsz.Width) / 2, ht + bx + ((ch / 2 + nsz.Height) / 2), XStringFormats.Default);
				int icr = 9;
				foreach (var z in zstart)
				{
					string fl = string.Format(@"{0}\{1}.png", astClient, z.Key);
					int hno = calcHno(asc_sgn, z.Key);
					switch (hno)
					{
						case 1:
							helper.DrawImage(fl, (int)(cx + (bx * 2) - icr), (int)(ht + bx) - icr, 18, 18);
							break;
						case 2:
							helper.DrawImage(fl, (int)(cx + bx - icr), (int)(ht + hbx - icr), 18, 18);
							break;
						case 3:
							helper.DrawImage(fl, (int)(cx + hbx - icr), (int)(ht + bx - icr), 18, 18);
							break;
						case 4:
							helper.DrawImage(fl, (int)(cx + bx - icr), (int)(ht + bx * 2 - icr), 18, 18);
							break;
						case 5:
							helper.DrawImage(fl, (int)(cx + hbx - icr), (int)(ht + bx * 3 - icr), 18, 18);
							break;
						case 6:
							helper.DrawImage(fl, (int)(cx + bx - icr), (int)(ht + bx * 3 + hbx - icr), 18, 18);
							break;
						case 7:
							helper.DrawImage(fl, (int)(cx + bx * 2 - icr), (int)(ht + bx * 3 - icr), 18, 18);
							break;
						case 8:
							helper.DrawImage(fl, (int)(cx + bx * 3 - icr), (int)(ht + bx * 3 + hbx - icr), 18, 18);
							break;
						case 9:
							helper.DrawImage(fl, (int)(cx + bx * 3 + hbx - icr), (int)(ht + bx * 3 - icr), 18, 18);
							break;
						case 10:
							helper.DrawImage(fl, (int)(cx + bx * 3 - icr), (int)(ht + bx * 2 - icr), 18, 18);
							break;
						case 11:
							helper.DrawImage(fl, (int)(cx + bx * 3 + hbx - icr), (int)(ht + bx - icr), 18, 18);
							break;
						case 12:
							helper.DrawImage(fl, (int)(cx + (bx * 3)) - icr, (int)(ht + hbx) - icr, 18, 18);
							break;
						default:
							break;
					}
				}
				double ctr = cw / (double)2;
				double r = ctr - 20;
				double ofset = (zstart[asc_sgn] + 30);
				foreach (var pp in ppos)
				{
					foreach (var pln in pp.Value.Split('|'))
					{
						string code = pln.Split(' ')[1];
						if (code != "Ur" && code != "Pl" && code != "me" && code != "os" && code != "Ne" && code != "TRUE_NODE")
						{
							string plp = pln.Split(' ')[0];
							double dlng = dmsToDec(zstart[pp.Key] + Convert.ToInt32(plp.Split('.')[0]), Convert.ToInt32(plp.Split('.')[1]), Convert.ToInt32(plp.Split('.')[2]));
							double symp2 = 240F + (ofset - dlng) + 10;
							symp2 = (symp2 > 360) ? symp2 - 360 : symp2;
							double xp = (double)(r * Math.Cos(symp2 * Math.PI / 180F)) + cx + (cw / 2);
							double yp = (double)(r * Math.Sin(symp2 * Math.PI / 180F)) + (ch / 2);
							XSize sz = helper.Gfx.MeasureString(code, fontPN);
							helper.Gfx.DrawString((code != "AC") ? dctAst[code].Substring(0, 2) : "AC", fontPN, XBrushes.Black, xp, ht + yp, XStringFormats.Default);
						}
					}
				}
			}
			catch (Exception eX)
			{
				var st = new StackTrace(eX, true);
				var frame = st.GetFrame(st.FrameCount - 1);
				var line = frame.GetFileLineNumber();
				//return new JsonResult(string.Format("ERROR:{0} {1}", eX.Message, line.ToString()));
			}
		}
		private async Task<Dictionary<string, string>> analyzeLifEvts(string lord, string lsig)
		{
			Dictionary<string, string> lifevts = new Dictionary<string, string>();
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string fl = string.Format(@"{0}\house_groups.json", astClient);
			using (StreamReader r = new StreamReader(fl))
			{
				string jsn = r.ReadToEnd();
				Dictionary<string, string> hgrps = JsonConvert.DeserializeObject<Dictionary<string, string>>(jsn);
				foreach (var hg in hgrps)
				{
					string h_g = string.Empty;
					string[] sigs = hg.Key.Split('-');
					int idx = sigs[0].IndexOf('(');
					if (idx != -1)
					{
						int s_h = Convert.ToInt32(Regex.Match(sigs[0], @"\(([^)]*)\)").Groups[1].Value);
						var hno = (idx == -1) ? sigs[0] : sigs[0].Substring(0, idx);
						int d_h = Convert.ToInt32(hno);
						sigs[0] = get_h_from_h(s_h, d_h).ToString();
					}
					int sig_c = 0;
					string[] lsigs = lsig.Split(',');
					for (var i = 0; i < sigs.Length; i++)
					{
						if (sigs[i].IndexOf('(') != -1)
						{
							int s_h = Convert.ToInt32(Regex.Match(sigs[i], @"\(([^)]*)\)").Groups[1].Value);
							idx = sigs[i].IndexOf('(');
							var hno = (idx == -1) ? sigs[i] : sigs[i].Substring(0, idx);
							int d_h = Convert.ToInt32(hno);
							sigs[i] = get_h_from_h(s_h, d_h).ToString();
						}
						else if (sigs[i] == "BADH" || sigs[i] == "CUSP")
						{
							continue;
						}
						else if (sigs[i] == "MARS" && sigs[i].ToLower() != lord)
						{
							continue;
						}
						for (var j = i; j < lsigs.Length; j++)
						{
							if (lsigs[j] == sigs[i])
							{   //supporting house satisfied
								if (h_g.IndexOf(sigs[i]) == -1)
								{
									h_g += sigs[i] + '-';
									sig_c++;
								}
							}
						}
					}

					if (sigs.Length == sig_c)
					{  //life event statisfied
						lifevts[h_g.TrimEnd('-')] = hg.Value;
					}
				}
			}
			return lifevts;
		}
		string get_own_houses(string lord, Dictionary<string, string> dct)
		{
			string hno = "";
			foreach (var itm in dct)
			{
				double dhpos = dmsToDec(Convert.ToInt32(dct[itm.Key].Split("°")[0]), Convert.ToInt32(dct[itm.Key].Split("°")[1].Split("'")[0]), Convert.ToInt32(dct[itm.Key].Split("°")[1].Split("'")[1].Split("\"")[0]));
				string subz = getSUB(dhpos);
				string sl = string.Format("{0}{1}", Char.ToUpper(subz.Split('-')[0][0]), subz.Split('-')[0][1]);
				if (sl == lord) hno += string.Format("{0},", itm.Key);
			}
			return hno;
		}

		int get_hno_by_pos(double mins, Dictionary<string, string> dct)
		{
			//console.log('significator get_hno_by_pos mins', mins);
			foreach (var itm in dct)
			{
				//console.log('significator hno=' + key);
				int v_iter = Convert.ToInt32(itm.Key);
				int cur_h = (v_iter == 12) ? 1 : v_iter + 1;
				double mins1 = dmsToDec(Convert.ToInt32(dct[itm.Key].Split("°")[0]), Convert.ToInt32(dct[itm.Key].Split("°")[1].Split("'")[0]), Convert.ToInt32(dct[itm.Key].Split("°")[1].Split("'")[1].Split("\"")[0]));
				double mins2 = dmsToDec(Convert.ToInt32(dct[cur_h.ToString()].Split("°")[0]), Convert.ToInt32(dct[cur_h.ToString()].Split("°")[1].Split("'")[0]), Convert.ToInt32(dct[cur_h.ToString()].Split("°")[1].Split("'")[1].Split("\"")[0]));
				//console.log('significator mins1', mins1);
				//console.log('significator mins2', mins2);
				if (mins2 < mins1)
				{
					//if(mins >= mins1 && mins <= 21600) return v_iter;
					if (mins >= 0 && mins > mins1) return v_iter;
				}
				else
				{
					if (mins >= mins1 && mins < mins2) return v_iter;
				}
				//if(mins >= mins1 && mins <= mins2)
				//return v_iter;
				//else if((mins1 > mins2) && ((this.oHouse[key].pos >= mins1 && this.oHouse[key].pos <= 360*60) || (this.oHouse[key].pos >= 0 && this.oHouse[key].pos //<= mins2)))
				//	return v_iter;
			}
			return 12;
		}

		int get_h_from_h(int s_h, int d_h)
		{
			int h = s_h;
			for (var i = h; i < d_h; i++)
			{
				if (i > 12) i = 1;
				if (i == d_h) return i;
			}
			return -1;
		}
		double calcFortuna(double s, double m, double a)
		{
			double r = ((a + m) > s) ? (a + m) - s : (a + s) - m;
			return (r < 0) ? (r + 360) : (r > 360) ? r - 360 : r;
		}
		string getSubSub(double pos, string sub)
		{
			string astClient = Path.Combine(_env.ContentRootPath, @"Content\astroclient");
			string fl = string.Format(@"{0}\{1}.json", astClient, sub);
			using (StreamReader r = new StreamReader(fl))
			{
				string jsn = r.ReadToEnd();
				List<SSLord> sublords = JsonConvert.DeserializeObject<List<SSLord>>(jsn);
				foreach (var sb in sublords)
				{
					var sdegs = sb.deg;
					var s_smins = dmsToDec(Convert.ToInt32(sdegs.Split('-')[0].Split('.')[0]), Convert.ToInt32(sdegs.Split('-')[0].Split('.')[1]), Convert.ToInt32(sdegs.Split('-')[0].Split('.')[2]));
					var e_smins = dmsToDec(Convert.ToInt32(sdegs.Split('-')[1].Split('.')[0]), Convert.ToInt32(sdegs.Split('-')[1].Split('.')[1]), Convert.ToInt32(sdegs.Split('-')[1].Split('.')[2]));
					if (pos >= s_smins && pos < e_smins) return sb.sub;
				}
			}
			return "";
		}
		double calcAng(double p, double a)
		{
			return (p + a) > 360 ? (p + a) - 360 : p + a;
		}
	}
	public static class RndList
	{
		private static Random rng = new Random();
		public static void Shuffle<T>(ref List<T> list)
		{
			int n = list.Count;
			while (n > 1)
			{
				n--;
				int k = rng.Next(n + 1);
				T value = list[k];
				list[k] = list[n];
				list[n] = value;
			}
		}
	}
	public class LayoutHelper
	{
		private readonly PdfDocument _document;
		private readonly XUnit _topPosition;
		private readonly XUnit _bottomMargin;
		private XUnit _currentPosition;
		public LayoutHelper(PdfDocument document, XUnit topPosition, XUnit bottomMargin)
		{
			_document = document;
			_topPosition = topPosition;
			_bottomMargin = bottomMargin;
			// Set a value outside the page - a new page will be created on the first request.
			_currentPosition = bottomMargin + 10000;
		}
		public XUnit GetLinePosition(XUnit requestedHeight)
		{
			return GetLinePosition(requestedHeight, -1f);
		}
		public XUnit GetLinePosition(XUnit requestedHeight, XUnit requiredHeight)
		{
			XUnit required = requiredHeight == -1f ? requestedHeight : requiredHeight;
			if (_currentPosition + required > _bottomMargin)
				CreatePage();
			XUnit result = _currentPosition;
			_currentPosition += requestedHeight;
			return result;
		}
		public XGraphics Gfx { get; private set; }
		public XTextFormatter tf { get; private set; }
		public PdfPage Page { get; private set; }
		void CreatePage()
		{
			Page = _document.AddPage();
			Page.Size = PdfSharp.PageSize.A4;
			Gfx = XGraphics.FromPdfPage(Page);
			tf = new XTextFormatter(Gfx);
			var vpen = new XPen(XColor.FromArgb(255, 211, 84, 0));
			Gfx.DrawRectangle(vpen, new XRect(5, 5, Page.Width - 10, Page.Height - 10));
			Gfx.DrawRectangle(vpen, new XRect(7, 7, Page.Width - 14, Page.Height - 14));
			_currentPosition = _topPosition;
		}
		public void DrawImage(string fl, int x, int y, int width, int height)
		{
			XImage image = XImage.FromFile(fl);
			Gfx.DrawImage(image, x, y, width, height);
		}
	}
	public static class SplitLineCounter
	{
		public static int GetSplittedLineCount(this XGraphics gfx, string content, XFont font, double maxWidth)
		{
			//handy function for creating list of string
			Func<string, IList<string>> listFor = val => new List<string> { val };
			// string.IsNullOrEmpty is too long :p
			Func<string, bool> nOe = str => string.IsNullOrEmpty(str);
			// return a space for an empty string (sIe = Space if Empty)
			Func<string, string> sIe = str => nOe(str) ? " " : str;
			// check if we can fit a text in the maxWidth
			Func<string, string, bool> canFitText = (t1, t2) => gfx.MeasureString($"{(nOe(t1) ? "" : $"{t1} ")}{sIe(t2)}", font).Width <= maxWidth;

			Func<IList<string>, string, IList<string>> appendtoLast =
					(list, val) => list.Take(list.Count - 1)
									   .Concat(listFor($"{(nOe(list.Last()) ? "" : $"{list.Last()} ")}{sIe(val)}"))
									   .ToList();

			var splitted = content.Split(' ');

			var lines = splitted.Aggregate(listFor(""),
					(lfeed, next) => canFitText(lfeed.Last(), next) ? appendtoLast(lfeed, next) : lfeed.Concat(listFor(next)).ToList(),
					list => list.Count());

			return lines;
		}

	}
}